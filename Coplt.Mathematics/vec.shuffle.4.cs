// generated by template, do not modify manually

namespace Coplt.Mathematics;

public static partial class math
{
    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// example
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// s yz zy
    /// r (y0, z0, z1, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle(this float4 a, float4 b, Shuffle42 lh)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle(a.vector, b.vector, lh));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, lh);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Move the low part of b to the high part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (x0, y0, x1, y1) (l0, l1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 movelh(this float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.MoveLowToHigh(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x, a.y, b.x, b.y);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Move the high part of b to the low part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (z1, w1, z0, w0) (h1, h0)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 movehl(this float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.MoveHighToLow(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(b.z, b.w, a.z, a.w);
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// example
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// s yz zy
    /// r (y0, z0, z1, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle(this double4 a, double4 b, Shuffle42 lh)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle(a.vector, b.vector, lh));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, lh);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Move the low part of b to the high part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (x0, y0, x1, y1) (l0, l1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 movelh(this double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.MoveLowToHigh(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x, a.y, b.x, b.y);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Move the high part of b to the low part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (z1, w1, z0, w0) (h1, h0)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 movehl(this double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.MoveHighToLow(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(b.z, b.w, a.z, a.w);
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// example
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// s yz zy
    /// r (y0, z0, z1, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle(this short4 a, short4 b, Shuffle42 lh)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, lh);
    }

    /// <summary>
    /// Move the low part of b to the high part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (x0, y0, x1, y1) (l0, l1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 movelh(this short4 a, short4 b)
    {
        return new(a.x, a.y, b.x, b.y);
    }

    /// <summary>
    /// Move the high part of b to the low part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (z1, w1, z0, w0) (h1, h0)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 movehl(this short4 a, short4 b)
    {
        return new(b.z, b.w, a.z, a.w);
    }
}

public static partial class math
{
    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// example
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// s yz zy
    /// r (y0, z0, z1, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle(this ushort4 a, ushort4 b, Shuffle42 lh)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, lh);
    }

    /// <summary>
    /// Move the low part of b to the high part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (x0, y0, x1, y1) (l0, l1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 movelh(this ushort4 a, ushort4 b)
    {
        return new(a.x, a.y, b.x, b.y);
    }

    /// <summary>
    /// Move the high part of b to the low part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (z1, w1, z0, w0) (h1, h0)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 movehl(this ushort4 a, ushort4 b)
    {
        return new(b.z, b.w, a.z, a.w);
    }
}

public static partial class math
{
    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// example
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// s yz zy
    /// r (y0, z0, z1, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle(this int4 a, int4 b, Shuffle42 lh)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle(a.vector, b.vector, lh));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, lh);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Move the low part of b to the high part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (x0, y0, x1, y1) (l0, l1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 movelh(this int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.MoveLowToHigh(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x, a.y, b.x, b.y);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Move the high part of b to the low part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (z1, w1, z0, w0) (h1, h0)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 movehl(this int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.MoveHighToLow(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(b.z, b.w, a.z, a.w);
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// example
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// s yz zy
    /// r (y0, z0, z1, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle(this uint4 a, uint4 b, Shuffle42 lh)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle(a.vector, b.vector, lh));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, lh);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Move the low part of b to the high part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (x0, y0, x1, y1) (l0, l1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 movelh(this uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.MoveLowToHigh(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x, a.y, b.x, b.y);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Move the high part of b to the low part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (z1, w1, z0, w0) (h1, h0)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 movehl(this uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.MoveHighToLow(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(b.z, b.w, a.z, a.w);
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// example
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// s yz zy
    /// r (y0, z0, z1, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle(this long4 a, long4 b, Shuffle42 lh)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle(a.vector, b.vector, lh));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, lh);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Move the low part of b to the high part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (x0, y0, x1, y1) (l0, l1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 movelh(this long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.MoveLowToHigh(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x, a.y, b.x, b.y);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Move the high part of b to the low part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (z1, w1, z0, w0) (h1, h0)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 movehl(this long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.MoveHighToLow(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(b.z, b.w, a.z, a.w);
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// example
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// s yz zy
    /// r (y0, z0, z1, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle(this ulong4 a, ulong4 b, Shuffle42 lh)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle(a.vector, b.vector, lh));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, lh);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Move the low part of b to the high part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (x0, y0, x1, y1) (l0, l1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 movelh(this ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.MoveLowToHigh(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x, a.y, b.x, b.y);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Move the high part of b to the low part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (z1, w1, z0, w0) (h1, h0)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 movehl(this ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.MoveHighToLow(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(b.z, b.w, a.z, a.w);
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// example
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// s yz zy
    /// r (y0, z0, z1, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle(this decimal4 a, decimal4 b, Shuffle42 lh)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, lh);
    }

    /// <summary>
    /// Move the low part of b to the high part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (x0, y0, x1, y1) (l0, l1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 movelh(this decimal4 a, decimal4 b)
    {
        return new(a.x, a.y, b.x, b.y);
    }

    /// <summary>
    /// Move the high part of b to the low part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (z1, w1, z0, w0) (h1, h0)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 movehl(this decimal4 a, decimal4 b)
    {
        return new(b.z, b.w, a.z, a.w);
    }
}

public static partial class math
{
    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// example
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// s yz zy
    /// r (y0, z0, z1, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle(this half4 a, half4 b, Shuffle42 lh)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, lh);
    }

    /// <summary>
    /// Move the low part of b to the high part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (x0, y0, x1, y1) (l0, l1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 movelh(this half4 a, half4 b)
    {
        return new(a.x, a.y, b.x, b.y);
    }

    /// <summary>
    /// Move the high part of b to the low part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (z1, w1, z0, w0) (h1, h0)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 movehl(this half4 a, half4 b)
    {
        return new(b.z, b.w, a.z, a.w);
    }
}

public static partial class math
{
    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// example
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// s yz zy
    /// r (y0, z0, z1, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle(this b16v4 a, b16v4 b, Shuffle42 lh)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, lh);
    }

    /// <summary>
    /// Move the low part of b to the high part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (x0, y0, x1, y1) (l0, l1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 movelh(this b16v4 a, b16v4 b)
    {
        return new(a.x, a.y, b.x, b.y);
    }

    /// <summary>
    /// Move the high part of b to the low part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (z1, w1, z0, w0) (h1, h0)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 movehl(this b16v4 a, b16v4 b)
    {
        return new(b.z, b.w, a.z, a.w);
    }
}

public static partial class math
{
    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// example
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// s yz zy
    /// r (y0, z0, z1, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle(this b32v4 a, b32v4 b, Shuffle42 lh)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle(a.vector, b.vector, lh));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, lh);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Move the low part of b to the high part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (x0, y0, x1, y1) (l0, l1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 movelh(this b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.MoveLowToHigh(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x, a.y, b.x, b.y);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Move the high part of b to the low part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (z1, w1, z0, w0) (h1, h0)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 movehl(this b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.MoveHighToLow(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(b.z, b.w, a.z, a.w);
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// example
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// s yz zy
    /// r (y0, z0, z1, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle(this b64v4 a, b64v4 b, Shuffle42 lh)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle(a.vector, b.vector, lh));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, lh);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Move the low part of b to the high part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (x0, y0, x1, y1) (l0, l1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 movelh(this b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.MoveLowToHigh(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x, a.y, b.x, b.y);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Move the high part of b to the low part of a
    /// <code>
    /// a (x0, y0, z0, w0) (l0, h0)
    /// b (x1, y1, z1, w1) (l1, h1)
    /// r (z1, w1, z0, w0) (h1, h0)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 movehl(this b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.MoveHighToLow(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(b.z, b.w, a.z, a.w);
        #endif // NET8_0_OR_GREATER
    }
}
