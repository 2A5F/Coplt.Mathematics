<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    var TypMap = Typ.Typs.ToDictionary(a => a.name);

    foreach (var typ in Typ.Typs)
    {
        if (!Typ.ExplicitConverts.TryGetValue(typ.name, out var exp)) exp = [];
        if (!Typ.ImplicitConverts.TryGetValue(typ.name, out var imp)) imp = [];

        if (exp.Length + imp.Length == 0) continue;

        var convs = exp.AsParallel().AsOrdered().Select(a => (c:"explicit", t:TypMap.TryGetValue(a, out var b) ? b : default))
            .Concat(imp.AsParallel().AsOrdered().Select(a => (c:"implicit", t:TypMap.TryGetValue(a, out var b) ? b : default)))
            .Where(a => a.t.name != null).ToArray();

        for (var n = 2; n <= 4; n++)
        {
            for (var m = 2; m <= 4; m++)
            {
                var byteSize = typ.size * (n is 3 ? 4 : n);
                var bitSize = 8 * byteSize;

                var vecTypeName = $"{typ.name}{n}";
                var vecTypeNameM = $"{typ.name}{m}";
                var typeName = $"{typ.name.Replace('v', 'm')}{n}x{m}";

                var bType = $"b{typ.size * 8}v";
                var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
                var bTypeName = $"{bType.Replace('v', 'm')}{n}x{m}";
#>

#region <#= typeName #>

public partial struct <#= typeName #>
{
<#
                foreach (var (ck, tar) in convs)
                {
                    var tarName = $"{tar.name.Replace('v', 'm')}{n}x{m}";

                    var cast = $"({tar.name}{n})";
#>
    [MethodImpl(256 | 512)]
    public static <#= ck #> operator <#= tarName #>(<#= typeName #> self)
        => new(<#= string.Join(", ", Enumerable.Range(0, m).Select(c => $"{cast}self.c{c}")) #>);
<#
                }
#>
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
