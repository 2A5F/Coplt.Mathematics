<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.Json;
<#
    foreach (var typ in Typ.Typs)
    {
        for (var n = 2; n <= 4; n++)
        {
            for (var m = 2; m <= 4; m++)
            {
                var byteSize = typ.size * (n is 3 ? 4 : n);
                var bitSize = 8 * byteSize;

                var vecTypeName = $"{typ.name}{n}";
                var typeName = $"{typ.name.Replace('v', 'm')}{n}x{m}";
#>

#region <#= typeName #>

[CpuOnly]
public class <#= typeName #>JsonConverter : JsonConverter<<#= typeName #>>
{
    public override <#= typeName #> Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
<#
                for (var j = 0; j < n; j++)
                {
                    for (var i = 0; i < m; i++)
                    {
#>
        reader.Read();
        var m<#= j #><#= i #> = <#= typ.jsonCastBack #>reader.Get<#= typ.jsonType #>();
<#
                    }
                }
#>
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(<#=
                    string.Join(", ", Enumerable.Range(0, n).SelectMany(j => Enumerable.Range(0, m).Select(i => $"m{j}{i}"))) #>);
    }
    public override void Write(Utf8JsonWriter writer, <#= typeName #> value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
<#
                for (var j = 0; j < n; j++)
                {
                    for (var i = 0; i < m; i++)
                    {
                        if (typ.bol)
                        {
#>
        writer.WriteBooleanValue(value.m<#= j #><#= i #>);
<#
                        }
                        else
                        {
#>
        writer.WriteNumberValue(<#= typ.jsonCast #>value.m<#= j #><#= i #>);
<#
                        }
                    }
                }
#>
        writer.WriteEndArray();
    }
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
