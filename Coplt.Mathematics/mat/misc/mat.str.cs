// generated by template, do not modify manually

namespace Coplt.Mathematics;

#region float2x2

public partial struct float2x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"float2x2({{{m00}, {m01}}}, {{{m10}, {m11}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"float2x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "float2x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "float2x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // float2x2

#region float2x3

public partial struct float2x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"float2x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"float2x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "float2x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "float2x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // float2x3

#region float2x4

public partial struct float2x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"float2x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"float2x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "float2x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "float2x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // float2x4

#region float3x2

public partial struct float3x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"float3x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"float3x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "float3x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "float3x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // float3x2

#region float3x3

public partial struct float3x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"float3x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"float3x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "float3x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "float3x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // float3x3

#region float3x4

public partial struct float3x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"float3x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"float3x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "float3x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "float3x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // float3x4

#region float4x2

public partial struct float4x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"float4x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}}, {{{m30}, {m31}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"float4x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "float4x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "float4x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // float4x2

#region float4x3

public partial struct float4x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"float4x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}}, {{{m30}, {m31}, {m32}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"float4x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "float4x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "float4x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // float4x3

#region float4x4

public partial struct float4x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"float4x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}}, {{{m30}, {m31}, {m32}, {m33}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"float4x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}, {m33.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "float4x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "float4x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // float4x4

#region double2x2

public partial struct double2x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"double2x2({{{m00}, {m01}}}, {{{m10}, {m11}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"double2x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "double2x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "double2x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // double2x2

#region double2x3

public partial struct double2x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"double2x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"double2x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "double2x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "double2x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // double2x3

#region double2x4

public partial struct double2x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"double2x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"double2x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "double2x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "double2x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // double2x4

#region double3x2

public partial struct double3x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"double3x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"double3x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "double3x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "double3x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // double3x2

#region double3x3

public partial struct double3x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"double3x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"double3x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "double3x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "double3x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // double3x3

#region double3x4

public partial struct double3x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"double3x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"double3x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "double3x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "double3x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // double3x4

#region double4x2

public partial struct double4x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"double4x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}}, {{{m30}, {m31}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"double4x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "double4x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "double4x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // double4x2

#region double4x3

public partial struct double4x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"double4x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}}, {{{m30}, {m31}, {m32}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"double4x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "double4x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "double4x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // double4x3

#region double4x4

public partial struct double4x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"double4x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}}, {{{m30}, {m31}, {m32}, {m33}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"double4x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}, {m33.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "double4x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "double4x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // double4x4

#region short2x2

public partial struct short2x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"short2x2({{{m00}, {m01}}}, {{{m10}, {m11}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"short2x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "short2x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "short2x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // short2x2

#region short2x3

public partial struct short2x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"short2x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"short2x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "short2x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "short2x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // short2x3

#region short2x4

public partial struct short2x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"short2x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"short2x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "short2x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "short2x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // short2x4

#region short3x2

public partial struct short3x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"short3x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"short3x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "short3x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "short3x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // short3x2

#region short3x3

public partial struct short3x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"short3x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"short3x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "short3x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "short3x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // short3x3

#region short3x4

public partial struct short3x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"short3x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"short3x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "short3x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "short3x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // short3x4

#region short4x2

public partial struct short4x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"short4x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}}, {{{m30}, {m31}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"short4x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "short4x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "short4x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // short4x2

#region short4x3

public partial struct short4x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"short4x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}}, {{{m30}, {m31}, {m32}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"short4x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "short4x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "short4x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // short4x3

#region short4x4

public partial struct short4x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"short4x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}}, {{{m30}, {m31}, {m32}, {m33}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"short4x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}, {m33.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "short4x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "short4x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // short4x4

#region ushort2x2

public partial struct ushort2x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"ushort2x2({{{m00}, {m01}}}, {{{m10}, {m11}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"ushort2x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ushort2x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ushort2x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // ushort2x2

#region ushort2x3

public partial struct ushort2x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"ushort2x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"ushort2x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ushort2x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ushort2x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // ushort2x3

#region ushort2x4

public partial struct ushort2x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"ushort2x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"ushort2x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ushort2x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ushort2x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // ushort2x4

#region ushort3x2

public partial struct ushort3x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"ushort3x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"ushort3x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ushort3x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ushort3x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // ushort3x2

#region ushort3x3

public partial struct ushort3x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"ushort3x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"ushort3x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ushort3x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ushort3x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // ushort3x3

#region ushort3x4

public partial struct ushort3x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"ushort3x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"ushort3x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ushort3x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ushort3x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // ushort3x4

#region ushort4x2

public partial struct ushort4x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"ushort4x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}}, {{{m30}, {m31}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"ushort4x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ushort4x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ushort4x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // ushort4x2

#region ushort4x3

public partial struct ushort4x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"ushort4x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}}, {{{m30}, {m31}, {m32}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"ushort4x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ushort4x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ushort4x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // ushort4x3

#region ushort4x4

public partial struct ushort4x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"ushort4x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}}, {{{m30}, {m31}, {m32}, {m33}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"ushort4x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}, {m33.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ushort4x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ushort4x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // ushort4x4

#region int2x2

public partial struct int2x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"int2x2({{{m00}, {m01}}}, {{{m10}, {m11}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"int2x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "int2x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "int2x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // int2x2

#region int2x3

public partial struct int2x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"int2x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"int2x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "int2x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "int2x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // int2x3

#region int2x4

public partial struct int2x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"int2x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"int2x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "int2x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "int2x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // int2x4

#region int3x2

public partial struct int3x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"int3x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"int3x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "int3x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "int3x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // int3x2

#region int3x3

public partial struct int3x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"int3x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"int3x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "int3x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "int3x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // int3x3

#region int3x4

public partial struct int3x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"int3x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"int3x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "int3x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "int3x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // int3x4

#region int4x2

public partial struct int4x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"int4x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}}, {{{m30}, {m31}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"int4x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "int4x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "int4x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // int4x2

#region int4x3

public partial struct int4x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"int4x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}}, {{{m30}, {m31}, {m32}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"int4x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "int4x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "int4x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // int4x3

#region int4x4

public partial struct int4x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"int4x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}}, {{{m30}, {m31}, {m32}, {m33}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"int4x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}, {m33.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "int4x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "int4x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // int4x4

#region uint2x2

public partial struct uint2x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"uint2x2({{{m00}, {m01}}}, {{{m10}, {m11}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"uint2x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "uint2x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "uint2x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // uint2x2

#region uint2x3

public partial struct uint2x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"uint2x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"uint2x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "uint2x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "uint2x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // uint2x3

#region uint2x4

public partial struct uint2x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"uint2x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"uint2x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "uint2x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "uint2x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // uint2x4

#region uint3x2

public partial struct uint3x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"uint3x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"uint3x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "uint3x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "uint3x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // uint3x2

#region uint3x3

public partial struct uint3x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"uint3x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"uint3x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "uint3x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "uint3x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // uint3x3

#region uint3x4

public partial struct uint3x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"uint3x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"uint3x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "uint3x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "uint3x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // uint3x4

#region uint4x2

public partial struct uint4x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"uint4x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}}, {{{m30}, {m31}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"uint4x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "uint4x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "uint4x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // uint4x2

#region uint4x3

public partial struct uint4x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"uint4x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}}, {{{m30}, {m31}, {m32}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"uint4x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "uint4x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "uint4x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // uint4x3

#region uint4x4

public partial struct uint4x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"uint4x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}}, {{{m30}, {m31}, {m32}, {m33}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"uint4x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}, {m33.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "uint4x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "uint4x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // uint4x4

#region long2x2

public partial struct long2x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"long2x2({{{m00}, {m01}}}, {{{m10}, {m11}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"long2x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "long2x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "long2x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // long2x2

#region long2x3

public partial struct long2x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"long2x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"long2x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "long2x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "long2x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // long2x3

#region long2x4

public partial struct long2x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"long2x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"long2x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "long2x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "long2x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // long2x4

#region long3x2

public partial struct long3x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"long3x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"long3x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "long3x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "long3x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // long3x2

#region long3x3

public partial struct long3x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"long3x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"long3x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "long3x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "long3x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // long3x3

#region long3x4

public partial struct long3x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"long3x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"long3x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "long3x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "long3x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // long3x4

#region long4x2

public partial struct long4x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"long4x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}}, {{{m30}, {m31}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"long4x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "long4x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "long4x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // long4x2

#region long4x3

public partial struct long4x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"long4x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}}, {{{m30}, {m31}, {m32}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"long4x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "long4x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "long4x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // long4x3

#region long4x4

public partial struct long4x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"long4x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}}, {{{m30}, {m31}, {m32}, {m33}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"long4x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}, {m33.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "long4x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "long4x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // long4x4

#region ulong2x2

public partial struct ulong2x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"ulong2x2({{{m00}, {m01}}}, {{{m10}, {m11}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"ulong2x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ulong2x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ulong2x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // ulong2x2

#region ulong2x3

public partial struct ulong2x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"ulong2x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"ulong2x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ulong2x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ulong2x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // ulong2x3

#region ulong2x4

public partial struct ulong2x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"ulong2x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"ulong2x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ulong2x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ulong2x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // ulong2x4

#region ulong3x2

public partial struct ulong3x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"ulong3x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"ulong3x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ulong3x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ulong3x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // ulong3x2

#region ulong3x3

public partial struct ulong3x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"ulong3x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"ulong3x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ulong3x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ulong3x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // ulong3x3

#region ulong3x4

public partial struct ulong3x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"ulong3x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"ulong3x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ulong3x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ulong3x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // ulong3x4

#region ulong4x2

public partial struct ulong4x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"ulong4x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}}, {{{m30}, {m31}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"ulong4x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ulong4x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ulong4x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // ulong4x2

#region ulong4x3

public partial struct ulong4x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"ulong4x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}}, {{{m30}, {m31}, {m32}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"ulong4x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ulong4x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ulong4x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // ulong4x3

#region ulong4x4

public partial struct ulong4x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"ulong4x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}}, {{{m30}, {m31}, {m32}, {m33}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"ulong4x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}, {m33.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ulong4x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "ulong4x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // ulong4x4

#region decimal2x2

public partial struct decimal2x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"decimal2x2({{{m00}, {m01}}}, {{{m10}, {m11}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"decimal2x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "decimal2x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "decimal2x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // decimal2x2

#region decimal2x3

public partial struct decimal2x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"decimal2x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"decimal2x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "decimal2x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "decimal2x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // decimal2x3

#region decimal2x4

public partial struct decimal2x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"decimal2x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"decimal2x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "decimal2x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "decimal2x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // decimal2x4

#region decimal3x2

public partial struct decimal3x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"decimal3x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"decimal3x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "decimal3x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "decimal3x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // decimal3x2

#region decimal3x3

public partial struct decimal3x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"decimal3x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"decimal3x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "decimal3x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "decimal3x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // decimal3x3

#region decimal3x4

public partial struct decimal3x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"decimal3x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"decimal3x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "decimal3x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "decimal3x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // decimal3x4

#region decimal4x2

public partial struct decimal4x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"decimal4x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}}, {{{m30}, {m31}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"decimal4x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "decimal4x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "decimal4x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // decimal4x2

#region decimal4x3

public partial struct decimal4x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"decimal4x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}}, {{{m30}, {m31}, {m32}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"decimal4x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "decimal4x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "decimal4x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // decimal4x3

#region decimal4x4

public partial struct decimal4x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"decimal4x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}}, {{{m30}, {m31}, {m32}, {m33}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"decimal4x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}, {m33.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "decimal4x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "decimal4x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // decimal4x4

#region half2x2

public partial struct half2x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"half2x2({{{m00}, {m01}}}, {{{m10}, {m11}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"half2x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "half2x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "half2x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // half2x2

#region half2x3

public partial struct half2x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"half2x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"half2x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "half2x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "half2x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // half2x3

#region half2x4

public partial struct half2x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"half2x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"half2x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "half2x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "half2x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // half2x4

#region half3x2

public partial struct half3x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"half3x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"half3x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "half3x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "half3x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // half3x2

#region half3x3

public partial struct half3x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"half3x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"half3x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "half3x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "half3x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // half3x3

#region half3x4

public partial struct half3x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"half3x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"half3x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "half3x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "half3x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // half3x4

#region half4x2

public partial struct half4x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"half4x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}}, {{{m30}, {m31}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"half4x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "half4x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "half4x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // half4x2

#region half4x3

public partial struct half4x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"half4x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}}, {{{m30}, {m31}, {m32}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"half4x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "half4x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "half4x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // half4x3

#region half4x4

public partial struct half4x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"half4x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}}, {{{m30}, {m31}, {m32}, {m33}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"half4x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}, {m33.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "half4x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "half4x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // half4x4

#region b16m2x2

public partial struct b16m2x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b16m2x2({{{m00}, {m01}}}, {{{m10}, {m11}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b16m2x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b16m2x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b16m2x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b16m2x2

#region b16m2x3

public partial struct b16m2x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b16m2x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b16m2x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b16m2x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b16m2x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b16m2x3

#region b16m2x4

public partial struct b16m2x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b16m2x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b16m2x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b16m2x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b16m2x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b16m2x4

#region b16m3x2

public partial struct b16m3x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b16m3x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b16m3x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b16m3x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b16m3x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b16m3x2

#region b16m3x3

public partial struct b16m3x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b16m3x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b16m3x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b16m3x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b16m3x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b16m3x3

#region b16m3x4

public partial struct b16m3x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b16m3x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b16m3x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b16m3x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b16m3x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b16m3x4

#region b16m4x2

public partial struct b16m4x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b16m4x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}}, {{{m30}, {m31}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b16m4x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b16m4x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b16m4x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b16m4x2

#region b16m4x3

public partial struct b16m4x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b16m4x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}}, {{{m30}, {m31}, {m32}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b16m4x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b16m4x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b16m4x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b16m4x3

#region b16m4x4

public partial struct b16m4x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b16m4x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}}, {{{m30}, {m31}, {m32}, {m33}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b16m4x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}, {m33.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b16m4x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b16m4x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b16m4x4

#region b32m2x2

public partial struct b32m2x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b32m2x2({{{m00}, {m01}}}, {{{m10}, {m11}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b32m2x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b32m2x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b32m2x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b32m2x2

#region b32m2x3

public partial struct b32m2x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b32m2x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b32m2x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b32m2x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b32m2x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b32m2x3

#region b32m2x4

public partial struct b32m2x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b32m2x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b32m2x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b32m2x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b32m2x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b32m2x4

#region b32m3x2

public partial struct b32m3x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b32m3x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b32m3x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b32m3x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b32m3x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b32m3x2

#region b32m3x3

public partial struct b32m3x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b32m3x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b32m3x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b32m3x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b32m3x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b32m3x3

#region b32m3x4

public partial struct b32m3x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b32m3x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b32m3x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b32m3x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b32m3x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b32m3x4

#region b32m4x2

public partial struct b32m4x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b32m4x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}}, {{{m30}, {m31}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b32m4x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b32m4x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b32m4x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b32m4x2

#region b32m4x3

public partial struct b32m4x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b32m4x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}}, {{{m30}, {m31}, {m32}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b32m4x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b32m4x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b32m4x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b32m4x3

#region b32m4x4

public partial struct b32m4x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b32m4x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}}, {{{m30}, {m31}, {m32}, {m33}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b32m4x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}, {m33.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b32m4x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b32m4x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b32m4x4

#region b64m2x2

public partial struct b64m2x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b64m2x2({{{m00}, {m01}}}, {{{m10}, {m11}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b64m2x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b64m2x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b64m2x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b64m2x2

#region b64m2x3

public partial struct b64m2x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b64m2x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b64m2x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b64m2x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b64m2x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b64m2x3

#region b64m2x4

public partial struct b64m2x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b64m2x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b64m2x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b64m2x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b64m2x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b64m2x4

#region b64m3x2

public partial struct b64m3x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b64m3x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b64m3x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b64m3x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b64m3x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b64m3x2

#region b64m3x3

public partial struct b64m3x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b64m3x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b64m3x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b64m3x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b64m3x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b64m3x3

#region b64m3x4

public partial struct b64m3x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b64m3x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b64m3x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b64m3x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b64m3x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b64m3x4

#region b64m4x2

public partial struct b64m4x2 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b64m4x2({{{m00}, {m01}}}, {{{m10}, {m11}}}, {{{m20}, {m21}}}, {{{m30}, {m31}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b64m4x2({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b64m4x2({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b64m4x2({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b64m4x2

#region b64m4x3

public partial struct b64m4x3 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b64m4x3({{{m00}, {m01}, {m02}}}, {{{m10}, {m11}, {m12}}}, {{{m20}, {m21}, {m22}}}, {{{m30}, {m31}, {m32}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b64m4x3({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b64m4x3({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b64m4x3({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b64m4x3

#region b64m4x4

public partial struct b64m4x4 : IFormattable
    , ISpanFormattable
    , IUtf8SpanFormattable
{
    [CpuOnly]
    public override string ToString() => $"b64m4x4({{{m00}, {m01}, {m02}, {m03}}}, {{{m10}, {m11}, {m12}, {m13}}}, {{{m20}, {m21}, {m22}, {m23}}}, {{{m30}, {m31}, {m32}, {m33}}})";

    [CpuOnly]
    public string ToString(string? format, IFormatProvider? formatProvider) => $"b64m4x4({{{m00.ToString(format, formatProvider)}, {m01.ToString(format, formatProvider)}, {m02.ToString(format, formatProvider)}, {m03.ToString(format, formatProvider)}}}, {{{m10.ToString(format, formatProvider)}, {m11.ToString(format, formatProvider)}, {m12.ToString(format, formatProvider)}, {m13.ToString(format, formatProvider)}}}, {{{m20.ToString(format, formatProvider)}, {m21.ToString(format, formatProvider)}, {m22.ToString(format, formatProvider)}, {m23.ToString(format, formatProvider)}}}, {{{m30.ToString(format, formatProvider)}, {m31.ToString(format, formatProvider)}, {m32.ToString(format, formatProvider)}, {m33.ToString(format, formatProvider)}}})";

    [CpuOnly]
    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b64m4x4({")) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {")) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})")) return false;
        return true;
    }

    [CpuOnly]
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "b64m4x4({"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m00, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m01, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m02, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m03, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m10, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m11, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m12, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m13, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m20, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m21, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m22, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m23, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "}, {"u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m30, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m31, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m32, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
        if (!TryFormatPart(ref dst, ref nc, m33, format, provider)) return false;
        if (!TryFormatPart(ref dst, ref nc, "})"u8)) return false;
        return true;
    }
}

#endregion // b64m4x4
