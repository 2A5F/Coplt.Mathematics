<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        for (var n = 2; n <= 4; n++)
        {
            for (var m = 2; m <= 4; m++)
            {
                var byteSize = typ.size * (n is 3 ? 4 : n);
                var bitSize = 8 * byteSize;

                var vecTypeName = $"{typ.name}{n}";
                var typeName = $"{typ.name.Replace('v', 'm')}{n}x{m}";

                var bType = $"b{typ.size * 8}v";
                var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
                var bTypeName = $"{bType.Replace('v', 'm')}{n}x{m}";
#>

#region <#= typeName #>

public partial struct <#= typeName #> : IEquatable<<#= typeName #>>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<<#= typeName #>, <#= typeName #>, bool>
<#
            if (bTyp.name != null)
            {
#>
    , IEqualityOperators<<#= typeName #>, <#= typeName #>, <#= bTypeName #>>
<#
            }
#>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(<#= typeName #> other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is <#= typeName #> other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"c{i}.GetHashCode()")) #>);

    [MethodImpl(256 | 512)]
    public bool EqualsAll(<#= typeName #> other) => <#= string.Join(" && ", Enumerable.Range(0, m).Select(i => $"c{i}.EqualsAll(other.c{i})")) #>;

    [MethodImpl(256 | 512)]
    public bool EqualsAny(<#= typeName #> other) => <#= string.Join(" || ", Enumerable.Range(0, m).Select(i => $"c{i}.EqualsAny(other.c{i})")) #>;
<#
                if (bTyp.name != null)
                {
#>

    [MethodImpl(256 | 512)]
    public <#= bTypeName #> EqualsVector(<#= typeName #> other) => new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"c{i}.EqualsVector(other.c{i})")) #>);

    [MethodImpl(256 | 512)]
    public <#= bTypeName #> EqualsVectorNot(<#= typeName #> other) => new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"c{i}.EqualsVectorNot(other.c{i})")) #>);
<#
                }
#>

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<<#= typeName #>, <#= typeName #>, bool>.operator ==(<#= typeName #> left, <#= typeName #> right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<<#= typeName #>, <#= typeName #>, bool>.operator !=(<#= typeName #> left, <#= typeName #> right) => !left.Equals(right);
    #endif
<#
            if (bTyp.name != null)
            {
#>

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator ==(<#= typeName #> left, <#= typeName #> right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator !=(<#= typeName #> left, <#= typeName #> right) => left.EqualsVectorNot(right);
<#
            }
#>

    #endregion
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
