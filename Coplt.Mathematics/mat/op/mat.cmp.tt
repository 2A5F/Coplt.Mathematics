<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        if (typ.size * 8 >= 128) continue;
        
        for (var n = 2; n <= 4; n++)
        {
            for (var m = 2; m <= 4; m++)
            {
                var byteSize = typ.size * (n is 3 ? 4 : n);
                var bitSize = 8 * byteSize;
                
                var vecTypeName = $"{typ.name}{n}";
                var vecTypeNameM = $"{typ.name}{m}";
                var typeName = $"{typ.name.Replace('v', 'm')}{n}x{m}";

                var bType = $"b{typ.size * 8}v";
                var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
                var bTypeName = $"{bType.Replace('v', 'm')}{n}x{m}";
#>

#region <#= typeName #>

public partial struct <#= typeName #> : IComparable<<#= typeName #>>, IComparable
    , IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>
<#
            if (bTyp.name != null)
            {
#>
    , IComparisonOperators<<#= typeName #>, <#= typeName #>, <#= bTypeName #>>
<#
            }
#>
{
    [MethodImpl(256 | 512)]
    public readonly int CompareTo(object? obj)
    {
        if (ReferenceEquals(null, obj)) return 1;
        return obj is <#= typeName #> other ? CompareTo(other) : throw new ArgumentException($"Object must be of type {nameof(<#= typeName #>)}");
    }

    static bool IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>.operator <(<#= typeName #> left, <#= typeName #> right) => 
        left.LessThanAll(right);
    [MethodImpl(256 | 512)]
    static bool IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>.operator >(<#= typeName #> left, <#= typeName #> right) => 
        left.GreaterThanAll(right);
    [MethodImpl(256 | 512)]
    static bool IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>.operator <=(<#= typeName #> left, <#= typeName #> right) => 
        left.LessThanOrEqualAll(right);
    [MethodImpl(256 | 512)]
    static bool IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>.operator >=(<#= typeName #> left, <#= typeName #> right) => 
        left.GreaterThanOrEqualAll(right);

    [MethodImpl(256 | 512)]
    public readonly int CompareTo(<#= typeName #> other)
    {
<#
                for (int c = 0; c < m; c++)
                {
#>
        { if (c<#= 0 #>.CompareTo(other.c<#= 0 #>) is var r and not 0) return r; }
<#
                }
#>
        return 0;
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator <(<#= typeName #> left, <#= typeName #> right) =>
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(c => $"left.c{c} < right.c{c}")) #>);
    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator >(<#= typeName #> left, <#= typeName #> right) =>
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(c => $"left.c{c} > right.c{c}")) #>);
    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator <=(<#= typeName #> left, <#= typeName #> right) =>
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(c => $"left.c{c} <= right.c{c}")) #>);
    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator >=(<#= typeName #> left, <#= typeName #> right) =>
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(c => $"left.c{c} >= right.c{c}")) #>);

    [MethodImpl(256 | 512)]
    public readonly bool LessThanAll(<#= typeName #> other) => <#= string.Join(" && ", Enumerable.Range(0, m).Select(c => $"c{c}.LessThanAll(other.c{c})")) #>;
    [MethodImpl(256 | 512)]
    public readonly bool GreaterThanAll(<#= typeName #> other) => <#= string.Join(" && ", Enumerable.Range(0, m).Select(c => $"c{c}.GreaterThanAll(other.c{c})")) #>;
    [MethodImpl(256 | 512)]
    public readonly bool LessThanOrEqualAll(<#= typeName #> other) => <#= string.Join(" && ", Enumerable.Range(0, m).Select(c => $"c{c}.LessThanOrEqualAll(other.c{c})")) #>;
    [MethodImpl(256 | 512)]
    public readonly bool GreaterThanOrEqualAll(<#= typeName #> other) => <#= string.Join(" && ", Enumerable.Range(0, m).Select(c => $"c{c}.GreaterThanOrEqualAll(other.c{c})")) #>;

    [MethodImpl(256 | 512)]
    public readonly bool LessThanAny(<#= typeName #> other) => <#= string.Join(" || ", Enumerable.Range(0, m).Select(c => $"c{c}.LessThanAny(other.c{c})")) #>;
    [MethodImpl(256 | 512)]
    public readonly bool GreaterThanAny(<#= typeName #> other) => <#= string.Join(" || ", Enumerable.Range(0, m).Select(c => $"c{c}.GreaterThanAny(other.c{c})")) #>;
    [MethodImpl(256 | 512)]
    public readonly bool LessThanOrEqualAny(<#= typeName #> other) => <#= string.Join(" || ", Enumerable.Range(0, m).Select(c => $"c{c}.LessThanOrEqualAny(other.c{c})")) #>;
    [MethodImpl(256 | 512)]
    public readonly bool GreaterThanOrEqualAny(<#= typeName #> other) => <#= string.Join(" || ", Enumerable.Range(0, m).Select(c => $"c{c}.GreaterThanOrEqualAny(other.c{c})")) #>;
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
