// generated by template, do not modify manually

namespace Coplt.Mathematics;

#region float2x2

public partial struct float2x2 : IEquatable<float2x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<float2x2, float2x2, bool>
    , IEqualityOperators<float2x2, float2x2, b32m2x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(float2x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is float2x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(float2x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(float2x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b32m2x2 EqualsVector(float2x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b32m2x2 EqualsVectorNot(float2x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<float2x2, float2x2, bool>.operator ==(float2x2 left, float2x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<float2x2, float2x2, bool>.operator !=(float2x2 left, float2x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m2x2 operator ==(float2x2 left, float2x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m2x2 operator !=(float2x2 left, float2x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // float2x2

#region float2x3

public partial struct float2x3 : IEquatable<float2x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<float2x3, float2x3, bool>
    , IEqualityOperators<float2x3, float2x3, b32m2x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(float2x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is float2x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(float2x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(float2x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b32m2x3 EqualsVector(float2x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b32m2x3 EqualsVectorNot(float2x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<float2x3, float2x3, bool>.operator ==(float2x3 left, float2x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<float2x3, float2x3, bool>.operator !=(float2x3 left, float2x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m2x3 operator ==(float2x3 left, float2x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m2x3 operator !=(float2x3 left, float2x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // float2x3

#region float2x4

public partial struct float2x4 : IEquatable<float2x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<float2x4, float2x4, bool>
    , IEqualityOperators<float2x4, float2x4, b32m2x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(float2x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is float2x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(float2x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(float2x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b32m2x4 EqualsVector(float2x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b32m2x4 EqualsVectorNot(float2x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<float2x4, float2x4, bool>.operator ==(float2x4 left, float2x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<float2x4, float2x4, bool>.operator !=(float2x4 left, float2x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m2x4 operator ==(float2x4 left, float2x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m2x4 operator !=(float2x4 left, float2x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // float2x4

#region float3x2

public partial struct float3x2 : IEquatable<float3x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<float3x2, float3x2, bool>
    , IEqualityOperators<float3x2, float3x2, b32m3x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(float3x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is float3x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(float3x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(float3x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b32m3x2 EqualsVector(float3x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b32m3x2 EqualsVectorNot(float3x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<float3x2, float3x2, bool>.operator ==(float3x2 left, float3x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<float3x2, float3x2, bool>.operator !=(float3x2 left, float3x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m3x2 operator ==(float3x2 left, float3x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m3x2 operator !=(float3x2 left, float3x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // float3x2

#region float3x3

public partial struct float3x3 : IEquatable<float3x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<float3x3, float3x3, bool>
    , IEqualityOperators<float3x3, float3x3, b32m3x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(float3x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is float3x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(float3x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(float3x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b32m3x3 EqualsVector(float3x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b32m3x3 EqualsVectorNot(float3x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<float3x3, float3x3, bool>.operator ==(float3x3 left, float3x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<float3x3, float3x3, bool>.operator !=(float3x3 left, float3x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m3x3 operator ==(float3x3 left, float3x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m3x3 operator !=(float3x3 left, float3x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // float3x3

#region float3x4

public partial struct float3x4 : IEquatable<float3x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<float3x4, float3x4, bool>
    , IEqualityOperators<float3x4, float3x4, b32m3x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(float3x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is float3x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(float3x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(float3x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b32m3x4 EqualsVector(float3x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b32m3x4 EqualsVectorNot(float3x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<float3x4, float3x4, bool>.operator ==(float3x4 left, float3x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<float3x4, float3x4, bool>.operator !=(float3x4 left, float3x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m3x4 operator ==(float3x4 left, float3x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m3x4 operator !=(float3x4 left, float3x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // float3x4

#region float4x2

public partial struct float4x2 : IEquatable<float4x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<float4x2, float4x2, bool>
    , IEqualityOperators<float4x2, float4x2, b32m4x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(float4x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is float4x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(float4x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(float4x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b32m4x2 EqualsVector(float4x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b32m4x2 EqualsVectorNot(float4x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<float4x2, float4x2, bool>.operator ==(float4x2 left, float4x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<float4x2, float4x2, bool>.operator !=(float4x2 left, float4x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m4x2 operator ==(float4x2 left, float4x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m4x2 operator !=(float4x2 left, float4x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // float4x2

#region float4x3

public partial struct float4x3 : IEquatable<float4x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<float4x3, float4x3, bool>
    , IEqualityOperators<float4x3, float4x3, b32m4x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(float4x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is float4x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(float4x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(float4x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b32m4x3 EqualsVector(float4x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b32m4x3 EqualsVectorNot(float4x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<float4x3, float4x3, bool>.operator ==(float4x3 left, float4x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<float4x3, float4x3, bool>.operator !=(float4x3 left, float4x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m4x3 operator ==(float4x3 left, float4x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m4x3 operator !=(float4x3 left, float4x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // float4x3

#region float4x4

public partial struct float4x4 : IEquatable<float4x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<float4x4, float4x4, bool>
    , IEqualityOperators<float4x4, float4x4, b32m4x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(float4x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is float4x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(float4x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(float4x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b32m4x4 EqualsVector(float4x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b32m4x4 EqualsVectorNot(float4x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<float4x4, float4x4, bool>.operator ==(float4x4 left, float4x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<float4x4, float4x4, bool>.operator !=(float4x4 left, float4x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m4x4 operator ==(float4x4 left, float4x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m4x4 operator !=(float4x4 left, float4x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // float4x4

#region double2x2

public partial struct double2x2 : IEquatable<double2x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<double2x2, double2x2, bool>
    , IEqualityOperators<double2x2, double2x2, b64m2x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(double2x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is double2x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(double2x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(double2x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b64m2x2 EqualsVector(double2x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b64m2x2 EqualsVectorNot(double2x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<double2x2, double2x2, bool>.operator ==(double2x2 left, double2x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<double2x2, double2x2, bool>.operator !=(double2x2 left, double2x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m2x2 operator ==(double2x2 left, double2x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m2x2 operator !=(double2x2 left, double2x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // double2x2

#region double2x3

public partial struct double2x3 : IEquatable<double2x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<double2x3, double2x3, bool>
    , IEqualityOperators<double2x3, double2x3, b64m2x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(double2x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is double2x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(double2x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(double2x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b64m2x3 EqualsVector(double2x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b64m2x3 EqualsVectorNot(double2x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<double2x3, double2x3, bool>.operator ==(double2x3 left, double2x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<double2x3, double2x3, bool>.operator !=(double2x3 left, double2x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m2x3 operator ==(double2x3 left, double2x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m2x3 operator !=(double2x3 left, double2x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // double2x3

#region double2x4

public partial struct double2x4 : IEquatable<double2x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<double2x4, double2x4, bool>
    , IEqualityOperators<double2x4, double2x4, b64m2x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(double2x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is double2x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(double2x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(double2x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b64m2x4 EqualsVector(double2x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b64m2x4 EqualsVectorNot(double2x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<double2x4, double2x4, bool>.operator ==(double2x4 left, double2x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<double2x4, double2x4, bool>.operator !=(double2x4 left, double2x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m2x4 operator ==(double2x4 left, double2x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m2x4 operator !=(double2x4 left, double2x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // double2x4

#region double3x2

public partial struct double3x2 : IEquatable<double3x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<double3x2, double3x2, bool>
    , IEqualityOperators<double3x2, double3x2, b64m3x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(double3x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is double3x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(double3x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(double3x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b64m3x2 EqualsVector(double3x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b64m3x2 EqualsVectorNot(double3x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<double3x2, double3x2, bool>.operator ==(double3x2 left, double3x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<double3x2, double3x2, bool>.operator !=(double3x2 left, double3x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m3x2 operator ==(double3x2 left, double3x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m3x2 operator !=(double3x2 left, double3x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // double3x2

#region double3x3

public partial struct double3x3 : IEquatable<double3x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<double3x3, double3x3, bool>
    , IEqualityOperators<double3x3, double3x3, b64m3x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(double3x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is double3x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(double3x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(double3x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b64m3x3 EqualsVector(double3x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b64m3x3 EqualsVectorNot(double3x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<double3x3, double3x3, bool>.operator ==(double3x3 left, double3x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<double3x3, double3x3, bool>.operator !=(double3x3 left, double3x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m3x3 operator ==(double3x3 left, double3x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m3x3 operator !=(double3x3 left, double3x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // double3x3

#region double3x4

public partial struct double3x4 : IEquatable<double3x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<double3x4, double3x4, bool>
    , IEqualityOperators<double3x4, double3x4, b64m3x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(double3x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is double3x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(double3x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(double3x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b64m3x4 EqualsVector(double3x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b64m3x4 EqualsVectorNot(double3x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<double3x4, double3x4, bool>.operator ==(double3x4 left, double3x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<double3x4, double3x4, bool>.operator !=(double3x4 left, double3x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m3x4 operator ==(double3x4 left, double3x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m3x4 operator !=(double3x4 left, double3x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // double3x4

#region double4x2

public partial struct double4x2 : IEquatable<double4x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<double4x2, double4x2, bool>
    , IEqualityOperators<double4x2, double4x2, b64m4x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(double4x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is double4x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(double4x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(double4x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b64m4x2 EqualsVector(double4x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b64m4x2 EqualsVectorNot(double4x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<double4x2, double4x2, bool>.operator ==(double4x2 left, double4x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<double4x2, double4x2, bool>.operator !=(double4x2 left, double4x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m4x2 operator ==(double4x2 left, double4x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m4x2 operator !=(double4x2 left, double4x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // double4x2

#region double4x3

public partial struct double4x3 : IEquatable<double4x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<double4x3, double4x3, bool>
    , IEqualityOperators<double4x3, double4x3, b64m4x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(double4x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is double4x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(double4x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(double4x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b64m4x3 EqualsVector(double4x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b64m4x3 EqualsVectorNot(double4x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<double4x3, double4x3, bool>.operator ==(double4x3 left, double4x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<double4x3, double4x3, bool>.operator !=(double4x3 left, double4x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m4x3 operator ==(double4x3 left, double4x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m4x3 operator !=(double4x3 left, double4x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // double4x3

#region double4x4

public partial struct double4x4 : IEquatable<double4x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<double4x4, double4x4, bool>
    , IEqualityOperators<double4x4, double4x4, b64m4x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(double4x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is double4x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(double4x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(double4x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b64m4x4 EqualsVector(double4x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b64m4x4 EqualsVectorNot(double4x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<double4x4, double4x4, bool>.operator ==(double4x4 left, double4x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<double4x4, double4x4, bool>.operator !=(double4x4 left, double4x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m4x4 operator ==(double4x4 left, double4x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m4x4 operator !=(double4x4 left, double4x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // double4x4

#region short2x2

public partial struct short2x2 : IEquatable<short2x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<short2x2, short2x2, bool>
    , IEqualityOperators<short2x2, short2x2, b16m2x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(short2x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is short2x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(short2x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(short2x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b16m2x2 EqualsVector(short2x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b16m2x2 EqualsVectorNot(short2x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<short2x2, short2x2, bool>.operator ==(short2x2 left, short2x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<short2x2, short2x2, bool>.operator !=(short2x2 left, short2x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m2x2 operator ==(short2x2 left, short2x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m2x2 operator !=(short2x2 left, short2x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // short2x2

#region short2x3

public partial struct short2x3 : IEquatable<short2x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<short2x3, short2x3, bool>
    , IEqualityOperators<short2x3, short2x3, b16m2x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(short2x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is short2x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(short2x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(short2x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b16m2x3 EqualsVector(short2x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b16m2x3 EqualsVectorNot(short2x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<short2x3, short2x3, bool>.operator ==(short2x3 left, short2x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<short2x3, short2x3, bool>.operator !=(short2x3 left, short2x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m2x3 operator ==(short2x3 left, short2x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m2x3 operator !=(short2x3 left, short2x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // short2x3

#region short2x4

public partial struct short2x4 : IEquatable<short2x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<short2x4, short2x4, bool>
    , IEqualityOperators<short2x4, short2x4, b16m2x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(short2x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is short2x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(short2x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(short2x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b16m2x4 EqualsVector(short2x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b16m2x4 EqualsVectorNot(short2x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<short2x4, short2x4, bool>.operator ==(short2x4 left, short2x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<short2x4, short2x4, bool>.operator !=(short2x4 left, short2x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m2x4 operator ==(short2x4 left, short2x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m2x4 operator !=(short2x4 left, short2x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // short2x4

#region short3x2

public partial struct short3x2 : IEquatable<short3x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<short3x2, short3x2, bool>
    , IEqualityOperators<short3x2, short3x2, b16m3x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(short3x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is short3x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(short3x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(short3x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b16m3x2 EqualsVector(short3x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b16m3x2 EqualsVectorNot(short3x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<short3x2, short3x2, bool>.operator ==(short3x2 left, short3x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<short3x2, short3x2, bool>.operator !=(short3x2 left, short3x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m3x2 operator ==(short3x2 left, short3x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m3x2 operator !=(short3x2 left, short3x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // short3x2

#region short3x3

public partial struct short3x3 : IEquatable<short3x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<short3x3, short3x3, bool>
    , IEqualityOperators<short3x3, short3x3, b16m3x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(short3x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is short3x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(short3x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(short3x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b16m3x3 EqualsVector(short3x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b16m3x3 EqualsVectorNot(short3x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<short3x3, short3x3, bool>.operator ==(short3x3 left, short3x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<short3x3, short3x3, bool>.operator !=(short3x3 left, short3x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m3x3 operator ==(short3x3 left, short3x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m3x3 operator !=(short3x3 left, short3x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // short3x3

#region short3x4

public partial struct short3x4 : IEquatable<short3x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<short3x4, short3x4, bool>
    , IEqualityOperators<short3x4, short3x4, b16m3x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(short3x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is short3x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(short3x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(short3x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b16m3x4 EqualsVector(short3x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b16m3x4 EqualsVectorNot(short3x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<short3x4, short3x4, bool>.operator ==(short3x4 left, short3x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<short3x4, short3x4, bool>.operator !=(short3x4 left, short3x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m3x4 operator ==(short3x4 left, short3x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m3x4 operator !=(short3x4 left, short3x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // short3x4

#region short4x2

public partial struct short4x2 : IEquatable<short4x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<short4x2, short4x2, bool>
    , IEqualityOperators<short4x2, short4x2, b16m4x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(short4x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is short4x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(short4x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(short4x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b16m4x2 EqualsVector(short4x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b16m4x2 EqualsVectorNot(short4x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<short4x2, short4x2, bool>.operator ==(short4x2 left, short4x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<short4x2, short4x2, bool>.operator !=(short4x2 left, short4x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m4x2 operator ==(short4x2 left, short4x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m4x2 operator !=(short4x2 left, short4x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // short4x2

#region short4x3

public partial struct short4x3 : IEquatable<short4x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<short4x3, short4x3, bool>
    , IEqualityOperators<short4x3, short4x3, b16m4x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(short4x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is short4x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(short4x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(short4x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b16m4x3 EqualsVector(short4x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b16m4x3 EqualsVectorNot(short4x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<short4x3, short4x3, bool>.operator ==(short4x3 left, short4x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<short4x3, short4x3, bool>.operator !=(short4x3 left, short4x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m4x3 operator ==(short4x3 left, short4x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m4x3 operator !=(short4x3 left, short4x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // short4x3

#region short4x4

public partial struct short4x4 : IEquatable<short4x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<short4x4, short4x4, bool>
    , IEqualityOperators<short4x4, short4x4, b16m4x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(short4x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is short4x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(short4x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(short4x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b16m4x4 EqualsVector(short4x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b16m4x4 EqualsVectorNot(short4x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<short4x4, short4x4, bool>.operator ==(short4x4 left, short4x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<short4x4, short4x4, bool>.operator !=(short4x4 left, short4x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m4x4 operator ==(short4x4 left, short4x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m4x4 operator !=(short4x4 left, short4x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // short4x4

#region ushort2x2

public partial struct ushort2x2 : IEquatable<ushort2x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<ushort2x2, ushort2x2, bool>
    , IEqualityOperators<ushort2x2, ushort2x2, b16m2x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(ushort2x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is ushort2x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(ushort2x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(ushort2x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b16m2x2 EqualsVector(ushort2x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b16m2x2 EqualsVectorNot(ushort2x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ushort2x2, ushort2x2, bool>.operator ==(ushort2x2 left, ushort2x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ushort2x2, ushort2x2, bool>.operator !=(ushort2x2 left, ushort2x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m2x2 operator ==(ushort2x2 left, ushort2x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m2x2 operator !=(ushort2x2 left, ushort2x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // ushort2x2

#region ushort2x3

public partial struct ushort2x3 : IEquatable<ushort2x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<ushort2x3, ushort2x3, bool>
    , IEqualityOperators<ushort2x3, ushort2x3, b16m2x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(ushort2x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is ushort2x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(ushort2x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(ushort2x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b16m2x3 EqualsVector(ushort2x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b16m2x3 EqualsVectorNot(ushort2x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ushort2x3, ushort2x3, bool>.operator ==(ushort2x3 left, ushort2x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ushort2x3, ushort2x3, bool>.operator !=(ushort2x3 left, ushort2x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m2x3 operator ==(ushort2x3 left, ushort2x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m2x3 operator !=(ushort2x3 left, ushort2x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // ushort2x3

#region ushort2x4

public partial struct ushort2x4 : IEquatable<ushort2x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<ushort2x4, ushort2x4, bool>
    , IEqualityOperators<ushort2x4, ushort2x4, b16m2x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(ushort2x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is ushort2x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(ushort2x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(ushort2x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b16m2x4 EqualsVector(ushort2x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b16m2x4 EqualsVectorNot(ushort2x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ushort2x4, ushort2x4, bool>.operator ==(ushort2x4 left, ushort2x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ushort2x4, ushort2x4, bool>.operator !=(ushort2x4 left, ushort2x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m2x4 operator ==(ushort2x4 left, ushort2x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m2x4 operator !=(ushort2x4 left, ushort2x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // ushort2x4

#region ushort3x2

public partial struct ushort3x2 : IEquatable<ushort3x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<ushort3x2, ushort3x2, bool>
    , IEqualityOperators<ushort3x2, ushort3x2, b16m3x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(ushort3x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is ushort3x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(ushort3x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(ushort3x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b16m3x2 EqualsVector(ushort3x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b16m3x2 EqualsVectorNot(ushort3x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ushort3x2, ushort3x2, bool>.operator ==(ushort3x2 left, ushort3x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ushort3x2, ushort3x2, bool>.operator !=(ushort3x2 left, ushort3x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m3x2 operator ==(ushort3x2 left, ushort3x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m3x2 operator !=(ushort3x2 left, ushort3x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // ushort3x2

#region ushort3x3

public partial struct ushort3x3 : IEquatable<ushort3x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<ushort3x3, ushort3x3, bool>
    , IEqualityOperators<ushort3x3, ushort3x3, b16m3x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(ushort3x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is ushort3x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(ushort3x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(ushort3x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b16m3x3 EqualsVector(ushort3x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b16m3x3 EqualsVectorNot(ushort3x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ushort3x3, ushort3x3, bool>.operator ==(ushort3x3 left, ushort3x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ushort3x3, ushort3x3, bool>.operator !=(ushort3x3 left, ushort3x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m3x3 operator ==(ushort3x3 left, ushort3x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m3x3 operator !=(ushort3x3 left, ushort3x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // ushort3x3

#region ushort3x4

public partial struct ushort3x4 : IEquatable<ushort3x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<ushort3x4, ushort3x4, bool>
    , IEqualityOperators<ushort3x4, ushort3x4, b16m3x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(ushort3x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is ushort3x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(ushort3x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(ushort3x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b16m3x4 EqualsVector(ushort3x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b16m3x4 EqualsVectorNot(ushort3x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ushort3x4, ushort3x4, bool>.operator ==(ushort3x4 left, ushort3x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ushort3x4, ushort3x4, bool>.operator !=(ushort3x4 left, ushort3x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m3x4 operator ==(ushort3x4 left, ushort3x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m3x4 operator !=(ushort3x4 left, ushort3x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // ushort3x4

#region ushort4x2

public partial struct ushort4x2 : IEquatable<ushort4x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<ushort4x2, ushort4x2, bool>
    , IEqualityOperators<ushort4x2, ushort4x2, b16m4x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(ushort4x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is ushort4x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(ushort4x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(ushort4x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b16m4x2 EqualsVector(ushort4x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b16m4x2 EqualsVectorNot(ushort4x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ushort4x2, ushort4x2, bool>.operator ==(ushort4x2 left, ushort4x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ushort4x2, ushort4x2, bool>.operator !=(ushort4x2 left, ushort4x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m4x2 operator ==(ushort4x2 left, ushort4x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m4x2 operator !=(ushort4x2 left, ushort4x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // ushort4x2

#region ushort4x3

public partial struct ushort4x3 : IEquatable<ushort4x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<ushort4x3, ushort4x3, bool>
    , IEqualityOperators<ushort4x3, ushort4x3, b16m4x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(ushort4x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is ushort4x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(ushort4x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(ushort4x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b16m4x3 EqualsVector(ushort4x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b16m4x3 EqualsVectorNot(ushort4x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ushort4x3, ushort4x3, bool>.operator ==(ushort4x3 left, ushort4x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ushort4x3, ushort4x3, bool>.operator !=(ushort4x3 left, ushort4x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m4x3 operator ==(ushort4x3 left, ushort4x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m4x3 operator !=(ushort4x3 left, ushort4x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // ushort4x3

#region ushort4x4

public partial struct ushort4x4 : IEquatable<ushort4x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<ushort4x4, ushort4x4, bool>
    , IEqualityOperators<ushort4x4, ushort4x4, b16m4x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(ushort4x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is ushort4x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(ushort4x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(ushort4x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b16m4x4 EqualsVector(ushort4x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b16m4x4 EqualsVectorNot(ushort4x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ushort4x4, ushort4x4, bool>.operator ==(ushort4x4 left, ushort4x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ushort4x4, ushort4x4, bool>.operator !=(ushort4x4 left, ushort4x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m4x4 operator ==(ushort4x4 left, ushort4x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m4x4 operator !=(ushort4x4 left, ushort4x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // ushort4x4

#region int2x2

public partial struct int2x2 : IEquatable<int2x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<int2x2, int2x2, bool>
    , IEqualityOperators<int2x2, int2x2, b32m2x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(int2x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is int2x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(int2x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(int2x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b32m2x2 EqualsVector(int2x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b32m2x2 EqualsVectorNot(int2x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<int2x2, int2x2, bool>.operator ==(int2x2 left, int2x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<int2x2, int2x2, bool>.operator !=(int2x2 left, int2x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m2x2 operator ==(int2x2 left, int2x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m2x2 operator !=(int2x2 left, int2x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // int2x2

#region int2x3

public partial struct int2x3 : IEquatable<int2x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<int2x3, int2x3, bool>
    , IEqualityOperators<int2x3, int2x3, b32m2x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(int2x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is int2x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(int2x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(int2x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b32m2x3 EqualsVector(int2x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b32m2x3 EqualsVectorNot(int2x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<int2x3, int2x3, bool>.operator ==(int2x3 left, int2x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<int2x3, int2x3, bool>.operator !=(int2x3 left, int2x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m2x3 operator ==(int2x3 left, int2x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m2x3 operator !=(int2x3 left, int2x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // int2x3

#region int2x4

public partial struct int2x4 : IEquatable<int2x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<int2x4, int2x4, bool>
    , IEqualityOperators<int2x4, int2x4, b32m2x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(int2x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is int2x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(int2x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(int2x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b32m2x4 EqualsVector(int2x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b32m2x4 EqualsVectorNot(int2x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<int2x4, int2x4, bool>.operator ==(int2x4 left, int2x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<int2x4, int2x4, bool>.operator !=(int2x4 left, int2x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m2x4 operator ==(int2x4 left, int2x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m2x4 operator !=(int2x4 left, int2x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // int2x4

#region int3x2

public partial struct int3x2 : IEquatable<int3x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<int3x2, int3x2, bool>
    , IEqualityOperators<int3x2, int3x2, b32m3x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(int3x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is int3x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(int3x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(int3x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b32m3x2 EqualsVector(int3x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b32m3x2 EqualsVectorNot(int3x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<int3x2, int3x2, bool>.operator ==(int3x2 left, int3x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<int3x2, int3x2, bool>.operator !=(int3x2 left, int3x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m3x2 operator ==(int3x2 left, int3x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m3x2 operator !=(int3x2 left, int3x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // int3x2

#region int3x3

public partial struct int3x3 : IEquatable<int3x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<int3x3, int3x3, bool>
    , IEqualityOperators<int3x3, int3x3, b32m3x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(int3x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is int3x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(int3x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(int3x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b32m3x3 EqualsVector(int3x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b32m3x3 EqualsVectorNot(int3x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<int3x3, int3x3, bool>.operator ==(int3x3 left, int3x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<int3x3, int3x3, bool>.operator !=(int3x3 left, int3x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m3x3 operator ==(int3x3 left, int3x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m3x3 operator !=(int3x3 left, int3x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // int3x3

#region int3x4

public partial struct int3x4 : IEquatable<int3x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<int3x4, int3x4, bool>
    , IEqualityOperators<int3x4, int3x4, b32m3x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(int3x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is int3x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(int3x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(int3x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b32m3x4 EqualsVector(int3x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b32m3x4 EqualsVectorNot(int3x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<int3x4, int3x4, bool>.operator ==(int3x4 left, int3x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<int3x4, int3x4, bool>.operator !=(int3x4 left, int3x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m3x4 operator ==(int3x4 left, int3x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m3x4 operator !=(int3x4 left, int3x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // int3x4

#region int4x2

public partial struct int4x2 : IEquatable<int4x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<int4x2, int4x2, bool>
    , IEqualityOperators<int4x2, int4x2, b32m4x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(int4x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is int4x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(int4x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(int4x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b32m4x2 EqualsVector(int4x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b32m4x2 EqualsVectorNot(int4x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<int4x2, int4x2, bool>.operator ==(int4x2 left, int4x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<int4x2, int4x2, bool>.operator !=(int4x2 left, int4x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m4x2 operator ==(int4x2 left, int4x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m4x2 operator !=(int4x2 left, int4x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // int4x2

#region int4x3

public partial struct int4x3 : IEquatable<int4x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<int4x3, int4x3, bool>
    , IEqualityOperators<int4x3, int4x3, b32m4x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(int4x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is int4x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(int4x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(int4x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b32m4x3 EqualsVector(int4x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b32m4x3 EqualsVectorNot(int4x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<int4x3, int4x3, bool>.operator ==(int4x3 left, int4x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<int4x3, int4x3, bool>.operator !=(int4x3 left, int4x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m4x3 operator ==(int4x3 left, int4x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m4x3 operator !=(int4x3 left, int4x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // int4x3

#region int4x4

public partial struct int4x4 : IEquatable<int4x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<int4x4, int4x4, bool>
    , IEqualityOperators<int4x4, int4x4, b32m4x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(int4x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is int4x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(int4x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(int4x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b32m4x4 EqualsVector(int4x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b32m4x4 EqualsVectorNot(int4x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<int4x4, int4x4, bool>.operator ==(int4x4 left, int4x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<int4x4, int4x4, bool>.operator !=(int4x4 left, int4x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m4x4 operator ==(int4x4 left, int4x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m4x4 operator !=(int4x4 left, int4x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // int4x4

#region uint2x2

public partial struct uint2x2 : IEquatable<uint2x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<uint2x2, uint2x2, bool>
    , IEqualityOperators<uint2x2, uint2x2, b32m2x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(uint2x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is uint2x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(uint2x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(uint2x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b32m2x2 EqualsVector(uint2x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b32m2x2 EqualsVectorNot(uint2x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<uint2x2, uint2x2, bool>.operator ==(uint2x2 left, uint2x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<uint2x2, uint2x2, bool>.operator !=(uint2x2 left, uint2x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m2x2 operator ==(uint2x2 left, uint2x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m2x2 operator !=(uint2x2 left, uint2x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // uint2x2

#region uint2x3

public partial struct uint2x3 : IEquatable<uint2x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<uint2x3, uint2x3, bool>
    , IEqualityOperators<uint2x3, uint2x3, b32m2x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(uint2x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is uint2x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(uint2x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(uint2x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b32m2x3 EqualsVector(uint2x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b32m2x3 EqualsVectorNot(uint2x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<uint2x3, uint2x3, bool>.operator ==(uint2x3 left, uint2x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<uint2x3, uint2x3, bool>.operator !=(uint2x3 left, uint2x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m2x3 operator ==(uint2x3 left, uint2x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m2x3 operator !=(uint2x3 left, uint2x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // uint2x3

#region uint2x4

public partial struct uint2x4 : IEquatable<uint2x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<uint2x4, uint2x4, bool>
    , IEqualityOperators<uint2x4, uint2x4, b32m2x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(uint2x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is uint2x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(uint2x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(uint2x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b32m2x4 EqualsVector(uint2x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b32m2x4 EqualsVectorNot(uint2x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<uint2x4, uint2x4, bool>.operator ==(uint2x4 left, uint2x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<uint2x4, uint2x4, bool>.operator !=(uint2x4 left, uint2x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m2x4 operator ==(uint2x4 left, uint2x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m2x4 operator !=(uint2x4 left, uint2x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // uint2x4

#region uint3x2

public partial struct uint3x2 : IEquatable<uint3x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<uint3x2, uint3x2, bool>
    , IEqualityOperators<uint3x2, uint3x2, b32m3x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(uint3x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is uint3x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(uint3x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(uint3x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b32m3x2 EqualsVector(uint3x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b32m3x2 EqualsVectorNot(uint3x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<uint3x2, uint3x2, bool>.operator ==(uint3x2 left, uint3x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<uint3x2, uint3x2, bool>.operator !=(uint3x2 left, uint3x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m3x2 operator ==(uint3x2 left, uint3x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m3x2 operator !=(uint3x2 left, uint3x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // uint3x2

#region uint3x3

public partial struct uint3x3 : IEquatable<uint3x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<uint3x3, uint3x3, bool>
    , IEqualityOperators<uint3x3, uint3x3, b32m3x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(uint3x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is uint3x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(uint3x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(uint3x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b32m3x3 EqualsVector(uint3x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b32m3x3 EqualsVectorNot(uint3x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<uint3x3, uint3x3, bool>.operator ==(uint3x3 left, uint3x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<uint3x3, uint3x3, bool>.operator !=(uint3x3 left, uint3x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m3x3 operator ==(uint3x3 left, uint3x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m3x3 operator !=(uint3x3 left, uint3x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // uint3x3

#region uint3x4

public partial struct uint3x4 : IEquatable<uint3x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<uint3x4, uint3x4, bool>
    , IEqualityOperators<uint3x4, uint3x4, b32m3x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(uint3x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is uint3x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(uint3x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(uint3x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b32m3x4 EqualsVector(uint3x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b32m3x4 EqualsVectorNot(uint3x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<uint3x4, uint3x4, bool>.operator ==(uint3x4 left, uint3x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<uint3x4, uint3x4, bool>.operator !=(uint3x4 left, uint3x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m3x4 operator ==(uint3x4 left, uint3x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m3x4 operator !=(uint3x4 left, uint3x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // uint3x4

#region uint4x2

public partial struct uint4x2 : IEquatable<uint4x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<uint4x2, uint4x2, bool>
    , IEqualityOperators<uint4x2, uint4x2, b32m4x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(uint4x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is uint4x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(uint4x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(uint4x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b32m4x2 EqualsVector(uint4x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b32m4x2 EqualsVectorNot(uint4x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<uint4x2, uint4x2, bool>.operator ==(uint4x2 left, uint4x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<uint4x2, uint4x2, bool>.operator !=(uint4x2 left, uint4x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m4x2 operator ==(uint4x2 left, uint4x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m4x2 operator !=(uint4x2 left, uint4x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // uint4x2

#region uint4x3

public partial struct uint4x3 : IEquatable<uint4x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<uint4x3, uint4x3, bool>
    , IEqualityOperators<uint4x3, uint4x3, b32m4x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(uint4x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is uint4x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(uint4x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(uint4x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b32m4x3 EqualsVector(uint4x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b32m4x3 EqualsVectorNot(uint4x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<uint4x3, uint4x3, bool>.operator ==(uint4x3 left, uint4x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<uint4x3, uint4x3, bool>.operator !=(uint4x3 left, uint4x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m4x3 operator ==(uint4x3 left, uint4x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m4x3 operator !=(uint4x3 left, uint4x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // uint4x3

#region uint4x4

public partial struct uint4x4 : IEquatable<uint4x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<uint4x4, uint4x4, bool>
    , IEqualityOperators<uint4x4, uint4x4, b32m4x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(uint4x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is uint4x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(uint4x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(uint4x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b32m4x4 EqualsVector(uint4x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b32m4x4 EqualsVectorNot(uint4x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<uint4x4, uint4x4, bool>.operator ==(uint4x4 left, uint4x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<uint4x4, uint4x4, bool>.operator !=(uint4x4 left, uint4x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m4x4 operator ==(uint4x4 left, uint4x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m4x4 operator !=(uint4x4 left, uint4x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // uint4x4

#region long2x2

public partial struct long2x2 : IEquatable<long2x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<long2x2, long2x2, bool>
    , IEqualityOperators<long2x2, long2x2, b64m2x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(long2x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is long2x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(long2x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(long2x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b64m2x2 EqualsVector(long2x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b64m2x2 EqualsVectorNot(long2x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<long2x2, long2x2, bool>.operator ==(long2x2 left, long2x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<long2x2, long2x2, bool>.operator !=(long2x2 left, long2x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m2x2 operator ==(long2x2 left, long2x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m2x2 operator !=(long2x2 left, long2x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // long2x2

#region long2x3

public partial struct long2x3 : IEquatable<long2x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<long2x3, long2x3, bool>
    , IEqualityOperators<long2x3, long2x3, b64m2x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(long2x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is long2x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(long2x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(long2x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b64m2x3 EqualsVector(long2x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b64m2x3 EqualsVectorNot(long2x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<long2x3, long2x3, bool>.operator ==(long2x3 left, long2x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<long2x3, long2x3, bool>.operator !=(long2x3 left, long2x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m2x3 operator ==(long2x3 left, long2x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m2x3 operator !=(long2x3 left, long2x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // long2x3

#region long2x4

public partial struct long2x4 : IEquatable<long2x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<long2x4, long2x4, bool>
    , IEqualityOperators<long2x4, long2x4, b64m2x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(long2x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is long2x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(long2x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(long2x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b64m2x4 EqualsVector(long2x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b64m2x4 EqualsVectorNot(long2x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<long2x4, long2x4, bool>.operator ==(long2x4 left, long2x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<long2x4, long2x4, bool>.operator !=(long2x4 left, long2x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m2x4 operator ==(long2x4 left, long2x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m2x4 operator !=(long2x4 left, long2x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // long2x4

#region long3x2

public partial struct long3x2 : IEquatable<long3x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<long3x2, long3x2, bool>
    , IEqualityOperators<long3x2, long3x2, b64m3x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(long3x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is long3x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(long3x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(long3x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b64m3x2 EqualsVector(long3x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b64m3x2 EqualsVectorNot(long3x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<long3x2, long3x2, bool>.operator ==(long3x2 left, long3x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<long3x2, long3x2, bool>.operator !=(long3x2 left, long3x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m3x2 operator ==(long3x2 left, long3x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m3x2 operator !=(long3x2 left, long3x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // long3x2

#region long3x3

public partial struct long3x3 : IEquatable<long3x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<long3x3, long3x3, bool>
    , IEqualityOperators<long3x3, long3x3, b64m3x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(long3x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is long3x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(long3x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(long3x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b64m3x3 EqualsVector(long3x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b64m3x3 EqualsVectorNot(long3x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<long3x3, long3x3, bool>.operator ==(long3x3 left, long3x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<long3x3, long3x3, bool>.operator !=(long3x3 left, long3x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m3x3 operator ==(long3x3 left, long3x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m3x3 operator !=(long3x3 left, long3x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // long3x3

#region long3x4

public partial struct long3x4 : IEquatable<long3x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<long3x4, long3x4, bool>
    , IEqualityOperators<long3x4, long3x4, b64m3x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(long3x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is long3x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(long3x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(long3x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b64m3x4 EqualsVector(long3x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b64m3x4 EqualsVectorNot(long3x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<long3x4, long3x4, bool>.operator ==(long3x4 left, long3x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<long3x4, long3x4, bool>.operator !=(long3x4 left, long3x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m3x4 operator ==(long3x4 left, long3x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m3x4 operator !=(long3x4 left, long3x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // long3x4

#region long4x2

public partial struct long4x2 : IEquatable<long4x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<long4x2, long4x2, bool>
    , IEqualityOperators<long4x2, long4x2, b64m4x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(long4x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is long4x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(long4x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(long4x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b64m4x2 EqualsVector(long4x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b64m4x2 EqualsVectorNot(long4x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<long4x2, long4x2, bool>.operator ==(long4x2 left, long4x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<long4x2, long4x2, bool>.operator !=(long4x2 left, long4x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m4x2 operator ==(long4x2 left, long4x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m4x2 operator !=(long4x2 left, long4x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // long4x2

#region long4x3

public partial struct long4x3 : IEquatable<long4x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<long4x3, long4x3, bool>
    , IEqualityOperators<long4x3, long4x3, b64m4x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(long4x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is long4x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(long4x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(long4x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b64m4x3 EqualsVector(long4x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b64m4x3 EqualsVectorNot(long4x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<long4x3, long4x3, bool>.operator ==(long4x3 left, long4x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<long4x3, long4x3, bool>.operator !=(long4x3 left, long4x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m4x3 operator ==(long4x3 left, long4x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m4x3 operator !=(long4x3 left, long4x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // long4x3

#region long4x4

public partial struct long4x4 : IEquatable<long4x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<long4x4, long4x4, bool>
    , IEqualityOperators<long4x4, long4x4, b64m4x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(long4x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is long4x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(long4x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(long4x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b64m4x4 EqualsVector(long4x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b64m4x4 EqualsVectorNot(long4x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<long4x4, long4x4, bool>.operator ==(long4x4 left, long4x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<long4x4, long4x4, bool>.operator !=(long4x4 left, long4x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m4x4 operator ==(long4x4 left, long4x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m4x4 operator !=(long4x4 left, long4x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // long4x4

#region ulong2x2

public partial struct ulong2x2 : IEquatable<ulong2x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<ulong2x2, ulong2x2, bool>
    , IEqualityOperators<ulong2x2, ulong2x2, b64m2x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(ulong2x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is ulong2x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(ulong2x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(ulong2x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b64m2x2 EqualsVector(ulong2x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b64m2x2 EqualsVectorNot(ulong2x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ulong2x2, ulong2x2, bool>.operator ==(ulong2x2 left, ulong2x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ulong2x2, ulong2x2, bool>.operator !=(ulong2x2 left, ulong2x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m2x2 operator ==(ulong2x2 left, ulong2x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m2x2 operator !=(ulong2x2 left, ulong2x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // ulong2x2

#region ulong2x3

public partial struct ulong2x3 : IEquatable<ulong2x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<ulong2x3, ulong2x3, bool>
    , IEqualityOperators<ulong2x3, ulong2x3, b64m2x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(ulong2x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is ulong2x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(ulong2x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(ulong2x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b64m2x3 EqualsVector(ulong2x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b64m2x3 EqualsVectorNot(ulong2x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ulong2x3, ulong2x3, bool>.operator ==(ulong2x3 left, ulong2x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ulong2x3, ulong2x3, bool>.operator !=(ulong2x3 left, ulong2x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m2x3 operator ==(ulong2x3 left, ulong2x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m2x3 operator !=(ulong2x3 left, ulong2x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // ulong2x3

#region ulong2x4

public partial struct ulong2x4 : IEquatable<ulong2x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<ulong2x4, ulong2x4, bool>
    , IEqualityOperators<ulong2x4, ulong2x4, b64m2x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(ulong2x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is ulong2x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(ulong2x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(ulong2x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b64m2x4 EqualsVector(ulong2x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b64m2x4 EqualsVectorNot(ulong2x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ulong2x4, ulong2x4, bool>.operator ==(ulong2x4 left, ulong2x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ulong2x4, ulong2x4, bool>.operator !=(ulong2x4 left, ulong2x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m2x4 operator ==(ulong2x4 left, ulong2x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m2x4 operator !=(ulong2x4 left, ulong2x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // ulong2x4

#region ulong3x2

public partial struct ulong3x2 : IEquatable<ulong3x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<ulong3x2, ulong3x2, bool>
    , IEqualityOperators<ulong3x2, ulong3x2, b64m3x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(ulong3x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is ulong3x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(ulong3x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(ulong3x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b64m3x2 EqualsVector(ulong3x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b64m3x2 EqualsVectorNot(ulong3x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ulong3x2, ulong3x2, bool>.operator ==(ulong3x2 left, ulong3x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ulong3x2, ulong3x2, bool>.operator !=(ulong3x2 left, ulong3x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m3x2 operator ==(ulong3x2 left, ulong3x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m3x2 operator !=(ulong3x2 left, ulong3x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // ulong3x2

#region ulong3x3

public partial struct ulong3x3 : IEquatable<ulong3x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<ulong3x3, ulong3x3, bool>
    , IEqualityOperators<ulong3x3, ulong3x3, b64m3x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(ulong3x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is ulong3x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(ulong3x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(ulong3x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b64m3x3 EqualsVector(ulong3x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b64m3x3 EqualsVectorNot(ulong3x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ulong3x3, ulong3x3, bool>.operator ==(ulong3x3 left, ulong3x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ulong3x3, ulong3x3, bool>.operator !=(ulong3x3 left, ulong3x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m3x3 operator ==(ulong3x3 left, ulong3x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m3x3 operator !=(ulong3x3 left, ulong3x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // ulong3x3

#region ulong3x4

public partial struct ulong3x4 : IEquatable<ulong3x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<ulong3x4, ulong3x4, bool>
    , IEqualityOperators<ulong3x4, ulong3x4, b64m3x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(ulong3x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is ulong3x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(ulong3x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(ulong3x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b64m3x4 EqualsVector(ulong3x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b64m3x4 EqualsVectorNot(ulong3x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ulong3x4, ulong3x4, bool>.operator ==(ulong3x4 left, ulong3x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ulong3x4, ulong3x4, bool>.operator !=(ulong3x4 left, ulong3x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m3x4 operator ==(ulong3x4 left, ulong3x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m3x4 operator !=(ulong3x4 left, ulong3x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // ulong3x4

#region ulong4x2

public partial struct ulong4x2 : IEquatable<ulong4x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<ulong4x2, ulong4x2, bool>
    , IEqualityOperators<ulong4x2, ulong4x2, b64m4x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(ulong4x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is ulong4x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(ulong4x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(ulong4x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b64m4x2 EqualsVector(ulong4x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b64m4x2 EqualsVectorNot(ulong4x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ulong4x2, ulong4x2, bool>.operator ==(ulong4x2 left, ulong4x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ulong4x2, ulong4x2, bool>.operator !=(ulong4x2 left, ulong4x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m4x2 operator ==(ulong4x2 left, ulong4x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m4x2 operator !=(ulong4x2 left, ulong4x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // ulong4x2

#region ulong4x3

public partial struct ulong4x3 : IEquatable<ulong4x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<ulong4x3, ulong4x3, bool>
    , IEqualityOperators<ulong4x3, ulong4x3, b64m4x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(ulong4x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is ulong4x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(ulong4x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(ulong4x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b64m4x3 EqualsVector(ulong4x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b64m4x3 EqualsVectorNot(ulong4x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ulong4x3, ulong4x3, bool>.operator ==(ulong4x3 left, ulong4x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ulong4x3, ulong4x3, bool>.operator !=(ulong4x3 left, ulong4x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m4x3 operator ==(ulong4x3 left, ulong4x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m4x3 operator !=(ulong4x3 left, ulong4x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // ulong4x3

#region ulong4x4

public partial struct ulong4x4 : IEquatable<ulong4x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<ulong4x4, ulong4x4, bool>
    , IEqualityOperators<ulong4x4, ulong4x4, b64m4x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(ulong4x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is ulong4x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(ulong4x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(ulong4x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b64m4x4 EqualsVector(ulong4x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b64m4x4 EqualsVectorNot(ulong4x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ulong4x4, ulong4x4, bool>.operator ==(ulong4x4 left, ulong4x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<ulong4x4, ulong4x4, bool>.operator !=(ulong4x4 left, ulong4x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m4x4 operator ==(ulong4x4 left, ulong4x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m4x4 operator !=(ulong4x4 left, ulong4x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // ulong4x4

#region decimal2x2

public partial struct decimal2x2 : IEquatable<decimal2x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<decimal2x2, decimal2x2, bool>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(decimal2x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is decimal2x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(decimal2x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(decimal2x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<decimal2x2, decimal2x2, bool>.operator ==(decimal2x2 left, decimal2x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<decimal2x2, decimal2x2, bool>.operator !=(decimal2x2 left, decimal2x2 right) => !left.Equals(right);
    #endif

    #endregion
}

#endregion // decimal2x2

#region decimal2x3

public partial struct decimal2x3 : IEquatable<decimal2x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<decimal2x3, decimal2x3, bool>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(decimal2x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is decimal2x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(decimal2x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(decimal2x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<decimal2x3, decimal2x3, bool>.operator ==(decimal2x3 left, decimal2x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<decimal2x3, decimal2x3, bool>.operator !=(decimal2x3 left, decimal2x3 right) => !left.Equals(right);
    #endif

    #endregion
}

#endregion // decimal2x3

#region decimal2x4

public partial struct decimal2x4 : IEquatable<decimal2x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<decimal2x4, decimal2x4, bool>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(decimal2x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is decimal2x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(decimal2x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(decimal2x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<decimal2x4, decimal2x4, bool>.operator ==(decimal2x4 left, decimal2x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<decimal2x4, decimal2x4, bool>.operator !=(decimal2x4 left, decimal2x4 right) => !left.Equals(right);
    #endif

    #endregion
}

#endregion // decimal2x4

#region decimal3x2

public partial struct decimal3x2 : IEquatable<decimal3x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<decimal3x2, decimal3x2, bool>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(decimal3x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is decimal3x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(decimal3x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(decimal3x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<decimal3x2, decimal3x2, bool>.operator ==(decimal3x2 left, decimal3x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<decimal3x2, decimal3x2, bool>.operator !=(decimal3x2 left, decimal3x2 right) => !left.Equals(right);
    #endif

    #endregion
}

#endregion // decimal3x2

#region decimal3x3

public partial struct decimal3x3 : IEquatable<decimal3x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<decimal3x3, decimal3x3, bool>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(decimal3x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is decimal3x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(decimal3x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(decimal3x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<decimal3x3, decimal3x3, bool>.operator ==(decimal3x3 left, decimal3x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<decimal3x3, decimal3x3, bool>.operator !=(decimal3x3 left, decimal3x3 right) => !left.Equals(right);
    #endif

    #endregion
}

#endregion // decimal3x3

#region decimal3x4

public partial struct decimal3x4 : IEquatable<decimal3x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<decimal3x4, decimal3x4, bool>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(decimal3x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is decimal3x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(decimal3x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(decimal3x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<decimal3x4, decimal3x4, bool>.operator ==(decimal3x4 left, decimal3x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<decimal3x4, decimal3x4, bool>.operator !=(decimal3x4 left, decimal3x4 right) => !left.Equals(right);
    #endif

    #endregion
}

#endregion // decimal3x4

#region decimal4x2

public partial struct decimal4x2 : IEquatable<decimal4x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<decimal4x2, decimal4x2, bool>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(decimal4x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is decimal4x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(decimal4x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(decimal4x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<decimal4x2, decimal4x2, bool>.operator ==(decimal4x2 left, decimal4x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<decimal4x2, decimal4x2, bool>.operator !=(decimal4x2 left, decimal4x2 right) => !left.Equals(right);
    #endif

    #endregion
}

#endregion // decimal4x2

#region decimal4x3

public partial struct decimal4x3 : IEquatable<decimal4x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<decimal4x3, decimal4x3, bool>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(decimal4x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is decimal4x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(decimal4x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(decimal4x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<decimal4x3, decimal4x3, bool>.operator ==(decimal4x3 left, decimal4x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<decimal4x3, decimal4x3, bool>.operator !=(decimal4x3 left, decimal4x3 right) => !left.Equals(right);
    #endif

    #endregion
}

#endregion // decimal4x3

#region decimal4x4

public partial struct decimal4x4 : IEquatable<decimal4x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<decimal4x4, decimal4x4, bool>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(decimal4x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is decimal4x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(decimal4x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(decimal4x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<decimal4x4, decimal4x4, bool>.operator ==(decimal4x4 left, decimal4x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<decimal4x4, decimal4x4, bool>.operator !=(decimal4x4 left, decimal4x4 right) => !left.Equals(right);
    #endif

    #endregion
}

#endregion // decimal4x4

#region half2x2

public partial struct half2x2 : IEquatable<half2x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<half2x2, half2x2, bool>
    , IEqualityOperators<half2x2, half2x2, b16m2x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(half2x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is half2x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(half2x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(half2x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b16m2x2 EqualsVector(half2x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b16m2x2 EqualsVectorNot(half2x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<half2x2, half2x2, bool>.operator ==(half2x2 left, half2x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<half2x2, half2x2, bool>.operator !=(half2x2 left, half2x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m2x2 operator ==(half2x2 left, half2x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m2x2 operator !=(half2x2 left, half2x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // half2x2

#region half2x3

public partial struct half2x3 : IEquatable<half2x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<half2x3, half2x3, bool>
    , IEqualityOperators<half2x3, half2x3, b16m2x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(half2x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is half2x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(half2x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(half2x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b16m2x3 EqualsVector(half2x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b16m2x3 EqualsVectorNot(half2x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<half2x3, half2x3, bool>.operator ==(half2x3 left, half2x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<half2x3, half2x3, bool>.operator !=(half2x3 left, half2x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m2x3 operator ==(half2x3 left, half2x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m2x3 operator !=(half2x3 left, half2x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // half2x3

#region half2x4

public partial struct half2x4 : IEquatable<half2x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<half2x4, half2x4, bool>
    , IEqualityOperators<half2x4, half2x4, b16m2x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(half2x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is half2x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(half2x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(half2x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b16m2x4 EqualsVector(half2x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b16m2x4 EqualsVectorNot(half2x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<half2x4, half2x4, bool>.operator ==(half2x4 left, half2x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<half2x4, half2x4, bool>.operator !=(half2x4 left, half2x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m2x4 operator ==(half2x4 left, half2x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m2x4 operator !=(half2x4 left, half2x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // half2x4

#region half3x2

public partial struct half3x2 : IEquatable<half3x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<half3x2, half3x2, bool>
    , IEqualityOperators<half3x2, half3x2, b16m3x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(half3x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is half3x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(half3x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(half3x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b16m3x2 EqualsVector(half3x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b16m3x2 EqualsVectorNot(half3x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<half3x2, half3x2, bool>.operator ==(half3x2 left, half3x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<half3x2, half3x2, bool>.operator !=(half3x2 left, half3x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m3x2 operator ==(half3x2 left, half3x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m3x2 operator !=(half3x2 left, half3x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // half3x2

#region half3x3

public partial struct half3x3 : IEquatable<half3x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<half3x3, half3x3, bool>
    , IEqualityOperators<half3x3, half3x3, b16m3x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(half3x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is half3x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(half3x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(half3x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b16m3x3 EqualsVector(half3x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b16m3x3 EqualsVectorNot(half3x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<half3x3, half3x3, bool>.operator ==(half3x3 left, half3x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<half3x3, half3x3, bool>.operator !=(half3x3 left, half3x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m3x3 operator ==(half3x3 left, half3x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m3x3 operator !=(half3x3 left, half3x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // half3x3

#region half3x4

public partial struct half3x4 : IEquatable<half3x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<half3x4, half3x4, bool>
    , IEqualityOperators<half3x4, half3x4, b16m3x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(half3x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is half3x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(half3x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(half3x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b16m3x4 EqualsVector(half3x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b16m3x4 EqualsVectorNot(half3x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<half3x4, half3x4, bool>.operator ==(half3x4 left, half3x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<half3x4, half3x4, bool>.operator !=(half3x4 left, half3x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m3x4 operator ==(half3x4 left, half3x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m3x4 operator !=(half3x4 left, half3x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // half3x4

#region half4x2

public partial struct half4x2 : IEquatable<half4x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<half4x2, half4x2, bool>
    , IEqualityOperators<half4x2, half4x2, b16m4x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(half4x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is half4x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(half4x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(half4x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b16m4x2 EqualsVector(half4x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b16m4x2 EqualsVectorNot(half4x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<half4x2, half4x2, bool>.operator ==(half4x2 left, half4x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<half4x2, half4x2, bool>.operator !=(half4x2 left, half4x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m4x2 operator ==(half4x2 left, half4x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m4x2 operator !=(half4x2 left, half4x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // half4x2

#region half4x3

public partial struct half4x3 : IEquatable<half4x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<half4x3, half4x3, bool>
    , IEqualityOperators<half4x3, half4x3, b16m4x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(half4x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is half4x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(half4x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(half4x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b16m4x3 EqualsVector(half4x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b16m4x3 EqualsVectorNot(half4x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<half4x3, half4x3, bool>.operator ==(half4x3 left, half4x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<half4x3, half4x3, bool>.operator !=(half4x3 left, half4x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m4x3 operator ==(half4x3 left, half4x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m4x3 operator !=(half4x3 left, half4x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // half4x3

#region half4x4

public partial struct half4x4 : IEquatable<half4x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<half4x4, half4x4, bool>
    , IEqualityOperators<half4x4, half4x4, b16m4x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(half4x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is half4x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(half4x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(half4x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b16m4x4 EqualsVector(half4x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b16m4x4 EqualsVectorNot(half4x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<half4x4, half4x4, bool>.operator ==(half4x4 left, half4x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<half4x4, half4x4, bool>.operator !=(half4x4 left, half4x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m4x4 operator ==(half4x4 left, half4x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m4x4 operator !=(half4x4 left, half4x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // half4x4

#region b16m2x2

public partial struct b16m2x2 : IEquatable<b16m2x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b16m2x2, b16m2x2, bool>
    , IEqualityOperators<b16m2x2, b16m2x2, b16m2x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b16m2x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b16m2x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b16m2x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b16m2x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b16m2x2 EqualsVector(b16m2x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b16m2x2 EqualsVectorNot(b16m2x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b16m2x2, b16m2x2, bool>.operator ==(b16m2x2 left, b16m2x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b16m2x2, b16m2x2, bool>.operator !=(b16m2x2 left, b16m2x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m2x2 operator ==(b16m2x2 left, b16m2x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m2x2 operator !=(b16m2x2 left, b16m2x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b16m2x2

#region b16m2x3

public partial struct b16m2x3 : IEquatable<b16m2x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b16m2x3, b16m2x3, bool>
    , IEqualityOperators<b16m2x3, b16m2x3, b16m2x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b16m2x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b16m2x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b16m2x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b16m2x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b16m2x3 EqualsVector(b16m2x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b16m2x3 EqualsVectorNot(b16m2x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b16m2x3, b16m2x3, bool>.operator ==(b16m2x3 left, b16m2x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b16m2x3, b16m2x3, bool>.operator !=(b16m2x3 left, b16m2x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m2x3 operator ==(b16m2x3 left, b16m2x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m2x3 operator !=(b16m2x3 left, b16m2x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b16m2x3

#region b16m2x4

public partial struct b16m2x4 : IEquatable<b16m2x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b16m2x4, b16m2x4, bool>
    , IEqualityOperators<b16m2x4, b16m2x4, b16m2x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b16m2x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b16m2x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b16m2x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b16m2x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b16m2x4 EqualsVector(b16m2x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b16m2x4 EqualsVectorNot(b16m2x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b16m2x4, b16m2x4, bool>.operator ==(b16m2x4 left, b16m2x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b16m2x4, b16m2x4, bool>.operator !=(b16m2x4 left, b16m2x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m2x4 operator ==(b16m2x4 left, b16m2x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m2x4 operator !=(b16m2x4 left, b16m2x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b16m2x4

#region b16m3x2

public partial struct b16m3x2 : IEquatable<b16m3x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b16m3x2, b16m3x2, bool>
    , IEqualityOperators<b16m3x2, b16m3x2, b16m3x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b16m3x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b16m3x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b16m3x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b16m3x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b16m3x2 EqualsVector(b16m3x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b16m3x2 EqualsVectorNot(b16m3x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b16m3x2, b16m3x2, bool>.operator ==(b16m3x2 left, b16m3x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b16m3x2, b16m3x2, bool>.operator !=(b16m3x2 left, b16m3x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m3x2 operator ==(b16m3x2 left, b16m3x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m3x2 operator !=(b16m3x2 left, b16m3x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b16m3x2

#region b16m3x3

public partial struct b16m3x3 : IEquatable<b16m3x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b16m3x3, b16m3x3, bool>
    , IEqualityOperators<b16m3x3, b16m3x3, b16m3x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b16m3x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b16m3x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b16m3x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b16m3x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b16m3x3 EqualsVector(b16m3x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b16m3x3 EqualsVectorNot(b16m3x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b16m3x3, b16m3x3, bool>.operator ==(b16m3x3 left, b16m3x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b16m3x3, b16m3x3, bool>.operator !=(b16m3x3 left, b16m3x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m3x3 operator ==(b16m3x3 left, b16m3x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m3x3 operator !=(b16m3x3 left, b16m3x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b16m3x3

#region b16m3x4

public partial struct b16m3x4 : IEquatable<b16m3x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b16m3x4, b16m3x4, bool>
    , IEqualityOperators<b16m3x4, b16m3x4, b16m3x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b16m3x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b16m3x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b16m3x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b16m3x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b16m3x4 EqualsVector(b16m3x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b16m3x4 EqualsVectorNot(b16m3x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b16m3x4, b16m3x4, bool>.operator ==(b16m3x4 left, b16m3x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b16m3x4, b16m3x4, bool>.operator !=(b16m3x4 left, b16m3x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m3x4 operator ==(b16m3x4 left, b16m3x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m3x4 operator !=(b16m3x4 left, b16m3x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b16m3x4

#region b16m4x2

public partial struct b16m4x2 : IEquatable<b16m4x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b16m4x2, b16m4x2, bool>
    , IEqualityOperators<b16m4x2, b16m4x2, b16m4x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b16m4x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b16m4x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b16m4x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b16m4x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b16m4x2 EqualsVector(b16m4x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b16m4x2 EqualsVectorNot(b16m4x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b16m4x2, b16m4x2, bool>.operator ==(b16m4x2 left, b16m4x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b16m4x2, b16m4x2, bool>.operator !=(b16m4x2 left, b16m4x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m4x2 operator ==(b16m4x2 left, b16m4x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m4x2 operator !=(b16m4x2 left, b16m4x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b16m4x2

#region b16m4x3

public partial struct b16m4x3 : IEquatable<b16m4x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b16m4x3, b16m4x3, bool>
    , IEqualityOperators<b16m4x3, b16m4x3, b16m4x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b16m4x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b16m4x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b16m4x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b16m4x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b16m4x3 EqualsVector(b16m4x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b16m4x3 EqualsVectorNot(b16m4x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b16m4x3, b16m4x3, bool>.operator ==(b16m4x3 left, b16m4x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b16m4x3, b16m4x3, bool>.operator !=(b16m4x3 left, b16m4x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m4x3 operator ==(b16m4x3 left, b16m4x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m4x3 operator !=(b16m4x3 left, b16m4x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b16m4x3

#region b16m4x4

public partial struct b16m4x4 : IEquatable<b16m4x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b16m4x4, b16m4x4, bool>
    , IEqualityOperators<b16m4x4, b16m4x4, b16m4x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b16m4x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b16m4x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b16m4x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b16m4x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b16m4x4 EqualsVector(b16m4x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b16m4x4 EqualsVectorNot(b16m4x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b16m4x4, b16m4x4, bool>.operator ==(b16m4x4 left, b16m4x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b16m4x4, b16m4x4, bool>.operator !=(b16m4x4 left, b16m4x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b16m4x4 operator ==(b16m4x4 left, b16m4x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b16m4x4 operator !=(b16m4x4 left, b16m4x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b16m4x4

#region b32m2x2

public partial struct b32m2x2 : IEquatable<b32m2x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b32m2x2, b32m2x2, bool>
    , IEqualityOperators<b32m2x2, b32m2x2, b32m2x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b32m2x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b32m2x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b32m2x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b32m2x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b32m2x2 EqualsVector(b32m2x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b32m2x2 EqualsVectorNot(b32m2x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b32m2x2, b32m2x2, bool>.operator ==(b32m2x2 left, b32m2x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b32m2x2, b32m2x2, bool>.operator !=(b32m2x2 left, b32m2x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m2x2 operator ==(b32m2x2 left, b32m2x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m2x2 operator !=(b32m2x2 left, b32m2x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b32m2x2

#region b32m2x3

public partial struct b32m2x3 : IEquatable<b32m2x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b32m2x3, b32m2x3, bool>
    , IEqualityOperators<b32m2x3, b32m2x3, b32m2x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b32m2x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b32m2x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b32m2x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b32m2x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b32m2x3 EqualsVector(b32m2x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b32m2x3 EqualsVectorNot(b32m2x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b32m2x3, b32m2x3, bool>.operator ==(b32m2x3 left, b32m2x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b32m2x3, b32m2x3, bool>.operator !=(b32m2x3 left, b32m2x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m2x3 operator ==(b32m2x3 left, b32m2x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m2x3 operator !=(b32m2x3 left, b32m2x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b32m2x3

#region b32m2x4

public partial struct b32m2x4 : IEquatable<b32m2x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b32m2x4, b32m2x4, bool>
    , IEqualityOperators<b32m2x4, b32m2x4, b32m2x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b32m2x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b32m2x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b32m2x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b32m2x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b32m2x4 EqualsVector(b32m2x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b32m2x4 EqualsVectorNot(b32m2x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b32m2x4, b32m2x4, bool>.operator ==(b32m2x4 left, b32m2x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b32m2x4, b32m2x4, bool>.operator !=(b32m2x4 left, b32m2x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m2x4 operator ==(b32m2x4 left, b32m2x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m2x4 operator !=(b32m2x4 left, b32m2x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b32m2x4

#region b32m3x2

public partial struct b32m3x2 : IEquatable<b32m3x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b32m3x2, b32m3x2, bool>
    , IEqualityOperators<b32m3x2, b32m3x2, b32m3x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b32m3x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b32m3x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b32m3x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b32m3x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b32m3x2 EqualsVector(b32m3x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b32m3x2 EqualsVectorNot(b32m3x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b32m3x2, b32m3x2, bool>.operator ==(b32m3x2 left, b32m3x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b32m3x2, b32m3x2, bool>.operator !=(b32m3x2 left, b32m3x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m3x2 operator ==(b32m3x2 left, b32m3x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m3x2 operator !=(b32m3x2 left, b32m3x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b32m3x2

#region b32m3x3

public partial struct b32m3x3 : IEquatable<b32m3x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b32m3x3, b32m3x3, bool>
    , IEqualityOperators<b32m3x3, b32m3x3, b32m3x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b32m3x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b32m3x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b32m3x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b32m3x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b32m3x3 EqualsVector(b32m3x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b32m3x3 EqualsVectorNot(b32m3x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b32m3x3, b32m3x3, bool>.operator ==(b32m3x3 left, b32m3x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b32m3x3, b32m3x3, bool>.operator !=(b32m3x3 left, b32m3x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m3x3 operator ==(b32m3x3 left, b32m3x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m3x3 operator !=(b32m3x3 left, b32m3x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b32m3x3

#region b32m3x4

public partial struct b32m3x4 : IEquatable<b32m3x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b32m3x4, b32m3x4, bool>
    , IEqualityOperators<b32m3x4, b32m3x4, b32m3x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b32m3x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b32m3x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b32m3x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b32m3x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b32m3x4 EqualsVector(b32m3x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b32m3x4 EqualsVectorNot(b32m3x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b32m3x4, b32m3x4, bool>.operator ==(b32m3x4 left, b32m3x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b32m3x4, b32m3x4, bool>.operator !=(b32m3x4 left, b32m3x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m3x4 operator ==(b32m3x4 left, b32m3x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m3x4 operator !=(b32m3x4 left, b32m3x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b32m3x4

#region b32m4x2

public partial struct b32m4x2 : IEquatable<b32m4x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b32m4x2, b32m4x2, bool>
    , IEqualityOperators<b32m4x2, b32m4x2, b32m4x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b32m4x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b32m4x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b32m4x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b32m4x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b32m4x2 EqualsVector(b32m4x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b32m4x2 EqualsVectorNot(b32m4x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b32m4x2, b32m4x2, bool>.operator ==(b32m4x2 left, b32m4x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b32m4x2, b32m4x2, bool>.operator !=(b32m4x2 left, b32m4x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m4x2 operator ==(b32m4x2 left, b32m4x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m4x2 operator !=(b32m4x2 left, b32m4x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b32m4x2

#region b32m4x3

public partial struct b32m4x3 : IEquatable<b32m4x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b32m4x3, b32m4x3, bool>
    , IEqualityOperators<b32m4x3, b32m4x3, b32m4x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b32m4x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b32m4x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b32m4x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b32m4x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b32m4x3 EqualsVector(b32m4x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b32m4x3 EqualsVectorNot(b32m4x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b32m4x3, b32m4x3, bool>.operator ==(b32m4x3 left, b32m4x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b32m4x3, b32m4x3, bool>.operator !=(b32m4x3 left, b32m4x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m4x3 operator ==(b32m4x3 left, b32m4x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m4x3 operator !=(b32m4x3 left, b32m4x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b32m4x3

#region b32m4x4

public partial struct b32m4x4 : IEquatable<b32m4x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b32m4x4, b32m4x4, bool>
    , IEqualityOperators<b32m4x4, b32m4x4, b32m4x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b32m4x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b32m4x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b32m4x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b32m4x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b32m4x4 EqualsVector(b32m4x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b32m4x4 EqualsVectorNot(b32m4x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b32m4x4, b32m4x4, bool>.operator ==(b32m4x4 left, b32m4x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b32m4x4, b32m4x4, bool>.operator !=(b32m4x4 left, b32m4x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b32m4x4 operator ==(b32m4x4 left, b32m4x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b32m4x4 operator !=(b32m4x4 left, b32m4x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b32m4x4

#region b64m2x2

public partial struct b64m2x2 : IEquatable<b64m2x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b64m2x2, b64m2x2, bool>
    , IEqualityOperators<b64m2x2, b64m2x2, b64m2x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b64m2x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b64m2x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b64m2x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b64m2x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b64m2x2 EqualsVector(b64m2x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b64m2x2 EqualsVectorNot(b64m2x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b64m2x2, b64m2x2, bool>.operator ==(b64m2x2 left, b64m2x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b64m2x2, b64m2x2, bool>.operator !=(b64m2x2 left, b64m2x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m2x2 operator ==(b64m2x2 left, b64m2x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m2x2 operator !=(b64m2x2 left, b64m2x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b64m2x2

#region b64m2x3

public partial struct b64m2x3 : IEquatable<b64m2x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b64m2x3, b64m2x3, bool>
    , IEqualityOperators<b64m2x3, b64m2x3, b64m2x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b64m2x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b64m2x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b64m2x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b64m2x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b64m2x3 EqualsVector(b64m2x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b64m2x3 EqualsVectorNot(b64m2x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b64m2x3, b64m2x3, bool>.operator ==(b64m2x3 left, b64m2x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b64m2x3, b64m2x3, bool>.operator !=(b64m2x3 left, b64m2x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m2x3 operator ==(b64m2x3 left, b64m2x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m2x3 operator !=(b64m2x3 left, b64m2x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b64m2x3

#region b64m2x4

public partial struct b64m2x4 : IEquatable<b64m2x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b64m2x4, b64m2x4, bool>
    , IEqualityOperators<b64m2x4, b64m2x4, b64m2x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b64m2x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b64m2x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b64m2x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b64m2x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b64m2x4 EqualsVector(b64m2x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b64m2x4 EqualsVectorNot(b64m2x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b64m2x4, b64m2x4, bool>.operator ==(b64m2x4 left, b64m2x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b64m2x4, b64m2x4, bool>.operator !=(b64m2x4 left, b64m2x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m2x4 operator ==(b64m2x4 left, b64m2x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m2x4 operator !=(b64m2x4 left, b64m2x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b64m2x4

#region b64m3x2

public partial struct b64m3x2 : IEquatable<b64m3x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b64m3x2, b64m3x2, bool>
    , IEqualityOperators<b64m3x2, b64m3x2, b64m3x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b64m3x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b64m3x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b64m3x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b64m3x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b64m3x2 EqualsVector(b64m3x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b64m3x2 EqualsVectorNot(b64m3x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b64m3x2, b64m3x2, bool>.operator ==(b64m3x2 left, b64m3x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b64m3x2, b64m3x2, bool>.operator !=(b64m3x2 left, b64m3x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m3x2 operator ==(b64m3x2 left, b64m3x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m3x2 operator !=(b64m3x2 left, b64m3x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b64m3x2

#region b64m3x3

public partial struct b64m3x3 : IEquatable<b64m3x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b64m3x3, b64m3x3, bool>
    , IEqualityOperators<b64m3x3, b64m3x3, b64m3x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b64m3x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b64m3x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b64m3x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b64m3x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b64m3x3 EqualsVector(b64m3x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b64m3x3 EqualsVectorNot(b64m3x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b64m3x3, b64m3x3, bool>.operator ==(b64m3x3 left, b64m3x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b64m3x3, b64m3x3, bool>.operator !=(b64m3x3 left, b64m3x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m3x3 operator ==(b64m3x3 left, b64m3x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m3x3 operator !=(b64m3x3 left, b64m3x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b64m3x3

#region b64m3x4

public partial struct b64m3x4 : IEquatable<b64m3x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b64m3x4, b64m3x4, bool>
    , IEqualityOperators<b64m3x4, b64m3x4, b64m3x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b64m3x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b64m3x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b64m3x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b64m3x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b64m3x4 EqualsVector(b64m3x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b64m3x4 EqualsVectorNot(b64m3x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b64m3x4, b64m3x4, bool>.operator ==(b64m3x4 left, b64m3x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b64m3x4, b64m3x4, bool>.operator !=(b64m3x4 left, b64m3x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m3x4 operator ==(b64m3x4 left, b64m3x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m3x4 operator !=(b64m3x4 left, b64m3x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b64m3x4

#region b64m4x2

public partial struct b64m4x2 : IEquatable<b64m4x2>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b64m4x2, b64m4x2, bool>
    , IEqualityOperators<b64m4x2, b64m4x2, b64m4x2>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b64m4x2 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b64m4x2 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b64m4x2 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b64m4x2 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1);

    [MethodImpl(256 | 512)]
    public b64m4x2 EqualsVector(b64m4x2 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1));

    [MethodImpl(256 | 512)]
    public b64m4x2 EqualsVectorNot(b64m4x2 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b64m4x2, b64m4x2, bool>.operator ==(b64m4x2 left, b64m4x2 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b64m4x2, b64m4x2, bool>.operator !=(b64m4x2 left, b64m4x2 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m4x2 operator ==(b64m4x2 left, b64m4x2 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m4x2 operator !=(b64m4x2 left, b64m4x2 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b64m4x2

#region b64m4x3

public partial struct b64m4x3 : IEquatable<b64m4x3>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b64m4x3, b64m4x3, bool>
    , IEqualityOperators<b64m4x3, b64m4x3, b64m4x3>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b64m4x3 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b64m4x3 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b64m4x3 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b64m4x3 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2);

    [MethodImpl(256 | 512)]
    public b64m4x3 EqualsVector(b64m4x3 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2));

    [MethodImpl(256 | 512)]
    public b64m4x3 EqualsVectorNot(b64m4x3 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b64m4x3, b64m4x3, bool>.operator ==(b64m4x3 left, b64m4x3 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b64m4x3, b64m4x3, bool>.operator !=(b64m4x3 left, b64m4x3 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m4x3 operator ==(b64m4x3 left, b64m4x3 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m4x3 operator !=(b64m4x3 left, b64m4x3 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b64m4x3

#region b64m4x4

public partial struct b64m4x4 : IEquatable<b64m4x4>
    #if NET8_0_OR_GREATER
    , IEqualityOperators<b64m4x4, b64m4x4, bool>
    , IEqualityOperators<b64m4x4, b64m4x4, b64m4x4>
    #endif
{
    #region Equals

    [MethodImpl(256 | 512)]
    public bool Equals(b64m4x4 other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public override bool Equals(object? obj) => obj is b64m4x4 other && Equals(other);
    [MethodImpl(256 | 512)]
    public override int GetHashCode() => HashCode.Combine(c0.GetHashCode(), c1.GetHashCode(), c2.GetHashCode(), c3.GetHashCode());

    [MethodImpl(256 | 512)]
    public bool EqualsAll(b64m4x4 other) => c0.EqualsAll(other.c0) && c1.EqualsAll(other.c1) && c2.EqualsAll(other.c2) && c3.EqualsAll(other.c3);

    [MethodImpl(256 | 512)]
    public bool EqualsAny(b64m4x4 other) => c0.EqualsAny(other.c0) || c1.EqualsAny(other.c1) || c2.EqualsAny(other.c2) || c3.EqualsAny(other.c3);

    [MethodImpl(256 | 512)]
    public b64m4x4 EqualsVector(b64m4x4 other) => new(c0.EqualsVector(other.c0), c1.EqualsVector(other.c1), c2.EqualsVector(other.c2), c3.EqualsVector(other.c3));

    [MethodImpl(256 | 512)]
    public b64m4x4 EqualsVectorNot(b64m4x4 other) => new(c0.EqualsVectorNot(other.c0), c1.EqualsVectorNot(other.c1), c2.EqualsVectorNot(other.c2), c3.EqualsVectorNot(other.c3));

    #if NET8_0_OR_GREATER
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b64m4x4, b64m4x4, bool>.operator ==(b64m4x4 left, b64m4x4 right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<b64m4x4, b64m4x4, bool>.operator !=(b64m4x4 left, b64m4x4 right) => !left.Equals(right);
    #endif

    [MethodImpl(256 | 512)]
    public static b64m4x4 operator ==(b64m4x4 left, b64m4x4 right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static b64m4x4 operator !=(b64m4x4 left, b64m4x4 right) => left.EqualsVectorNot(right);

    #endregion
}

#endregion // b64m4x4
