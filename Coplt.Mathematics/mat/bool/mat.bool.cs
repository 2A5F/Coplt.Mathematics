// generated by template, do not modify manually

namespace Coplt.Mathematics;

#region b16m2x2

public partial struct b16m2x2
{
    public static b16m2x2 True
    {
        [MethodImpl(256 | 512)]
        get => new(b16v.True);
    }
    public static b16m2x2 False
    {
        [MethodImpl(256 | 512)]
        get => new(b16v.False);
    }

    [MethodImpl(256 | 512)]
    public static b16m2x2 operator !(b16m2x2 self) => new(!self.c0, !self.c1);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b16m2x2 v) => all(v.c0) && all(v.c1);

    [MethodImpl(256 | 512)]
    public static bool any([This] b16m2x2 v) => any(v.c0) || any(v.c1);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b16m2x2 v) => allFalse(v.c0) && allFalse(v.c1);
}

#endregion // b16m2x2

#region b16m2x3

public partial struct b16m2x3
{
    public static b16m2x3 True
    {
        [MethodImpl(256 | 512)]
        get => new(b16v.True);
    }
    public static b16m2x3 False
    {
        [MethodImpl(256 | 512)]
        get => new(b16v.False);
    }

    [MethodImpl(256 | 512)]
    public static b16m2x3 operator !(b16m2x3 self) => new(!self.c0, !self.c1, !self.c2);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b16m2x3 v) => all(v.c0) && all(v.c1) && all(v.c2);

    [MethodImpl(256 | 512)]
    public static bool any([This] b16m2x3 v) => any(v.c0) || any(v.c1) || any(v.c2);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b16m2x3 v) => allFalse(v.c0) && allFalse(v.c1) && allFalse(v.c2);
}

#endregion // b16m2x3

#region b16m2x4

public partial struct b16m2x4
{
    public static b16m2x4 True
    {
        [MethodImpl(256 | 512)]
        get => new(b16v.True);
    }
    public static b16m2x4 False
    {
        [MethodImpl(256 | 512)]
        get => new(b16v.False);
    }

    [MethodImpl(256 | 512)]
    public static b16m2x4 operator !(b16m2x4 self) => new(!self.c0, !self.c1, !self.c2, !self.c3);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b16m2x4 v) => all(v.c0) && all(v.c1) && all(v.c2) && all(v.c3);

    [MethodImpl(256 | 512)]
    public static bool any([This] b16m2x4 v) => any(v.c0) || any(v.c1) || any(v.c2) || any(v.c3);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b16m2x4 v) => allFalse(v.c0) && allFalse(v.c1) && allFalse(v.c2) && allFalse(v.c3);
}

#endregion // b16m2x4

#region b16m3x2

public partial struct b16m3x2
{
    public static b16m3x2 True
    {
        [MethodImpl(256 | 512)]
        get => new(b16v.True);
    }
    public static b16m3x2 False
    {
        [MethodImpl(256 | 512)]
        get => new(b16v.False);
    }

    [MethodImpl(256 | 512)]
    public static b16m3x2 operator !(b16m3x2 self) => new(!self.c0, !self.c1);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b16m3x2 v) => all(v.c0) && all(v.c1);

    [MethodImpl(256 | 512)]
    public static bool any([This] b16m3x2 v) => any(v.c0) || any(v.c1);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b16m3x2 v) => allFalse(v.c0) && allFalse(v.c1);
}

#endregion // b16m3x2

#region b16m3x3

public partial struct b16m3x3
{
    public static b16m3x3 True
    {
        [MethodImpl(256 | 512)]
        get => new(b16v.True);
    }
    public static b16m3x3 False
    {
        [MethodImpl(256 | 512)]
        get => new(b16v.False);
    }

    [MethodImpl(256 | 512)]
    public static b16m3x3 operator !(b16m3x3 self) => new(!self.c0, !self.c1, !self.c2);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b16m3x3 v) => all(v.c0) && all(v.c1) && all(v.c2);

    [MethodImpl(256 | 512)]
    public static bool any([This] b16m3x3 v) => any(v.c0) || any(v.c1) || any(v.c2);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b16m3x3 v) => allFalse(v.c0) && allFalse(v.c1) && allFalse(v.c2);
}

#endregion // b16m3x3

#region b16m3x4

public partial struct b16m3x4
{
    public static b16m3x4 True
    {
        [MethodImpl(256 | 512)]
        get => new(b16v.True);
    }
    public static b16m3x4 False
    {
        [MethodImpl(256 | 512)]
        get => new(b16v.False);
    }

    [MethodImpl(256 | 512)]
    public static b16m3x4 operator !(b16m3x4 self) => new(!self.c0, !self.c1, !self.c2, !self.c3);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b16m3x4 v) => all(v.c0) && all(v.c1) && all(v.c2) && all(v.c3);

    [MethodImpl(256 | 512)]
    public static bool any([This] b16m3x4 v) => any(v.c0) || any(v.c1) || any(v.c2) || any(v.c3);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b16m3x4 v) => allFalse(v.c0) && allFalse(v.c1) && allFalse(v.c2) && allFalse(v.c3);
}

#endregion // b16m3x4

#region b16m4x2

public partial struct b16m4x2
{
    public static b16m4x2 True
    {
        [MethodImpl(256 | 512)]
        get => new(b16v.True);
    }
    public static b16m4x2 False
    {
        [MethodImpl(256 | 512)]
        get => new(b16v.False);
    }

    [MethodImpl(256 | 512)]
    public static b16m4x2 operator !(b16m4x2 self) => new(!self.c0, !self.c1);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b16m4x2 v) => all(v.c0) && all(v.c1);

    [MethodImpl(256 | 512)]
    public static bool any([This] b16m4x2 v) => any(v.c0) || any(v.c1);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b16m4x2 v) => allFalse(v.c0) && allFalse(v.c1);
}

#endregion // b16m4x2

#region b16m4x3

public partial struct b16m4x3
{
    public static b16m4x3 True
    {
        [MethodImpl(256 | 512)]
        get => new(b16v.True);
    }
    public static b16m4x3 False
    {
        [MethodImpl(256 | 512)]
        get => new(b16v.False);
    }

    [MethodImpl(256 | 512)]
    public static b16m4x3 operator !(b16m4x3 self) => new(!self.c0, !self.c1, !self.c2);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b16m4x3 v) => all(v.c0) && all(v.c1) && all(v.c2);

    [MethodImpl(256 | 512)]
    public static bool any([This] b16m4x3 v) => any(v.c0) || any(v.c1) || any(v.c2);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b16m4x3 v) => allFalse(v.c0) && allFalse(v.c1) && allFalse(v.c2);
}

#endregion // b16m4x3

#region b16m4x4

public partial struct b16m4x4
{
    public static b16m4x4 True
    {
        [MethodImpl(256 | 512)]
        get => new(b16v.True);
    }
    public static b16m4x4 False
    {
        [MethodImpl(256 | 512)]
        get => new(b16v.False);
    }

    [MethodImpl(256 | 512)]
    public static b16m4x4 operator !(b16m4x4 self) => new(!self.c0, !self.c1, !self.c2, !self.c3);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b16m4x4 v) => all(v.c0) && all(v.c1) && all(v.c2) && all(v.c3);

    [MethodImpl(256 | 512)]
    public static bool any([This] b16m4x4 v) => any(v.c0) || any(v.c1) || any(v.c2) || any(v.c3);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b16m4x4 v) => allFalse(v.c0) && allFalse(v.c1) && allFalse(v.c2) && allFalse(v.c3);
}

#endregion // b16m4x4

#region b32m2x2

public partial struct b32m2x2
{
    public static b32m2x2 True
    {
        [MethodImpl(256 | 512)]
        get => new(b32v.True);
    }
    public static b32m2x2 False
    {
        [MethodImpl(256 | 512)]
        get => new(b32v.False);
    }

    [MethodImpl(256 | 512)]
    public static b32m2x2 operator !(b32m2x2 self) => new(!self.c0, !self.c1);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b32m2x2 v) => all(v.c0) && all(v.c1);

    [MethodImpl(256 | 512)]
    public static bool any([This] b32m2x2 v) => any(v.c0) || any(v.c1);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b32m2x2 v) => allFalse(v.c0) && allFalse(v.c1);
}

#endregion // b32m2x2

#region b32m2x3

public partial struct b32m2x3
{
    public static b32m2x3 True
    {
        [MethodImpl(256 | 512)]
        get => new(b32v.True);
    }
    public static b32m2x3 False
    {
        [MethodImpl(256 | 512)]
        get => new(b32v.False);
    }

    [MethodImpl(256 | 512)]
    public static b32m2x3 operator !(b32m2x3 self) => new(!self.c0, !self.c1, !self.c2);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b32m2x3 v) => all(v.c0) && all(v.c1) && all(v.c2);

    [MethodImpl(256 | 512)]
    public static bool any([This] b32m2x3 v) => any(v.c0) || any(v.c1) || any(v.c2);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b32m2x3 v) => allFalse(v.c0) && allFalse(v.c1) && allFalse(v.c2);
}

#endregion // b32m2x3

#region b32m2x4

public partial struct b32m2x4
{
    public static b32m2x4 True
    {
        [MethodImpl(256 | 512)]
        get => new(b32v.True);
    }
    public static b32m2x4 False
    {
        [MethodImpl(256 | 512)]
        get => new(b32v.False);
    }

    [MethodImpl(256 | 512)]
    public static b32m2x4 operator !(b32m2x4 self) => new(!self.c0, !self.c1, !self.c2, !self.c3);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b32m2x4 v) => all(v.c0) && all(v.c1) && all(v.c2) && all(v.c3);

    [MethodImpl(256 | 512)]
    public static bool any([This] b32m2x4 v) => any(v.c0) || any(v.c1) || any(v.c2) || any(v.c3);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b32m2x4 v) => allFalse(v.c0) && allFalse(v.c1) && allFalse(v.c2) && allFalse(v.c3);
}

#endregion // b32m2x4

#region b32m3x2

public partial struct b32m3x2
{
    public static b32m3x2 True
    {
        [MethodImpl(256 | 512)]
        get => new(b32v.True);
    }
    public static b32m3x2 False
    {
        [MethodImpl(256 | 512)]
        get => new(b32v.False);
    }

    [MethodImpl(256 | 512)]
    public static b32m3x2 operator !(b32m3x2 self) => new(!self.c0, !self.c1);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b32m3x2 v) => all(v.c0) && all(v.c1);

    [MethodImpl(256 | 512)]
    public static bool any([This] b32m3x2 v) => any(v.c0) || any(v.c1);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b32m3x2 v) => allFalse(v.c0) && allFalse(v.c1);
}

#endregion // b32m3x2

#region b32m3x3

public partial struct b32m3x3
{
    public static b32m3x3 True
    {
        [MethodImpl(256 | 512)]
        get => new(b32v.True);
    }
    public static b32m3x3 False
    {
        [MethodImpl(256 | 512)]
        get => new(b32v.False);
    }

    [MethodImpl(256 | 512)]
    public static b32m3x3 operator !(b32m3x3 self) => new(!self.c0, !self.c1, !self.c2);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b32m3x3 v) => all(v.c0) && all(v.c1) && all(v.c2);

    [MethodImpl(256 | 512)]
    public static bool any([This] b32m3x3 v) => any(v.c0) || any(v.c1) || any(v.c2);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b32m3x3 v) => allFalse(v.c0) && allFalse(v.c1) && allFalse(v.c2);
}

#endregion // b32m3x3

#region b32m3x4

public partial struct b32m3x4
{
    public static b32m3x4 True
    {
        [MethodImpl(256 | 512)]
        get => new(b32v.True);
    }
    public static b32m3x4 False
    {
        [MethodImpl(256 | 512)]
        get => new(b32v.False);
    }

    [MethodImpl(256 | 512)]
    public static b32m3x4 operator !(b32m3x4 self) => new(!self.c0, !self.c1, !self.c2, !self.c3);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b32m3x4 v) => all(v.c0) && all(v.c1) && all(v.c2) && all(v.c3);

    [MethodImpl(256 | 512)]
    public static bool any([This] b32m3x4 v) => any(v.c0) || any(v.c1) || any(v.c2) || any(v.c3);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b32m3x4 v) => allFalse(v.c0) && allFalse(v.c1) && allFalse(v.c2) && allFalse(v.c3);
}

#endregion // b32m3x4

#region b32m4x2

public partial struct b32m4x2
{
    public static b32m4x2 True
    {
        [MethodImpl(256 | 512)]
        get => new(b32v.True);
    }
    public static b32m4x2 False
    {
        [MethodImpl(256 | 512)]
        get => new(b32v.False);
    }

    [MethodImpl(256 | 512)]
    public static b32m4x2 operator !(b32m4x2 self) => new(!self.c0, !self.c1);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b32m4x2 v) => all(v.c0) && all(v.c1);

    [MethodImpl(256 | 512)]
    public static bool any([This] b32m4x2 v) => any(v.c0) || any(v.c1);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b32m4x2 v) => allFalse(v.c0) && allFalse(v.c1);
}

#endregion // b32m4x2

#region b32m4x3

public partial struct b32m4x3
{
    public static b32m4x3 True
    {
        [MethodImpl(256 | 512)]
        get => new(b32v.True);
    }
    public static b32m4x3 False
    {
        [MethodImpl(256 | 512)]
        get => new(b32v.False);
    }

    [MethodImpl(256 | 512)]
    public static b32m4x3 operator !(b32m4x3 self) => new(!self.c0, !self.c1, !self.c2);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b32m4x3 v) => all(v.c0) && all(v.c1) && all(v.c2);

    [MethodImpl(256 | 512)]
    public static bool any([This] b32m4x3 v) => any(v.c0) || any(v.c1) || any(v.c2);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b32m4x3 v) => allFalse(v.c0) && allFalse(v.c1) && allFalse(v.c2);
}

#endregion // b32m4x3

#region b32m4x4

public partial struct b32m4x4
{
    public static b32m4x4 True
    {
        [MethodImpl(256 | 512)]
        get => new(b32v.True);
    }
    public static b32m4x4 False
    {
        [MethodImpl(256 | 512)]
        get => new(b32v.False);
    }

    [MethodImpl(256 | 512)]
    public static b32m4x4 operator !(b32m4x4 self) => new(!self.c0, !self.c1, !self.c2, !self.c3);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b32m4x4 v) => all(v.c0) && all(v.c1) && all(v.c2) && all(v.c3);

    [MethodImpl(256 | 512)]
    public static bool any([This] b32m4x4 v) => any(v.c0) || any(v.c1) || any(v.c2) || any(v.c3);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b32m4x4 v) => allFalse(v.c0) && allFalse(v.c1) && allFalse(v.c2) && allFalse(v.c3);
}

#endregion // b32m4x4

#region b64m2x2

public partial struct b64m2x2
{
    public static b64m2x2 True
    {
        [MethodImpl(256 | 512)]
        get => new(b64v.True);
    }
    public static b64m2x2 False
    {
        [MethodImpl(256 | 512)]
        get => new(b64v.False);
    }

    [MethodImpl(256 | 512)]
    public static b64m2x2 operator !(b64m2x2 self) => new(!self.c0, !self.c1);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b64m2x2 v) => all(v.c0) && all(v.c1);

    [MethodImpl(256 | 512)]
    public static bool any([This] b64m2x2 v) => any(v.c0) || any(v.c1);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b64m2x2 v) => allFalse(v.c0) && allFalse(v.c1);
}

#endregion // b64m2x2

#region b64m2x3

public partial struct b64m2x3
{
    public static b64m2x3 True
    {
        [MethodImpl(256 | 512)]
        get => new(b64v.True);
    }
    public static b64m2x3 False
    {
        [MethodImpl(256 | 512)]
        get => new(b64v.False);
    }

    [MethodImpl(256 | 512)]
    public static b64m2x3 operator !(b64m2x3 self) => new(!self.c0, !self.c1, !self.c2);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b64m2x3 v) => all(v.c0) && all(v.c1) && all(v.c2);

    [MethodImpl(256 | 512)]
    public static bool any([This] b64m2x3 v) => any(v.c0) || any(v.c1) || any(v.c2);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b64m2x3 v) => allFalse(v.c0) && allFalse(v.c1) && allFalse(v.c2);
}

#endregion // b64m2x3

#region b64m2x4

public partial struct b64m2x4
{
    public static b64m2x4 True
    {
        [MethodImpl(256 | 512)]
        get => new(b64v.True);
    }
    public static b64m2x4 False
    {
        [MethodImpl(256 | 512)]
        get => new(b64v.False);
    }

    [MethodImpl(256 | 512)]
    public static b64m2x4 operator !(b64m2x4 self) => new(!self.c0, !self.c1, !self.c2, !self.c3);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b64m2x4 v) => all(v.c0) && all(v.c1) && all(v.c2) && all(v.c3);

    [MethodImpl(256 | 512)]
    public static bool any([This] b64m2x4 v) => any(v.c0) || any(v.c1) || any(v.c2) || any(v.c3);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b64m2x4 v) => allFalse(v.c0) && allFalse(v.c1) && allFalse(v.c2) && allFalse(v.c3);
}

#endregion // b64m2x4

#region b64m3x2

public partial struct b64m3x2
{
    public static b64m3x2 True
    {
        [MethodImpl(256 | 512)]
        get => new(b64v.True);
    }
    public static b64m3x2 False
    {
        [MethodImpl(256 | 512)]
        get => new(b64v.False);
    }

    [MethodImpl(256 | 512)]
    public static b64m3x2 operator !(b64m3x2 self) => new(!self.c0, !self.c1);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b64m3x2 v) => all(v.c0) && all(v.c1);

    [MethodImpl(256 | 512)]
    public static bool any([This] b64m3x2 v) => any(v.c0) || any(v.c1);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b64m3x2 v) => allFalse(v.c0) && allFalse(v.c1);
}

#endregion // b64m3x2

#region b64m3x3

public partial struct b64m3x3
{
    public static b64m3x3 True
    {
        [MethodImpl(256 | 512)]
        get => new(b64v.True);
    }
    public static b64m3x3 False
    {
        [MethodImpl(256 | 512)]
        get => new(b64v.False);
    }

    [MethodImpl(256 | 512)]
    public static b64m3x3 operator !(b64m3x3 self) => new(!self.c0, !self.c1, !self.c2);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b64m3x3 v) => all(v.c0) && all(v.c1) && all(v.c2);

    [MethodImpl(256 | 512)]
    public static bool any([This] b64m3x3 v) => any(v.c0) || any(v.c1) || any(v.c2);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b64m3x3 v) => allFalse(v.c0) && allFalse(v.c1) && allFalse(v.c2);
}

#endregion // b64m3x3

#region b64m3x4

public partial struct b64m3x4
{
    public static b64m3x4 True
    {
        [MethodImpl(256 | 512)]
        get => new(b64v.True);
    }
    public static b64m3x4 False
    {
        [MethodImpl(256 | 512)]
        get => new(b64v.False);
    }

    [MethodImpl(256 | 512)]
    public static b64m3x4 operator !(b64m3x4 self) => new(!self.c0, !self.c1, !self.c2, !self.c3);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b64m3x4 v) => all(v.c0) && all(v.c1) && all(v.c2) && all(v.c3);

    [MethodImpl(256 | 512)]
    public static bool any([This] b64m3x4 v) => any(v.c0) || any(v.c1) || any(v.c2) || any(v.c3);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b64m3x4 v) => allFalse(v.c0) && allFalse(v.c1) && allFalse(v.c2) && allFalse(v.c3);
}

#endregion // b64m3x4

#region b64m4x2

public partial struct b64m4x2
{
    public static b64m4x2 True
    {
        [MethodImpl(256 | 512)]
        get => new(b64v.True);
    }
    public static b64m4x2 False
    {
        [MethodImpl(256 | 512)]
        get => new(b64v.False);
    }

    [MethodImpl(256 | 512)]
    public static b64m4x2 operator !(b64m4x2 self) => new(!self.c0, !self.c1);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b64m4x2 v) => all(v.c0) && all(v.c1);

    [MethodImpl(256 | 512)]
    public static bool any([This] b64m4x2 v) => any(v.c0) || any(v.c1);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b64m4x2 v) => allFalse(v.c0) && allFalse(v.c1);
}

#endregion // b64m4x2

#region b64m4x3

public partial struct b64m4x3
{
    public static b64m4x3 True
    {
        [MethodImpl(256 | 512)]
        get => new(b64v.True);
    }
    public static b64m4x3 False
    {
        [MethodImpl(256 | 512)]
        get => new(b64v.False);
    }

    [MethodImpl(256 | 512)]
    public static b64m4x3 operator !(b64m4x3 self) => new(!self.c0, !self.c1, !self.c2);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b64m4x3 v) => all(v.c0) && all(v.c1) && all(v.c2);

    [MethodImpl(256 | 512)]
    public static bool any([This] b64m4x3 v) => any(v.c0) || any(v.c1) || any(v.c2);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b64m4x3 v) => allFalse(v.c0) && allFalse(v.c1) && allFalse(v.c2);
}

#endregion // b64m4x3

#region b64m4x4

public partial struct b64m4x4
{
    public static b64m4x4 True
    {
        [MethodImpl(256 | 512)]
        get => new(b64v.True);
    }
    public static b64m4x4 False
    {
        [MethodImpl(256 | 512)]
        get => new(b64v.False);
    }

    [MethodImpl(256 | 512)]
    public static b64m4x4 operator !(b64m4x4 self) => new(!self.c0, !self.c1, !self.c2, !self.c3);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] b64m4x4 v) => all(v.c0) && all(v.c1) && all(v.c2) && all(v.c3);

    [MethodImpl(256 | 512)]
    public static bool any([This] b64m4x4 v) => any(v.c0) || any(v.c1) || any(v.c2) || any(v.c3);

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] b64m4x4 v) => allFalse(v.c0) && allFalse(v.c1) && allFalse(v.c2) && allFalse(v.c3);
}

#endregion // b64m4x4
