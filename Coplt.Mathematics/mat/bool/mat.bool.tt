<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    for (int s = 2; s <= 8; s *= 2)
    {
        for (var n = 2; n <= 4; n++)
        {
            for (var m = 2; m <= 4; m++)
            {
                var size = s * 8;
                var bTypeName = $"b{size}v";
                var typeName = $"b{size}m{n}x{m}";

                var typ = Typ.Typs.FirstOrDefault(a => a.name == bTypeName);
                if (typ.name == null) continue;
#>

#region <#= typeName #>

public partial struct <#= typeName #>
{
    public static <#= typeName #> True
    {
        [MethodImpl(256 | 512)]
        get => new(<#= bTypeName #>.True);
    }
    public static <#= typeName #> False
    {
        [MethodImpl(256 | 512)]
        get => new(<#= bTypeName #>.False);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator !(<#= typeName #> self) => new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"!self.c{i}")) #>);
}

[Ex]
public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all([This] <#= typeName #> v) => <#= string.Join(" && ", Enumerable.Range(0, m).Select(i => $"all(v.c{i})")) #>;

    [MethodImpl(256 | 512)]
    public static bool any([This] <#= typeName #> v) => <#= string.Join(" || ", Enumerable.Range(0, m).Select(i => $"any(v.c{i})")) #>;

    [MethodImpl(256 | 512)]
    public static bool allFalse([This] <#= typeName #> v) => <#= string.Join(" && ", Enumerable.Range(0, m).Select(i => $"allFalse(v.c{i})")) #>;
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
