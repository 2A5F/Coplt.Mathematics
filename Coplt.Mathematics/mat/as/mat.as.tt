<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        for (var n = 2; n <= 4; n++)
        {
            for (var m = 2; m <= 4; m++)
            {
                var byteSize = typ.size * (n is 3 ? 4 : n);
                var bitSize = 8 * byteSize;

                var vecTypeName = $"{typ.name}{n}";
                var vecTypeNameM = $"{typ.name}{m}";
                var typeName = $"{typ.name.Replace('v', 'm')}{n}x{m}";

                var bType = $"b{typ.size * 8}v";
                var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
                var bTypeName = $"{bType.Replace('v', 'm')}{n}x{m}";
                
                var ss = typ.size switch {
                    2 => new[] { "half", "b16v" },
                    4 => new[] { "float", "int", "uint", "b32v" },
                    8 => new[] { "double", "long", "ulong", "b64v" },
                    _ => new string[] { }
                    };
#>

#region <#= typeName #>

public static partial class math
{
<#
            foreach (var target in ss)
            {
                var tarName = $"{target.Replace('v', 'm')}{n}x{m}";
                var tarType = target.Replace("v", "");
#>
    [MethodImpl(256 | 512)]
    public static <#= tarName #> as<#= tarType #>(this <#= typeName #> v) => v.BitCast<<#= typeName #>, <#= tarName #>>();
<#
            }
#>
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
