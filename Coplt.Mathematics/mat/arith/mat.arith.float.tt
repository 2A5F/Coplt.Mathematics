<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        if (!typ.f) continue;
        if (!typ.arith) continue;

        for (var n = 2; n <= 4; n++)
        {
            for (var m = 2; m <= 4; m++)
            {
                var byteSize = typ.size * (n is 3 ? 4 : n);
                var bitSize = 8 * byteSize;

                var vecTypeName = $"{typ.name}{n}";
                var vecTypeNameM = $"{typ.name}{m}";
                var typeName = $"{typ.name.Replace('v', 'm')}{n}x{m}";

                var bType = $"b{typ.size * 8}v";
                var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
                var bTypeName = $"{bType.Replace('v', 'm')}{n}x{m}";
#>

#region <#= typeName #>

public partial struct <#= typeName #>
{
}

[Ex]
public static partial class math
{
    [MethodImpl(256 | 512)]
    public static <#= typeName #> ceil([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.ceil()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> floor([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.floor()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> round([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.round()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> trunc([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.trunc()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> frac([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.frac()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> modf([This] <#= typeName #> a, out <#= typeName #> i)
    {
        <#= typeName #> r = new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.modf(out var i{i})")) #>);
        i = new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"i{i}")) #>);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> rcp([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.rcp()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> saturate([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.saturate()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> smoothstep(<#= typeName #> min, <#= typeName #> max, [This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.smoothstep(min.c{i}, max.c{i})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> radians([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.radians()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> degrees([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.degrees()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> wrap([This] <#= typeName #> x, <#= typeName #> min, <#= typeName #> max) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"x.c{i}.wrap(min.c{i}, max.c{i})")) #>);
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
