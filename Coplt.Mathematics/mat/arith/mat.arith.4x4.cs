// generated by template, do not modify manually

namespace Coplt.Mathematics;

#region float4x4

public partial struct float4x4
{
    /// <summary>Constructs a float4x4 from a float3x3 rotation matrix and a float3 translation vector</summary>
    /// <param name="rotation">The float3x3 rotation matrix</param>
    /// <param name="translation">The translation vector</param>
    [MethodImpl(256 | 512)]
    public float4x4(float3x3 rotation, float3 translation)
    {
        #if NET8_0_OR_GREATER
        c0 = new(rotation.c0.vector);
        c1 = new(rotation.c1.vector);
        c2 = new(rotation.c2.vector);
        #else // NET8_0_OR_GREATER
        c0 = new(rotation.c0, default);
        c1 = new(rotation.c1, default);
        c2 = new(rotation.c2, default);
        #endif // NET8_0_OR_GREATER
        c3 = new(translation, 1.0f);
    }

    /// <summary>Constructs a float4x4 from a quaternion and a float3 translation vector</summary>
    /// <param name="rotation">The quaternion rotation</param>
    /// <param name="translation">The translation vector</param>
    [MethodImpl(256 | 512)]
    public float4x4(quaternion rotation, float3 translation) 
        : this(new float3x3(rotation), translation) {}

    /// <summary>
    /// Returns a float4x4 matrix representing a rotation around a unit axis by an angle in radians
    /// The rotation direction is clockwise when looking along the rotation axis towards the origin
    /// </summary>
    /// <param name="axis">The axis of rotation</param>
    /// <param name="angle">The angle of rotation in radians</param>
    /// <returns>The float4x4 matrix representing the rotation about an axis</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 AxisAngle(float3 axis, float angle)
    {
        angle.sincos(out var sina, out var cosa);
        var u = new float4(axis, default);
        var u_inv_cosa = u - u * cosa; // u * (1 - cosa);
        var t = new float4(u.xyz * sina, cosa);

        var ppnp = new uint4(default, default, 0x80000000, default).asfloat();
        var nppp = new uint4(0x80000000, default, default, default).asfloat();
        var pnpp = new uint4(default, 0x80000000, default, default).asfloat();
        var mask = new int4(-1, -1, -1, default).asfloat();

        return new(
            u.xxxx.fma(u_inv_cosa, (t.wzyx ^ ppnp) & mask),
            u.yyyy.fma(u_inv_cosa, (t.zwxx ^ nppp) & mask),
            u.zzzz.fma(u_inv_cosa, (t.yxwx ^ pnpp) & mask),
            new(default, default, default, 1.0f)
        );
    }

    /// <summary>
    /// Returns a float4x4 rotation matrix constructed by first performing a rotation around the x-axis, then the y-axis and finally the z-axis.
    /// All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin.
    /// </summary>
    /// <param name="xyz">A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians</param>
    /// <returns>The float4x4 rotation matrix of the Euler angle rotation in x-y-z order</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 EulerXYZ(float3 xyz)
    {
        xyz.sincos(out var s, out var c);
        return new(
            (c.y * c.z),  (c.z * s.x * s.y - c.x * s.z),    (c.x * c.z * s.y + s.x * s.z),    default,
            (c.y * s.z),  (c.x * c.z + s.x * s.y * s.z),    (c.x * s.y * s.z - c.z * s.x),    default,
            (-s.y),       (c.y * s.x),                      (c.x * c.y),                      default,
            default,                        default,                        default,       1.0f
        );
    }

    /// <summary>
    /// Returns a float4x4 rotation matrix constructed by first performing a rotation around the x-axis, then the z-axis and finally the y-axis.
    /// All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin.
    /// </summary>
    /// <param name="xyz">A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians</param>
    /// <returns>The float4x4 rotation matrix of the Euler angle rotation in x-z-y order</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 EulerXZY(float3 xyz)
    {
        xyz.sincos(out var s, out var c);
        return new(
            (c.y * c.z),  (s.x * s.y - c.x * c.y * s.z),    (c.x * s.y + c.y * s.x * s.z),    default,
            (s.z),        (c.x * c.z),                      (-c.z * s.x),                     default,
            (-c.z * s.y), (c.y * s.x + c.x * s.y * s.z),    (c.x * c.y - s.x * s.y * s.z),    default,
            default,                        default,                        default,       1.0f
        );
    }

    /// <summary>
    /// Returns a float4x4 rotation matrix constructed by first performing a rotation around the y-axis, then the x-axis and finally the z-axis.
    /// All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin.
    /// </summary>
    /// <param name="xyz">A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians</param>
    /// <returns>The float4x4 rotation matrix of the Euler angle rotation in y-x-z order</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 EulerYXZ(float3 xyz)
    {
        xyz.sincos(out var s, out var c);
        return new(
            (c.y * c.z - s.x * s.y * s.z),    (-c.x * s.z), (c.z * s.y + c.y * s.x * s.z),    default,
            (c.z * s.x * s.y + c.y * s.z),    (c.x * c.z),  (s.y * s.z - c.y * c.z * s.x),    default,
            (-c.x * s.y),                     (s.x),        (c.x * c.y),                      default,
            default,                        default,                        default,       1.0f
        );
    }

    /// <summary>
    /// Returns a float4x4 rotation matrix constructed by first performing a rotation around the y-axis, then the z-axis and finally the x-axis.
    /// All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin.
    /// </summary>
    /// <param name="xyz">A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians</param>
    /// <returns>The float4x4 rotation matrix of the Euler angle rotation in y-z-x order</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 EulerYZX(float3 xyz)
    {
        xyz.sincos(out var s, out var c);
        return new(
            (c.y * c.z),                      (-s.z),       (c.z * s.y),                      default,
            (s.x * s.y + c.x * c.y * s.z),    (c.x * c.z),  (c.x * s.y * s.z - c.y * s.x),    default,
            (c.y * s.x * s.z - c.x * s.y),    (c.z * s.x),  (c.x * c.y + s.x * s.y * s.z),    default,
            default,                        default,                        default,       1.0f
        );
    }

    /// <summary>
    /// Returns a float4x4 rotation matrix constructed by first performing a rotation around the z-axis, then the x-axis and finally the y-axis.
    /// All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin.
    /// </summary>
    /// <param name="xyz">A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians</param>
    /// <returns>The float4x4 rotation matrix of the Euler angle rotation in z-x-y order</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 EulerZXY(float3 xyz)
    {
        xyz.sincos(out var s, out var c);
        return new(
            (c.y * c.z + s.x * s.y * s.z),    (c.z * s.x * s.y - c.y * s.z),    (c.x * s.y),  default,
            (c.x * s.z),                      (c.x * c.z),                      (-s.x),       default,
            (c.y * s.x * s.z - c.z * s.y),    (c.y * c.z * s.x + s.y * s.z),    (c.x * c.y),  default,
            default,                        default,                        default,       1.0f
        );
    }

    /// <summary>
    /// Returns a float4x4 rotation matrix constructed by first performing a rotation around the z-axis, then the y-axis and finally the x-axis.
    /// All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin.
    /// </summary>
    /// <param name="xyz">A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians</param>
    /// <returns>The float4x4 rotation matrix of the Euler angle rotation in z-y-x order</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 EulerZYX(float3 xyz)
    {
        xyz.sincos(out var s, out var c);
        return new(
            (c.y * c.z),                      (-c.y * s.z),                     (s.y),        default,
            (c.z * s.x * s.y + c.x * s.z),    (c.x * c.z - s.x * s.y * s.z),    (-c.y * s.x), default,
            (s.x * s.z - c.x * c.z * s.y),    (c.z * s.x + c.x * s.y * s.z),    (c.x * c.y),  default,
            default,                        default,                        default,       1.0f
        );
    }

    /// <summary>Returns a float4x4 matrix that rotates around the x-axis by a given number of radians</summary>
    /// <param name="angle">The clockwise rotation angle when looking along the x-axis towards the origin in radians</param>
    /// <returns>The float4x4 rotation matrix that rotates around the x-axis</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 RotateX(float angle)
    {
        angle.sincos(out var s, out var c);
        return new(
            1.0f, default, default, default,
            default, c,     -s,    default,
            default, s,     c,     default,
            default, default, default, 1.0f
        );
    }

    /// <summary>Returns a float4x4 matrix that rotates around the y-axis by a given number of radians</summary>
    /// <param name="angle">The clockwise rotation angle when looking along the y-axis towards the origin in radians</param>
    /// <returns>The float4x4 rotation matrix that rotates around the y-axis</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 RotateY(float angle)
    {
        angle.sincos(out var s, out var c);
        return new(
            c,     default, s,     default,
            default, 1.0f, default, default,
            -s,    default, c,     default,
            default, default, default, 1.0f
        );
    }

    /// <summary>Returns a float4x4 matrix that rotates around the z-axis by a given number of radians</summary>
    /// <param name="angle">The clockwise rotation angle when looking along the z-axis towards the origin in radians</param>
    /// <returns>The float4x4 rotation matrix that rotates around the z-axis</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 RotateZ(float angle)
    {
        angle.sincos(out var s, out var c);
        return new(
            c,     -s,    default, default,
            s,     c,     default, default,
            default, default, 1.0f, default,
            default, default, default, 1.0f
        );
    }

    /// <summary>
    /// Returns a float4x4 view matrix given an eye position, a target point and a unit length up vector.
    /// The up vector is assumed to be unit length, the eye and target points are assumed to be distinct and
    /// the vector between them is assumes to be collinear with the up vector.
    /// </summary>
    /// <param name="eye">The eye position</param>
    /// <param name="target">The view target position</param>
    /// <param name="up">The eye up direction</param>
    /// <returns>The float4x4 view matrix.</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 LookAt(float3 eye, float3 target, float3 up) 
        => LookTo(eye, target - eye, up);

    /// <summary>
    /// Returns a float4x4 view matrix given an eye position, a target direction and a unit length up vector.
    /// The up vector is assumed to be unit length.
    /// </summary>
    /// <param name="eye">The eye position</param>
    /// <param name="dir">The view target direction</param>
    /// <param name="up">The eye up direction</param>
    /// <returns>The float4x4 view matrix.</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 LookTo(float3 eye, float3 dir, float3 up)
    {
        var rot = float3x3.LookRotation(dir.normalize(), up);
        return new(
            new(rot.c0, default),
            new(rot.c1, default),
            new(rot.c2, default),
            new(eye, 1.0f)
        );
    }

    /// <summary>
    /// Returns a float4x4 centered orthographic projection matrix
    /// </summary>
    /// <param name="width">The width of the view volume</param>
    /// <param name="height">The height of the view volume</param>
    /// <param name="near">The distance to the near plane</param>
    /// <param name="far">The distance to the far plane</param>
    /// <returns>The float4x4 centered orthographic projection matrix.</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 Ortho(float width, float height, float near, float far)
    {
        var rcpdx = 1.0f / width;
        var rcpdy = 1.0f / height;
        var rcpdz = 1.0f / (far - near);

        return new(
            (2.0f * rcpdx),       default,            default,            default,
            default,           (2.0f * rcpdy),        default,            default,
            default,           default,            (-2.0f * rcpdz),       (-(far + near) * rcpdz),
            default,           default,            default,            1.0f
       );
    }

    /// <summary>
    /// Returns a float4x4 off-center orthographic projection matrix
    /// </summary>
    /// <param name="left">The minimum x-coordinate of the view volume</param>
    /// <param name="right">The maximum x-coordinate of the view volume</param>
    /// <param name="bottom">The minimum y-coordinate of the view volume</param>
    /// <param name="top">The minimum y-coordinate of the view volume</param>
    /// <param name="near">The distance to the near plane</param>
    /// <param name="far">The distance to the far plane</param>
    /// <returns>The float4x4 off-center orthographic projection matrix.</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 OrthoOffCenter(float left, float right, float bottom, float top, float near, float far)
    {
        var rcpdx = 1.0f / (right - left);
        var rcpdy = 1.0f / (top - bottom);
        var rcpdz = 1.0f / (far - near);

        return new(
            (2.0f * rcpdx),      default,           default,                (-(right + left) * rcpdx),
            default,           (2.0f * rcpdy),      default,                (-(top + bottom) * rcpdy),
            default,           default,           (-2.0f * rcpdz),          (-(far + near) * rcpdz),
            default,           default,           default,                1.0f
        );
    }

    /// <summary>
    /// Returns a float4x4 perspective projection matrix based on field of view
    /// </summary>
    /// <param name="verticalFov">Vertical Field of view in radians</param>
    /// <param name="aspect">X:Y aspect ratio</param>
    /// <param name="near">Distance to near plane. Must be greater than zero</param>
    /// <param name="far">Distance to far plane. Must be greater than zero</param>
    /// <returns>The float4x4 perspective projection matrix</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 PerspectiveFov(float verticalFov, float aspect, float near, float far)
    {
        var cotangent = 1.0f / math.tan(verticalFov * 0.5f);
        var rcpdz = 1.0f / (near - far);

        return new(
            (cotangent / aspect),    default,       default,                   default,
            default,               cotangent,     default,                   default,
            default,               default,       ((far + near) * rcpdz),      (2.0f * near * far * rcpdz),
            default,               default,       -1.0f,                     default
        );
    }

    [MethodImpl(256 | 512)]
    public static float4x4 PerspectiveOffCenter(float left, float right, float bottom, float top, float near, float far)
    {
        var rcpdz = 1.0f / (near - far);
        var rcpWidth = 1.0f / (right - left);
        var rcpHeight = 1.0f / (top - bottom);

        return new(
            (2.0f * near * rcpWidth),        default,                       ((left + right) * rcpWidth),     default,
            default,                       (2.0f * near * rcpHeight),       ((bottom + top) * rcpHeight),    default,
            default,                       default,                       ((far + near) * rcpdz),          (2.0f * near * far * rcpdz),
            default,                       default,                       -1.0f,                         default
        );
    }

    /// <summary>
    /// Returns a float4x4 matrix representing a combined scale-, rotation- and translation transform.
    /// Equivalent to mul(translationTransform, mul(rotationTransform, scaleTransform))
    /// </summary>
    /// <param name="translation">The translation vector</param>
    /// <param name="rotation">The quaternion rotation</param>
    /// <param name="scale">The scaling factors of each axis</param>
    /// <returns>The float4x4 matrix representing the translation, rotation, and scale by the inputs</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 TRS(float3 translation, quaternion rotation, float3 scale)
    {
        var r = new float3x3(rotation);
        r.c0 *= scale.xxx;
        r.c1 *= scale.yyy;
        r.c2 *= scale.zzz;
        return new(r, translation);
    }

    /// <summary>Returns a float4x4 scale matrix given 3 axis scales</summary>
    /// <param name="s">The uniform scaling factor</param>
    /// <returns>The float4x4 matrix that represents a uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 Scale(float s) => new(
        s,    default, default, default,
        default, s,    default, default,
        default, default, s,    default,
        default, default, default, 1.0f
    );

    /// <summary>Returns a float4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="x">The x-axis scaling factor</param>
    /// <param name="y">The y-axis scaling factor</param>
    /// <param name="z">The z-axis scaling factor</param>
    /// <returns>The float4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 Scale(float x, float y, float z) => new(
        x,    default, default, default,
        default, y,    default, default,
        default, default, z,    default,
        default, default, default, 1.0f
    );

    /// <summary>Returns a float4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="scales">The vector containing scale factors for each axis</param>
    /// <returns>The float4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 Scale(float3 scales) => Scale(scales.x, scales.y, scales.z);

    /// <summary>Returns a float4x4 translation matrix given a float3 translation vector</summary>
    /// <param name="vector">The translation vector</param>
    /// <returns>The float4x4 translation matrix</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 Translate(float3 vector) => new(
        new(1.0f, default, default, default),
        new(default, 1.0f, default, default),
        new(default, default, 1.0f, default),
        new(vector, 1.0f)
    );
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float3 rotate(this float4x4 a, float3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz * a.c2)).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z).xyz;

    [MethodImpl(256 | 512)]
    public static float3 transform(this float4x4 a, float3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz.fma(a.c2, a.c3))).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z + a.c3).xyz;

    [MethodImpl(256 | 512)]
    public static float4x4 inverse(this float4x4 m)
    {
        var (c0, c1, c2, c3) = m;

        var r0y_r1y_r0x_r1x = movelh(c1, c0); // (x1, y1, x0, y0)
        var r0z_r1z_r0w_r1w = movelh(c2, c3); // (x2, y2, x3, y3)
        var r2y_r3y_r2x_r3x = movehl(c0, c1); // (z1, w1, z0, w0)
        var r2z_r3z_r2w_r3w = movehl(c3, c2); // (z2, w2, z3, w3)

        var r0_wzyx = shuffle_zx_xz(r0z_r1z_r0w_r1w, r0y_r1y_r0x_r1x); // x3 x2 x1 x0
        var r1_wzyx = shuffle_wy_yw(r0z_r1z_r0w_r1w, r0y_r1y_r0x_r1x); // y3 y2 y1 y0
        var r2_wzyx = shuffle_zx_xz(r2z_r3z_r2w_r3w, r2y_r3y_r2x_r3x); // z3 z2 z1 z0
        var r3_wzyx = shuffle_wy_yw(r2z_r3z_r2w_r3w, r2y_r3y_r2x_r3x); // w3 w2 w1 w0
        var r0_xyzw = r0_wzyx.wzyx; // x0 x1 x2 x3

        var r1y_r2y_r1x_r2x = shuffle_yz_yz(c1, c0); // (y1, z1, y0, z0)
        var r1z_r2z_r1w_r2w = shuffle_yz_yz(c2, c3); // (y2, z2, y3, z3)
        var r3y_r0y_r3x_r0x = shuffle_wx_wx(c1, c0); // (w1, x1, w0, x0)
        var r3z_r0z_r3w_r0w = shuffle_wx_wx(c2, c3); // (w2, x2, w3, x3)

        // Calculate remaining inner term pairs. inner terms have zw=-xy, so we only have to calculate xy and can pack two pairs per vector
        // var inner12_23 = r1y_r2y_r1x_r2x * r2z_r3z_r2w_r3w - r1z_r2z_r1w_r2w * r2y_r3y_r2x_r3x;
        // var inner02_13 = r0y_r1y_r0x_r1x * r2z_r3z_r2w_r3w - r0z_r1z_r0w_r1w * r2y_r3y_r2x_r3x;
        // var inner30_01 = r3z_r0z_r3w_r0w * r0y_r1y_r0x_r1x - r3y_r0y_r3x_r0x * r0z_r1z_r0w_r1w;
        var inner12_23 = fsm(r1y_r2y_r1x_r2x * r2z_r3z_r2w_r3w, r1z_r2z_r1w_r2w, r2y_r3y_r2x_r3x);
        var inner02_13 = fsm(r0y_r1y_r0x_r1x * r2z_r3z_r2w_r3w, r0z_r1z_r0w_r1w, r2y_r3y_r2x_r3x);
        var inner30_01 = fsm(r3z_r0z_r3w_r0w * r0y_r1y_r0x_r1x, r3y_r0y_r3x_r0x, r0z_r1z_r0w_r1w);

        // Expand inner terms back to 4 components. zw signs still need to be flipped
        var inner12 = inner12_23.xzzx;
        var inner23 = inner12_23.ywwy;

        var inner02 = inner02_13.xzzx;
        var inner13 = inner02_13.ywwy;

        // Calculate minors
        // var minors0 = r3_wzyx * inner12 - r2_wzyx * inner13 + r1_wzyx * inner23;
        var minors0 = fam(fsm(r3_wzyx * inner12, r2_wzyx, inner13), r1_wzyx, inner23);

        var denom = r0_xyzw * minors0;

        // Horizontal sum of denominator. Free sign flip of z and w compensates for missing flip in inner terms
        denom += denom.yxwz; // x+y        x+y            z+w            z+w
        denom -= denom.zzxx; // x+y-z-w  x+y-z-w        z+w-x-y        z+w-x-y

        var rcp_denom_ppnn = float4.One / denom;
        var rc0 = minors0 * rcp_denom_ppnn;

        var inner30 = inner30_01.xzzx;
        var inner01 = inner30_01.ywwy;

        // var minors1 = r2_wzyx * inner30 - r0_wzyx * inner23 - r3_wzyx * inner02;
        var minors1 = fsm(fsm(r2_wzyx * inner30, r0_wzyx, inner23), r3_wzyx, inner02);
        var rc1 = minors1 * rcp_denom_ppnn;

        // var minors2 = r0_wzyx * inner13 - r1_wzyx * inner30 - r3_wzyx * inner01;
        var minors2 = fsm(fsm(r0_wzyx * inner13, r1_wzyx, inner30), r3_wzyx, inner01);
        var rc2 = minors2 * rcp_denom_ppnn;

        // var minors3 = r1_wzyx * inner02 - r0_wzyx * inner12 + r2_wzyx * inner01;
        var minors3 = fsm(fsm(r1_wzyx * inner02, r0_wzyx, inner12), r2_wzyx, inner01);
        var rc3 = minors3 * rcp_denom_ppnn;

        return new(rc0, rc1, rc2, rc3);
    }

    /// <summary>Fast matrix inverse for rigid transforms (orthonormal basis and translation)</summary>
    /// <param name="m">Matrix to invert</param>
    /// <returns>The inverted matrix</returns>
    [MethodImpl(256 | 512)]
    public static float4x4 fastinverse(this float4x4 m)
    {
        var (c0, c1, c2, pos) = m;

        var t0 = unpacklo(c0, c2);
        var t1 = unpacklo(c1, default);
        var t2 = unpackhi(c0, c2);
        var t3 = unpackhi(c1, default);

        var r0 = unpacklo(t0, t1);
        var r1 = unpackhi(t0, t1);
        var r2 = unpacklo(t2, t3);

        //pos = -(r0 * pos.x + r1 * pos.y + r2 * pos.z);
        pos = -fam(fam(r0 * pos.x, r1, pos.y), r2, pos.z);
        pos.w = 1.0f;

        return new(r0, r1, r2, pos);
    }

    /// <summary>Returns the determinant of a float4x4 matrix</summary>
    /// <param name="m">Matrix to use when computing determinant</param>
    /// <returns>The determinant of the matrix</returns>
    [MethodImpl(256 | 512)]
    public static float determinant(this float4x4 m)
    {
        var (c0, c1, c2, c3) = m;

        // var m00 = c1.y * (c2.z * c3.w - c2.w * c3.z) - c2.y * (c1.z * c3.w - c1.w * c3.z) + c3.y * (c1.z * c2.w - c1.w * c2.z);
        // var m01 = c0.y * (c2.z * c3.w - c2.w * c3.z) - c2.y * (c0.z * c3.w - c0.w * c3.z) + c3.y * (c0.z * c2.w - c0.w * c2.z);
        // var m02 = c0.y * (c1.z * c3.w - c1.w * c3.z) - c1.y * (c0.z * c3.w - c0.w * c3.z) + c3.y * (c0.z * c1.w - c0.w * c1.z);
        // var m03 = c0.y * (c1.z * c2.w - c1.w * c2.z) - c1.y * (c0.z * c2.w - c0.w * c2.z) + c2.y * (c0.z * c1.w - c0.w * c1.z);
        
        // var r = c0.x * m00 - c1.x * m01 + c2.x * m02 - c3.x * m03;
        
        var x1_y1_x0_y0 = movelh(c1, c0); // (x1, y1, x0, y0)
        var x2_y2_x3_y3 = movelh(c2, c3); // (x2, y2, x3, y3)
        var z1_w1_z0_w0 = movehl(c0, c1); // (z1, w1, z0, w0)
        var z2_w2_z3_w3 = movehl(c3, c2); // (z2, w2, z3, w3)
        
        var x2_y2_x1_y1 = movelh(c2, c1); // (x2, y2, x1, y1)
        var z2_w2_z1_w1 = movehl(c1, c2); // (z2, w2, z1, w1)

        var x0_x1_x2_x3 = shuffle_zx_xz(x1_y1_x0_y0, x2_y2_x3_y3); // x0 x1 x2 x3

        var y1000 = x1_y1_x0_y0.ywww;
        var z1000 = z1_w1_z0_w0.xzzz;
        var w1000 = z1_w1_z0_w0.ywww;
        var y2211 = x2_y2_x1_y1.yyww;
        var z2211 = z2_w2_z1_w1.xxzz;
        var w2211 = z2_w2_z1_w1.yyww;
        var y3332 = x2_y2_x3_y3.wwwy;
        var z3332 = z2_w2_z3_w3.zzzx;
        var w3332 = z2_w2_z3_w3.wwwy;
        
        // var a = y1000 * (z2211 * w3332 - w2211 * z3332) - y2211 * (z1000 * w3332 - w1000 * z3332) + y3332 * (z1000 * w2211 - w1000 * z2211);
        var a = fam(fsm(y1000 * fsm(z2211 * w3332, w2211, z3332), y2211, fsm(z1000 * w3332, w1000, z3332)), y3332, fsm(z1000 * w2211, w1000, z2211));
        var b = x0_x1_x2_x3 * a;
        var r = b.x - b.y + b.z - b.w;
        
        return r;
    }
}

#endregion // float4x4

#region double4x4

public partial struct double4x4
{
    /// <summary>Constructs a double4x4 from a double3x3 rotation matrix and a double3 translation vector</summary>
    /// <param name="rotation">The double3x3 rotation matrix</param>
    /// <param name="translation">The translation vector</param>
    [MethodImpl(256 | 512)]
    public double4x4(double3x3 rotation, double3 translation)
    {
        #if NET8_0_OR_GREATER
        c0 = new(rotation.c0.vector);
        c1 = new(rotation.c1.vector);
        c2 = new(rotation.c2.vector);
        #else // NET8_0_OR_GREATER
        c0 = new(rotation.c0, default);
        c1 = new(rotation.c1, default);
        c2 = new(rotation.c2, default);
        #endif // NET8_0_OR_GREATER
        c3 = new(translation, 1.0);
    }

    /// <summary>Constructs a double4x4 from a quaternion and a double3 translation vector</summary>
    /// <param name="rotation">The quaternion rotation</param>
    /// <param name="translation">The translation vector</param>
    [MethodImpl(256 | 512)]
    public double4x4(quaternion_d rotation, double3 translation) 
        : this(new double3x3(rotation), translation) {}

    /// <summary>
    /// Returns a double4x4 matrix representing a rotation around a unit axis by an angle in radians
    /// The rotation direction is clockwise when looking along the rotation axis towards the origin
    /// </summary>
    /// <param name="axis">The axis of rotation</param>
    /// <param name="angle">The angle of rotation in radians</param>
    /// <returns>The double4x4 matrix representing the rotation about an axis</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 AxisAngle(double3 axis, double angle)
    {
        angle.sincos(out var sina, out var cosa);
        var u = new double4(axis, default);
        var u_inv_cosa = u - u * cosa; // u * (1 - cosa);
        var t = new double4(u.xyz * sina, cosa);

        var ppnp = new ulong4(default, default, 0x8000000000000000, default).asdouble();
        var nppp = new ulong4(0x8000000000000000, default, default, default).asdouble();
        var pnpp = new ulong4(default, 0x8000000000000000, default, default).asdouble();
        var mask = new long4(-1, -1, -1, default).asdouble();

        return new(
            u.xxxx.fma(u_inv_cosa, (t.wzyx ^ ppnp) & mask),
            u.yyyy.fma(u_inv_cosa, (t.zwxx ^ nppp) & mask),
            u.zzzz.fma(u_inv_cosa, (t.yxwx ^ pnpp) & mask),
            new(default, default, default, 1.0)
        );
    }

    /// <summary>
    /// Returns a double4x4 rotation matrix constructed by first performing a rotation around the x-axis, then the y-axis and finally the z-axis.
    /// All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin.
    /// </summary>
    /// <param name="xyz">A double3 vector containing the rotation angles around the x-, y- and z-axis measures in radians</param>
    /// <returns>The double4x4 rotation matrix of the Euler angle rotation in x-y-z order</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 EulerXYZ(double3 xyz)
    {
        xyz.sincos(out var s, out var c);
        return new(
            (c.y * c.z),  (c.z * s.x * s.y - c.x * s.z),    (c.x * c.z * s.y + s.x * s.z),    default,
            (c.y * s.z),  (c.x * c.z + s.x * s.y * s.z),    (c.x * s.y * s.z - c.z * s.x),    default,
            (-s.y),       (c.y * s.x),                      (c.x * c.y),                      default,
            default,                        default,                        default,       1.0
        );
    }

    /// <summary>
    /// Returns a double4x4 rotation matrix constructed by first performing a rotation around the x-axis, then the z-axis and finally the y-axis.
    /// All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin.
    /// </summary>
    /// <param name="xyz">A double3 vector containing the rotation angles around the x-, y- and z-axis measures in radians</param>
    /// <returns>The double4x4 rotation matrix of the Euler angle rotation in x-z-y order</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 EulerXZY(double3 xyz)
    {
        xyz.sincos(out var s, out var c);
        return new(
            (c.y * c.z),  (s.x * s.y - c.x * c.y * s.z),    (c.x * s.y + c.y * s.x * s.z),    default,
            (s.z),        (c.x * c.z),                      (-c.z * s.x),                     default,
            (-c.z * s.y), (c.y * s.x + c.x * s.y * s.z),    (c.x * c.y - s.x * s.y * s.z),    default,
            default,                        default,                        default,       1.0
        );
    }

    /// <summary>
    /// Returns a double4x4 rotation matrix constructed by first performing a rotation around the y-axis, then the x-axis and finally the z-axis.
    /// All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin.
    /// </summary>
    /// <param name="xyz">A double3 vector containing the rotation angles around the x-, y- and z-axis measures in radians</param>
    /// <returns>The double4x4 rotation matrix of the Euler angle rotation in y-x-z order</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 EulerYXZ(double3 xyz)
    {
        xyz.sincos(out var s, out var c);
        return new(
            (c.y * c.z - s.x * s.y * s.z),    (-c.x * s.z), (c.z * s.y + c.y * s.x * s.z),    default,
            (c.z * s.x * s.y + c.y * s.z),    (c.x * c.z),  (s.y * s.z - c.y * c.z * s.x),    default,
            (-c.x * s.y),                     (s.x),        (c.x * c.y),                      default,
            default,                        default,                        default,       1.0
        );
    }

    /// <summary>
    /// Returns a double4x4 rotation matrix constructed by first performing a rotation around the y-axis, then the z-axis and finally the x-axis.
    /// All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin.
    /// </summary>
    /// <param name="xyz">A double3 vector containing the rotation angles around the x-, y- and z-axis measures in radians</param>
    /// <returns>The double4x4 rotation matrix of the Euler angle rotation in y-z-x order</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 EulerYZX(double3 xyz)
    {
        xyz.sincos(out var s, out var c);
        return new(
            (c.y * c.z),                      (-s.z),       (c.z * s.y),                      default,
            (s.x * s.y + c.x * c.y * s.z),    (c.x * c.z),  (c.x * s.y * s.z - c.y * s.x),    default,
            (c.y * s.x * s.z - c.x * s.y),    (c.z * s.x),  (c.x * c.y + s.x * s.y * s.z),    default,
            default,                        default,                        default,       1.0
        );
    }

    /// <summary>
    /// Returns a double4x4 rotation matrix constructed by first performing a rotation around the z-axis, then the x-axis and finally the y-axis.
    /// All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin.
    /// </summary>
    /// <param name="xyz">A double3 vector containing the rotation angles around the x-, y- and z-axis measures in radians</param>
    /// <returns>The double4x4 rotation matrix of the Euler angle rotation in z-x-y order</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 EulerZXY(double3 xyz)
    {
        xyz.sincos(out var s, out var c);
        return new(
            (c.y * c.z + s.x * s.y * s.z),    (c.z * s.x * s.y - c.y * s.z),    (c.x * s.y),  default,
            (c.x * s.z),                      (c.x * c.z),                      (-s.x),       default,
            (c.y * s.x * s.z - c.z * s.y),    (c.y * c.z * s.x + s.y * s.z),    (c.x * c.y),  default,
            default,                        default,                        default,       1.0
        );
    }

    /// <summary>
    /// Returns a double4x4 rotation matrix constructed by first performing a rotation around the z-axis, then the y-axis and finally the x-axis.
    /// All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin.
    /// </summary>
    /// <param name="xyz">A double3 vector containing the rotation angles around the x-, y- and z-axis measures in radians</param>
    /// <returns>The double4x4 rotation matrix of the Euler angle rotation in z-y-x order</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 EulerZYX(double3 xyz)
    {
        xyz.sincos(out var s, out var c);
        return new(
            (c.y * c.z),                      (-c.y * s.z),                     (s.y),        default,
            (c.z * s.x * s.y + c.x * s.z),    (c.x * c.z - s.x * s.y * s.z),    (-c.y * s.x), default,
            (s.x * s.z - c.x * c.z * s.y),    (c.z * s.x + c.x * s.y * s.z),    (c.x * c.y),  default,
            default,                        default,                        default,       1.0
        );
    }

    /// <summary>Returns a double4x4 matrix that rotates around the x-axis by a given number of radians</summary>
    /// <param name="angle">The clockwise rotation angle when looking along the x-axis towards the origin in radians</param>
    /// <returns>The double4x4 rotation matrix that rotates around the x-axis</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 RotateX(double angle)
    {
        angle.sincos(out var s, out var c);
        return new(
            1.0, default, default, default,
            default, c,     -s,    default,
            default, s,     c,     default,
            default, default, default, 1.0
        );
    }

    /// <summary>Returns a double4x4 matrix that rotates around the y-axis by a given number of radians</summary>
    /// <param name="angle">The clockwise rotation angle when looking along the y-axis towards the origin in radians</param>
    /// <returns>The double4x4 rotation matrix that rotates around the y-axis</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 RotateY(double angle)
    {
        angle.sincos(out var s, out var c);
        return new(
            c,     default, s,     default,
            default, 1.0, default, default,
            -s,    default, c,     default,
            default, default, default, 1.0
        );
    }

    /// <summary>Returns a double4x4 matrix that rotates around the z-axis by a given number of radians</summary>
    /// <param name="angle">The clockwise rotation angle when looking along the z-axis towards the origin in radians</param>
    /// <returns>The double4x4 rotation matrix that rotates around the z-axis</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 RotateZ(double angle)
    {
        angle.sincos(out var s, out var c);
        return new(
            c,     -s,    default, default,
            s,     c,     default, default,
            default, default, 1.0, default,
            default, default, default, 1.0
        );
    }

    /// <summary>
    /// Returns a double4x4 view matrix given an eye position, a target point and a unit length up vector.
    /// The up vector is assumed to be unit length, the eye and target points are assumed to be distinct and
    /// the vector between them is assumes to be collinear with the up vector.
    /// </summary>
    /// <param name="eye">The eye position</param>
    /// <param name="target">The view target position</param>
    /// <param name="up">The eye up direction</param>
    /// <returns>The double4x4 view matrix.</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 LookAt(double3 eye, double3 target, double3 up) 
        => LookTo(eye, target - eye, up);

    /// <summary>
    /// Returns a double4x4 view matrix given an eye position, a target direction and a unit length up vector.
    /// The up vector is assumed to be unit length.
    /// </summary>
    /// <param name="eye">The eye position</param>
    /// <param name="dir">The view target direction</param>
    /// <param name="up">The eye up direction</param>
    /// <returns>The double4x4 view matrix.</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 LookTo(double3 eye, double3 dir, double3 up)
    {
        var rot = double3x3.LookRotation(dir.normalize(), up);
        return new(
            new(rot.c0, default),
            new(rot.c1, default),
            new(rot.c2, default),
            new(eye, 1.0)
        );
    }

    /// <summary>
    /// Returns a double4x4 centered orthographic projection matrix
    /// </summary>
    /// <param name="width">The width of the view volume</param>
    /// <param name="height">The height of the view volume</param>
    /// <param name="near">The distance to the near plane</param>
    /// <param name="far">The distance to the far plane</param>
    /// <returns>The double4x4 centered orthographic projection matrix.</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 Ortho(double width, double height, double near, double far)
    {
        var rcpdx = 1.0 / width;
        var rcpdy = 1.0 / height;
        var rcpdz = 1.0 / (far - near);

        return new(
            (2.0 * rcpdx),       default,            default,            default,
            default,           (2.0 * rcpdy),        default,            default,
            default,           default,            (-2.0 * rcpdz),       (-(far + near) * rcpdz),
            default,           default,            default,            1.0
       );
    }

    /// <summary>
    /// Returns a double4x4 off-center orthographic projection matrix
    /// </summary>
    /// <param name="left">The minimum x-coordinate of the view volume</param>
    /// <param name="right">The maximum x-coordinate of the view volume</param>
    /// <param name="bottom">The minimum y-coordinate of the view volume</param>
    /// <param name="top">The minimum y-coordinate of the view volume</param>
    /// <param name="near">The distance to the near plane</param>
    /// <param name="far">The distance to the far plane</param>
    /// <returns>The double4x4 off-center orthographic projection matrix.</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 OrthoOffCenter(double left, double right, double bottom, double top, double near, double far)
    {
        var rcpdx = 1.0 / (right - left);
        var rcpdy = 1.0 / (top - bottom);
        var rcpdz = 1.0 / (far - near);

        return new(
            (2.0 * rcpdx),      default,           default,                (-(right + left) * rcpdx),
            default,           (2.0 * rcpdy),      default,                (-(top + bottom) * rcpdy),
            default,           default,           (-2.0 * rcpdz),          (-(far + near) * rcpdz),
            default,           default,           default,                1.0
        );
    }

    /// <summary>
    /// Returns a double4x4 perspective projection matrix based on field of view
    /// </summary>
    /// <param name="verticalFov">Vertical Field of view in radians</param>
    /// <param name="aspect">X:Y aspect ratio</param>
    /// <param name="near">Distance to near plane. Must be greater than zero</param>
    /// <param name="far">Distance to far plane. Must be greater than zero</param>
    /// <returns>The double4x4 perspective projection matrix</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 PerspectiveFov(double verticalFov, double aspect, double near, double far)
    {
        var cotangent = 1.0 / math.tan(verticalFov * 0.5);
        var rcpdz = 1.0 / (near - far);

        return new(
            (cotangent / aspect),    default,       default,                   default,
            default,               cotangent,     default,                   default,
            default,               default,       ((far + near) * rcpdz),      (2.0 * near * far * rcpdz),
            default,               default,       -1.0,                     default
        );
    }

    [MethodImpl(256 | 512)]
    public static double4x4 PerspectiveOffCenter(double left, double right, double bottom, double top, double near, double far)
    {
        var rcpdz = 1.0 / (near - far);
        var rcpWidth = 1.0 / (right - left);
        var rcpHeight = 1.0 / (top - bottom);

        return new(
            (2.0 * near * rcpWidth),        default,                       ((left + right) * rcpWidth),     default,
            default,                       (2.0 * near * rcpHeight),       ((bottom + top) * rcpHeight),    default,
            default,                       default,                       ((far + near) * rcpdz),          (2.0 * near * far * rcpdz),
            default,                       default,                       -1.0,                         default
        );
    }

    /// <summary>
    /// Returns a double4x4 matrix representing a combined scale-, rotation- and translation transform.
    /// Equivalent to mul(translationTransform, mul(rotationTransform, scaleTransform))
    /// </summary>
    /// <param name="translation">The translation vector</param>
    /// <param name="rotation">The quaternion rotation</param>
    /// <param name="scale">The scaling factors of each axis</param>
    /// <returns>The double4x4 matrix representing the translation, rotation, and scale by the inputs</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 TRS(double3 translation, quaternion_d rotation, double3 scale)
    {
        var r = new double3x3(rotation);
        r.c0 *= scale.xxx;
        r.c1 *= scale.yyy;
        r.c2 *= scale.zzz;
        return new(r, translation);
    }

    /// <summary>Returns a double4x4 scale matrix given 3 axis scales</summary>
    /// <param name="s">The uniform scaling factor</param>
    /// <returns>The double4x4 matrix that represents a uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 Scale(double s) => new(
        s,    default, default, default,
        default, s,    default, default,
        default, default, s,    default,
        default, default, default, 1.0
    );

    /// <summary>Returns a double4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="x">The x-axis scaling factor</param>
    /// <param name="y">The y-axis scaling factor</param>
    /// <param name="z">The z-axis scaling factor</param>
    /// <returns>The double4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 Scale(double x, double y, double z) => new(
        x,    default, default, default,
        default, y,    default, default,
        default, default, z,    default,
        default, default, default, 1.0
    );

    /// <summary>Returns a double4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="scales">The vector containing scale factors for each axis</param>
    /// <returns>The double4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 Scale(double3 scales) => Scale(scales.x, scales.y, scales.z);

    /// <summary>Returns a double4x4 translation matrix given a float3 translation vector</summary>
    /// <param name="vector">The translation vector</param>
    /// <returns>The double4x4 translation matrix</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 Translate(double3 vector) => new(
        new(1.0, default, default, default),
        new(default, 1.0, default, default),
        new(default, default, 1.0, default),
        new(vector, 1.0)
    );
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double3 rotate(this double4x4 a, double3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz * a.c2)).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z).xyz;

    [MethodImpl(256 | 512)]
    public static double3 transform(this double4x4 a, double3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz.fma(a.c2, a.c3))).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z + a.c3).xyz;

    [MethodImpl(256 | 512)]
    public static double4x4 inverse(this double4x4 m)
    {
        var (c0, c1, c2, c3) = m;

        var r0y_r1y_r0x_r1x = movelh(c1, c0); // (x1, y1, x0, y0)
        var r0z_r1z_r0w_r1w = movelh(c2, c3); // (x2, y2, x3, y3)
        var r2y_r3y_r2x_r3x = movehl(c0, c1); // (z1, w1, z0, w0)
        var r2z_r3z_r2w_r3w = movehl(c3, c2); // (z2, w2, z3, w3)

        var r0_wzyx = shuffle_zx_xz(r0z_r1z_r0w_r1w, r0y_r1y_r0x_r1x); // x3 x2 x1 x0
        var r1_wzyx = shuffle_wy_yw(r0z_r1z_r0w_r1w, r0y_r1y_r0x_r1x); // y3 y2 y1 y0
        var r2_wzyx = shuffle_zx_xz(r2z_r3z_r2w_r3w, r2y_r3y_r2x_r3x); // z3 z2 z1 z0
        var r3_wzyx = shuffle_wy_yw(r2z_r3z_r2w_r3w, r2y_r3y_r2x_r3x); // w3 w2 w1 w0
        var r0_xyzw = r0_wzyx.wzyx; // x0 x1 x2 x3

        var r1y_r2y_r1x_r2x = shuffle_yz_yz(c1, c0); // (y1, z1, y0, z0)
        var r1z_r2z_r1w_r2w = shuffle_yz_yz(c2, c3); // (y2, z2, y3, z3)
        var r3y_r0y_r3x_r0x = shuffle_wx_wx(c1, c0); // (w1, x1, w0, x0)
        var r3z_r0z_r3w_r0w = shuffle_wx_wx(c2, c3); // (w2, x2, w3, x3)

        // Calculate remaining inner term pairs. inner terms have zw=-xy, so we only have to calculate xy and can pack two pairs per vector
        // var inner12_23 = r1y_r2y_r1x_r2x * r2z_r3z_r2w_r3w - r1z_r2z_r1w_r2w * r2y_r3y_r2x_r3x;
        // var inner02_13 = r0y_r1y_r0x_r1x * r2z_r3z_r2w_r3w - r0z_r1z_r0w_r1w * r2y_r3y_r2x_r3x;
        // var inner30_01 = r3z_r0z_r3w_r0w * r0y_r1y_r0x_r1x - r3y_r0y_r3x_r0x * r0z_r1z_r0w_r1w;
        var inner12_23 = fsm(r1y_r2y_r1x_r2x * r2z_r3z_r2w_r3w, r1z_r2z_r1w_r2w, r2y_r3y_r2x_r3x);
        var inner02_13 = fsm(r0y_r1y_r0x_r1x * r2z_r3z_r2w_r3w, r0z_r1z_r0w_r1w, r2y_r3y_r2x_r3x);
        var inner30_01 = fsm(r3z_r0z_r3w_r0w * r0y_r1y_r0x_r1x, r3y_r0y_r3x_r0x, r0z_r1z_r0w_r1w);

        // Expand inner terms back to 4 components. zw signs still need to be flipped
        var inner12 = inner12_23.xzzx;
        var inner23 = inner12_23.ywwy;

        var inner02 = inner02_13.xzzx;
        var inner13 = inner02_13.ywwy;

        // Calculate minors
        // var minors0 = r3_wzyx * inner12 - r2_wzyx * inner13 + r1_wzyx * inner23;
        var minors0 = fam(fsm(r3_wzyx * inner12, r2_wzyx, inner13), r1_wzyx, inner23);

        var denom = r0_xyzw * minors0;

        // Horizontal sum of denominator. Free sign flip of z and w compensates for missing flip in inner terms
        denom += denom.yxwz; // x+y        x+y            z+w            z+w
        denom -= denom.zzxx; // x+y-z-w  x+y-z-w        z+w-x-y        z+w-x-y

        var rcp_denom_ppnn = double4.One / denom;
        var rc0 = minors0 * rcp_denom_ppnn;

        var inner30 = inner30_01.xzzx;
        var inner01 = inner30_01.ywwy;

        // var minors1 = r2_wzyx * inner30 - r0_wzyx * inner23 - r3_wzyx * inner02;
        var minors1 = fsm(fsm(r2_wzyx * inner30, r0_wzyx, inner23), r3_wzyx, inner02);
        var rc1 = minors1 * rcp_denom_ppnn;

        // var minors2 = r0_wzyx * inner13 - r1_wzyx * inner30 - r3_wzyx * inner01;
        var minors2 = fsm(fsm(r0_wzyx * inner13, r1_wzyx, inner30), r3_wzyx, inner01);
        var rc2 = minors2 * rcp_denom_ppnn;

        // var minors3 = r1_wzyx * inner02 - r0_wzyx * inner12 + r2_wzyx * inner01;
        var minors3 = fsm(fsm(r1_wzyx * inner02, r0_wzyx, inner12), r2_wzyx, inner01);
        var rc3 = minors3 * rcp_denom_ppnn;

        return new(rc0, rc1, rc2, rc3);
    }

    /// <summary>Fast matrix inverse for rigid transforms (orthonormal basis and translation)</summary>
    /// <param name="m">Matrix to invert</param>
    /// <returns>The inverted matrix</returns>
    [MethodImpl(256 | 512)]
    public static double4x4 fastinverse(this double4x4 m)
    {
        var (c0, c1, c2, pos) = m;

        var t0 = unpacklo(c0, c2);
        var t1 = unpacklo(c1, default);
        var t2 = unpackhi(c0, c2);
        var t3 = unpackhi(c1, default);

        var r0 = unpacklo(t0, t1);
        var r1 = unpackhi(t0, t1);
        var r2 = unpacklo(t2, t3);

        //pos = -(r0 * pos.x + r1 * pos.y + r2 * pos.z);
        pos = -fam(fam(r0 * pos.x, r1, pos.y), r2, pos.z);
        pos.w = 1.0;

        return new(r0, r1, r2, pos);
    }

    /// <summary>Returns the determinant of a double4x4 matrix</summary>
    /// <param name="m">Matrix to use when computing determinant</param>
    /// <returns>The determinant of the matrix</returns>
    [MethodImpl(256 | 512)]
    public static double determinant(this double4x4 m)
    {
        var (c0, c1, c2, c3) = m;

        // var m00 = c1.y * (c2.z * c3.w - c2.w * c3.z) - c2.y * (c1.z * c3.w - c1.w * c3.z) + c3.y * (c1.z * c2.w - c1.w * c2.z);
        // var m01 = c0.y * (c2.z * c3.w - c2.w * c3.z) - c2.y * (c0.z * c3.w - c0.w * c3.z) + c3.y * (c0.z * c2.w - c0.w * c2.z);
        // var m02 = c0.y * (c1.z * c3.w - c1.w * c3.z) - c1.y * (c0.z * c3.w - c0.w * c3.z) + c3.y * (c0.z * c1.w - c0.w * c1.z);
        // var m03 = c0.y * (c1.z * c2.w - c1.w * c2.z) - c1.y * (c0.z * c2.w - c0.w * c2.z) + c2.y * (c0.z * c1.w - c0.w * c1.z);
        
        // var r = c0.x * m00 - c1.x * m01 + c2.x * m02 - c3.x * m03;
        
        var x1_y1_x0_y0 = movelh(c1, c0); // (x1, y1, x0, y0)
        var x2_y2_x3_y3 = movelh(c2, c3); // (x2, y2, x3, y3)
        var z1_w1_z0_w0 = movehl(c0, c1); // (z1, w1, z0, w0)
        var z2_w2_z3_w3 = movehl(c3, c2); // (z2, w2, z3, w3)
        
        var x2_y2_x1_y1 = movelh(c2, c1); // (x2, y2, x1, y1)
        var z2_w2_z1_w1 = movehl(c1, c2); // (z2, w2, z1, w1)

        var x0_x1_x2_x3 = shuffle_zx_xz(x1_y1_x0_y0, x2_y2_x3_y3); // x0 x1 x2 x3

        var y1000 = x1_y1_x0_y0.ywww;
        var z1000 = z1_w1_z0_w0.xzzz;
        var w1000 = z1_w1_z0_w0.ywww;
        var y2211 = x2_y2_x1_y1.yyww;
        var z2211 = z2_w2_z1_w1.xxzz;
        var w2211 = z2_w2_z1_w1.yyww;
        var y3332 = x2_y2_x3_y3.wwwy;
        var z3332 = z2_w2_z3_w3.zzzx;
        var w3332 = z2_w2_z3_w3.wwwy;
        
        // var a = y1000 * (z2211 * w3332 - w2211 * z3332) - y2211 * (z1000 * w3332 - w1000 * z3332) + y3332 * (z1000 * w2211 - w1000 * z2211);
        var a = fam(fsm(y1000 * fsm(z2211 * w3332, w2211, z3332), y2211, fsm(z1000 * w3332, w1000, z3332)), y3332, fsm(z1000 * w2211, w1000, z2211));
        var b = x0_x1_x2_x3 * a;
        var r = b.x - b.y + b.z - b.w;
        
        return r;
    }
}

#endregion // double4x4

#region short4x4

public partial struct short4x4
{
    /// <summary>Constructs a short4x4 from a short3x3 rotation matrix and a short3 translation vector</summary>
    /// <param name="rotation">The short3x3 rotation matrix</param>
    /// <param name="translation">The translation vector</param>
    [MethodImpl(256 | 512)]
    public short4x4(short3x3 rotation, short3 translation)
    {
        c0 = new(rotation.c0, default);
        c1 = new(rotation.c1, default);
        c2 = new(rotation.c2, default);
        c3 = new(translation, (short)1);
    }

    /// <summary>Returns a short4x4 scale matrix given 3 axis scales</summary>
    /// <param name="s">The uniform scaling factor</param>
    /// <returns>The short4x4 matrix that represents a uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static short4x4 Scale(short s) => new(
        s,    default, default, default,
        default, s,    default, default,
        default, default, s,    default,
        default, default, default, (short)1
    );

    /// <summary>Returns a short4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="x">The x-axis scaling factor</param>
    /// <param name="y">The y-axis scaling factor</param>
    /// <param name="z">The z-axis scaling factor</param>
    /// <returns>The short4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static short4x4 Scale(short x, short y, short z) => new(
        x,    default, default, default,
        default, y,    default, default,
        default, default, z,    default,
        default, default, default, (short)1
    );

    /// <summary>Returns a short4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="scales">The vector containing scale factors for each axis</param>
    /// <returns>The short4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static short4x4 Scale(short3 scales) => Scale(scales.x, scales.y, scales.z);

    /// <summary>Returns a short4x4 translation matrix given a float3 translation vector</summary>
    /// <param name="vector">The translation vector</param>
    /// <returns>The short4x4 translation matrix</returns>
    [MethodImpl(256 | 512)]
    public static short4x4 Translate(short3 vector) => new(
        new((short)1, default, default, default),
        new(default, (short)1, default, default),
        new(default, default, (short)1, default),
        new(vector, (short)1)
    );
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static short3 rotate(this short4x4 a, short3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz * a.c2)).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z).xyz;

    [MethodImpl(256 | 512)]
    public static short3 transform(this short4x4 a, short3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz.fma(a.c2, a.c3))).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z + a.c3).xyz;
}

#endregion // short4x4

#region ushort4x4

public partial struct ushort4x4
{
    /// <summary>Constructs a ushort4x4 from a ushort3x3 rotation matrix and a ushort3 translation vector</summary>
    /// <param name="rotation">The ushort3x3 rotation matrix</param>
    /// <param name="translation">The translation vector</param>
    [MethodImpl(256 | 512)]
    public ushort4x4(ushort3x3 rotation, ushort3 translation)
    {
        c0 = new(rotation.c0, default);
        c1 = new(rotation.c1, default);
        c2 = new(rotation.c2, default);
        c3 = new(translation, (ushort)1);
    }

    /// <summary>Returns a ushort4x4 scale matrix given 3 axis scales</summary>
    /// <param name="s">The uniform scaling factor</param>
    /// <returns>The ushort4x4 matrix that represents a uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static ushort4x4 Scale(ushort s) => new(
        s,    default, default, default,
        default, s,    default, default,
        default, default, s,    default,
        default, default, default, (ushort)1
    );

    /// <summary>Returns a ushort4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="x">The x-axis scaling factor</param>
    /// <param name="y">The y-axis scaling factor</param>
    /// <param name="z">The z-axis scaling factor</param>
    /// <returns>The ushort4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static ushort4x4 Scale(ushort x, ushort y, ushort z) => new(
        x,    default, default, default,
        default, y,    default, default,
        default, default, z,    default,
        default, default, default, (ushort)1
    );

    /// <summary>Returns a ushort4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="scales">The vector containing scale factors for each axis</param>
    /// <returns>The ushort4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static ushort4x4 Scale(ushort3 scales) => Scale(scales.x, scales.y, scales.z);

    /// <summary>Returns a ushort4x4 translation matrix given a float3 translation vector</summary>
    /// <param name="vector">The translation vector</param>
    /// <returns>The ushort4x4 translation matrix</returns>
    [MethodImpl(256 | 512)]
    public static ushort4x4 Translate(ushort3 vector) => new(
        new((ushort)1, default, default, default),
        new(default, (ushort)1, default, default),
        new(default, default, (ushort)1, default),
        new(vector, (ushort)1)
    );
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ushort3 rotate(this ushort4x4 a, ushort3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz * a.c2)).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z).xyz;

    [MethodImpl(256 | 512)]
    public static ushort3 transform(this ushort4x4 a, ushort3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz.fma(a.c2, a.c3))).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z + a.c3).xyz;
}

#endregion // ushort4x4

#region int4x4

public partial struct int4x4
{
    /// <summary>Constructs a int4x4 from a int3x3 rotation matrix and a int3 translation vector</summary>
    /// <param name="rotation">The int3x3 rotation matrix</param>
    /// <param name="translation">The translation vector</param>
    [MethodImpl(256 | 512)]
    public int4x4(int3x3 rotation, int3 translation)
    {
        #if NET8_0_OR_GREATER
        c0 = new(rotation.c0.vector);
        c1 = new(rotation.c1.vector);
        c2 = new(rotation.c2.vector);
        #else // NET8_0_OR_GREATER
        c0 = new(rotation.c0, default);
        c1 = new(rotation.c1, default);
        c2 = new(rotation.c2, default);
        #endif // NET8_0_OR_GREATER
        c3 = new(translation, 1);
    }

    /// <summary>Returns a int4x4 scale matrix given 3 axis scales</summary>
    /// <param name="s">The uniform scaling factor</param>
    /// <returns>The int4x4 matrix that represents a uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static int4x4 Scale(int s) => new(
        s,    default, default, default,
        default, s,    default, default,
        default, default, s,    default,
        default, default, default, 1
    );

    /// <summary>Returns a int4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="x">The x-axis scaling factor</param>
    /// <param name="y">The y-axis scaling factor</param>
    /// <param name="z">The z-axis scaling factor</param>
    /// <returns>The int4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static int4x4 Scale(int x, int y, int z) => new(
        x,    default, default, default,
        default, y,    default, default,
        default, default, z,    default,
        default, default, default, 1
    );

    /// <summary>Returns a int4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="scales">The vector containing scale factors for each axis</param>
    /// <returns>The int4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static int4x4 Scale(int3 scales) => Scale(scales.x, scales.y, scales.z);

    /// <summary>Returns a int4x4 translation matrix given a float3 translation vector</summary>
    /// <param name="vector">The translation vector</param>
    /// <returns>The int4x4 translation matrix</returns>
    [MethodImpl(256 | 512)]
    public static int4x4 Translate(int3 vector) => new(
        new(1, default, default, default),
        new(default, 1, default, default),
        new(default, default, 1, default),
        new(vector, 1)
    );
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int3 rotate(this int4x4 a, int3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz * a.c2)).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z).xyz;

    [MethodImpl(256 | 512)]
    public static int3 transform(this int4x4 a, int3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz.fma(a.c2, a.c3))).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z + a.c3).xyz;
}

#endregion // int4x4

#region uint4x4

public partial struct uint4x4
{
    /// <summary>Constructs a uint4x4 from a uint3x3 rotation matrix and a uint3 translation vector</summary>
    /// <param name="rotation">The uint3x3 rotation matrix</param>
    /// <param name="translation">The translation vector</param>
    [MethodImpl(256 | 512)]
    public uint4x4(uint3x3 rotation, uint3 translation)
    {
        #if NET8_0_OR_GREATER
        c0 = new(rotation.c0.vector);
        c1 = new(rotation.c1.vector);
        c2 = new(rotation.c2.vector);
        #else // NET8_0_OR_GREATER
        c0 = new(rotation.c0, default);
        c1 = new(rotation.c1, default);
        c2 = new(rotation.c2, default);
        #endif // NET8_0_OR_GREATER
        c3 = new(translation, 1u);
    }

    /// <summary>Returns a uint4x4 scale matrix given 3 axis scales</summary>
    /// <param name="s">The uniform scaling factor</param>
    /// <returns>The uint4x4 matrix that represents a uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static uint4x4 Scale(uint s) => new(
        s,    default, default, default,
        default, s,    default, default,
        default, default, s,    default,
        default, default, default, 1u
    );

    /// <summary>Returns a uint4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="x">The x-axis scaling factor</param>
    /// <param name="y">The y-axis scaling factor</param>
    /// <param name="z">The z-axis scaling factor</param>
    /// <returns>The uint4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static uint4x4 Scale(uint x, uint y, uint z) => new(
        x,    default, default, default,
        default, y,    default, default,
        default, default, z,    default,
        default, default, default, 1u
    );

    /// <summary>Returns a uint4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="scales">The vector containing scale factors for each axis</param>
    /// <returns>The uint4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static uint4x4 Scale(uint3 scales) => Scale(scales.x, scales.y, scales.z);

    /// <summary>Returns a uint4x4 translation matrix given a float3 translation vector</summary>
    /// <param name="vector">The translation vector</param>
    /// <returns>The uint4x4 translation matrix</returns>
    [MethodImpl(256 | 512)]
    public static uint4x4 Translate(uint3 vector) => new(
        new(1u, default, default, default),
        new(default, 1u, default, default),
        new(default, default, 1u, default),
        new(vector, 1u)
    );
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint3 rotate(this uint4x4 a, uint3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz * a.c2)).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z).xyz;

    [MethodImpl(256 | 512)]
    public static uint3 transform(this uint4x4 a, uint3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz.fma(a.c2, a.c3))).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z + a.c3).xyz;
}

#endregion // uint4x4

#region long4x4

public partial struct long4x4
{
    /// <summary>Constructs a long4x4 from a long3x3 rotation matrix and a long3 translation vector</summary>
    /// <param name="rotation">The long3x3 rotation matrix</param>
    /// <param name="translation">The translation vector</param>
    [MethodImpl(256 | 512)]
    public long4x4(long3x3 rotation, long3 translation)
    {
        #if NET8_0_OR_GREATER
        c0 = new(rotation.c0.vector);
        c1 = new(rotation.c1.vector);
        c2 = new(rotation.c2.vector);
        #else // NET8_0_OR_GREATER
        c0 = new(rotation.c0, default);
        c1 = new(rotation.c1, default);
        c2 = new(rotation.c2, default);
        #endif // NET8_0_OR_GREATER
        c3 = new(translation, 1L);
    }

    /// <summary>Returns a long4x4 scale matrix given 3 axis scales</summary>
    /// <param name="s">The uniform scaling factor</param>
    /// <returns>The long4x4 matrix that represents a uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static long4x4 Scale(long s) => new(
        s,    default, default, default,
        default, s,    default, default,
        default, default, s,    default,
        default, default, default, 1L
    );

    /// <summary>Returns a long4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="x">The x-axis scaling factor</param>
    /// <param name="y">The y-axis scaling factor</param>
    /// <param name="z">The z-axis scaling factor</param>
    /// <returns>The long4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static long4x4 Scale(long x, long y, long z) => new(
        x,    default, default, default,
        default, y,    default, default,
        default, default, z,    default,
        default, default, default, 1L
    );

    /// <summary>Returns a long4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="scales">The vector containing scale factors for each axis</param>
    /// <returns>The long4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static long4x4 Scale(long3 scales) => Scale(scales.x, scales.y, scales.z);

    /// <summary>Returns a long4x4 translation matrix given a float3 translation vector</summary>
    /// <param name="vector">The translation vector</param>
    /// <returns>The long4x4 translation matrix</returns>
    [MethodImpl(256 | 512)]
    public static long4x4 Translate(long3 vector) => new(
        new(1L, default, default, default),
        new(default, 1L, default, default),
        new(default, default, 1L, default),
        new(vector, 1L)
    );
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long3 rotate(this long4x4 a, long3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz * a.c2)).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z).xyz;

    [MethodImpl(256 | 512)]
    public static long3 transform(this long4x4 a, long3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz.fma(a.c2, a.c3))).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z + a.c3).xyz;
}

#endregion // long4x4

#region ulong4x4

public partial struct ulong4x4
{
    /// <summary>Constructs a ulong4x4 from a ulong3x3 rotation matrix and a ulong3 translation vector</summary>
    /// <param name="rotation">The ulong3x3 rotation matrix</param>
    /// <param name="translation">The translation vector</param>
    [MethodImpl(256 | 512)]
    public ulong4x4(ulong3x3 rotation, ulong3 translation)
    {
        #if NET8_0_OR_GREATER
        c0 = new(rotation.c0.vector);
        c1 = new(rotation.c1.vector);
        c2 = new(rotation.c2.vector);
        #else // NET8_0_OR_GREATER
        c0 = new(rotation.c0, default);
        c1 = new(rotation.c1, default);
        c2 = new(rotation.c2, default);
        #endif // NET8_0_OR_GREATER
        c3 = new(translation, 1UL);
    }

    /// <summary>Returns a ulong4x4 scale matrix given 3 axis scales</summary>
    /// <param name="s">The uniform scaling factor</param>
    /// <returns>The ulong4x4 matrix that represents a uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static ulong4x4 Scale(ulong s) => new(
        s,    default, default, default,
        default, s,    default, default,
        default, default, s,    default,
        default, default, default, 1UL
    );

    /// <summary>Returns a ulong4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="x">The x-axis scaling factor</param>
    /// <param name="y">The y-axis scaling factor</param>
    /// <param name="z">The z-axis scaling factor</param>
    /// <returns>The ulong4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static ulong4x4 Scale(ulong x, ulong y, ulong z) => new(
        x,    default, default, default,
        default, y,    default, default,
        default, default, z,    default,
        default, default, default, 1UL
    );

    /// <summary>Returns a ulong4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="scales">The vector containing scale factors for each axis</param>
    /// <returns>The ulong4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static ulong4x4 Scale(ulong3 scales) => Scale(scales.x, scales.y, scales.z);

    /// <summary>Returns a ulong4x4 translation matrix given a float3 translation vector</summary>
    /// <param name="vector">The translation vector</param>
    /// <returns>The ulong4x4 translation matrix</returns>
    [MethodImpl(256 | 512)]
    public static ulong4x4 Translate(ulong3 vector) => new(
        new(1UL, default, default, default),
        new(default, 1UL, default, default),
        new(default, default, 1UL, default),
        new(vector, 1UL)
    );
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong3 rotate(this ulong4x4 a, ulong3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz * a.c2)).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z).xyz;

    [MethodImpl(256 | 512)]
    public static ulong3 transform(this ulong4x4 a, ulong3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz.fma(a.c2, a.c3))).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z + a.c3).xyz;
}

#endregion // ulong4x4

#region decimal4x4

public partial struct decimal4x4
{
    /// <summary>Constructs a decimal4x4 from a decimal3x3 rotation matrix and a decimal3 translation vector</summary>
    /// <param name="rotation">The decimal3x3 rotation matrix</param>
    /// <param name="translation">The translation vector</param>
    [MethodImpl(256 | 512)]
    public decimal4x4(decimal3x3 rotation, decimal3 translation)
    {
        c0 = new(rotation.c0, default);
        c1 = new(rotation.c1, default);
        c2 = new(rotation.c2, default);
        c3 = new(translation, 1m);
    }

    /// <summary>Returns a decimal4x4 scale matrix given 3 axis scales</summary>
    /// <param name="s">The uniform scaling factor</param>
    /// <returns>The decimal4x4 matrix that represents a uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static decimal4x4 Scale(decimal s) => new(
        s,    default, default, default,
        default, s,    default, default,
        default, default, s,    default,
        default, default, default, 1m
    );

    /// <summary>Returns a decimal4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="x">The x-axis scaling factor</param>
    /// <param name="y">The y-axis scaling factor</param>
    /// <param name="z">The z-axis scaling factor</param>
    /// <returns>The decimal4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static decimal4x4 Scale(decimal x, decimal y, decimal z) => new(
        x,    default, default, default,
        default, y,    default, default,
        default, default, z,    default,
        default, default, default, 1m
    );

    /// <summary>Returns a decimal4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="scales">The vector containing scale factors for each axis</param>
    /// <returns>The decimal4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static decimal4x4 Scale(decimal3 scales) => Scale(scales.x, scales.y, scales.z);

    /// <summary>Returns a decimal4x4 translation matrix given a float3 translation vector</summary>
    /// <param name="vector">The translation vector</param>
    /// <returns>The decimal4x4 translation matrix</returns>
    [MethodImpl(256 | 512)]
    public static decimal4x4 Translate(decimal3 vector) => new(
        new(1m, default, default, default),
        new(default, 1m, default, default),
        new(default, default, 1m, default),
        new(vector, 1m)
    );
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal3 rotate(this decimal4x4 a, decimal3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz * a.c2)).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z).xyz;

    [MethodImpl(256 | 512)]
    public static decimal3 transform(this decimal4x4 a, decimal3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz.fma(a.c2, a.c3))).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z + a.c3).xyz;

    [MethodImpl(256 | 512)]
    public static decimal4x4 inverse(this decimal4x4 m)
    {
        var (c0, c1, c2, c3) = m;

        var r0y_r1y_r0x_r1x = movelh(c1, c0); // (x1, y1, x0, y0)
        var r0z_r1z_r0w_r1w = movelh(c2, c3); // (x2, y2, x3, y3)
        var r2y_r3y_r2x_r3x = movehl(c0, c1); // (z1, w1, z0, w0)
        var r2z_r3z_r2w_r3w = movehl(c3, c2); // (z2, w2, z3, w3)

        var r0_wzyx = shuffle_zx_xz(r0z_r1z_r0w_r1w, r0y_r1y_r0x_r1x); // x3 x2 x1 x0
        var r1_wzyx = shuffle_wy_yw(r0z_r1z_r0w_r1w, r0y_r1y_r0x_r1x); // y3 y2 y1 y0
        var r2_wzyx = shuffle_zx_xz(r2z_r3z_r2w_r3w, r2y_r3y_r2x_r3x); // z3 z2 z1 z0
        var r3_wzyx = shuffle_wy_yw(r2z_r3z_r2w_r3w, r2y_r3y_r2x_r3x); // w3 w2 w1 w0
        var r0_xyzw = r0_wzyx.wzyx; // x0 x1 x2 x3

        var r1y_r2y_r1x_r2x = shuffle_yz_yz(c1, c0); // (y1, z1, y0, z0)
        var r1z_r2z_r1w_r2w = shuffle_yz_yz(c2, c3); // (y2, z2, y3, z3)
        var r3y_r0y_r3x_r0x = shuffle_wx_wx(c1, c0); // (w1, x1, w0, x0)
        var r3z_r0z_r3w_r0w = shuffle_wx_wx(c2, c3); // (w2, x2, w3, x3)

        // Calculate remaining inner term pairs. inner terms have zw=-xy, so we only have to calculate xy and can pack two pairs per vector
        // var inner12_23 = r1y_r2y_r1x_r2x * r2z_r3z_r2w_r3w - r1z_r2z_r1w_r2w * r2y_r3y_r2x_r3x;
        // var inner02_13 = r0y_r1y_r0x_r1x * r2z_r3z_r2w_r3w - r0z_r1z_r0w_r1w * r2y_r3y_r2x_r3x;
        // var inner30_01 = r3z_r0z_r3w_r0w * r0y_r1y_r0x_r1x - r3y_r0y_r3x_r0x * r0z_r1z_r0w_r1w;
        var inner12_23 = fsm(r1y_r2y_r1x_r2x * r2z_r3z_r2w_r3w, r1z_r2z_r1w_r2w, r2y_r3y_r2x_r3x);
        var inner02_13 = fsm(r0y_r1y_r0x_r1x * r2z_r3z_r2w_r3w, r0z_r1z_r0w_r1w, r2y_r3y_r2x_r3x);
        var inner30_01 = fsm(r3z_r0z_r3w_r0w * r0y_r1y_r0x_r1x, r3y_r0y_r3x_r0x, r0z_r1z_r0w_r1w);

        // Expand inner terms back to 4 components. zw signs still need to be flipped
        var inner12 = inner12_23.xzzx;
        var inner23 = inner12_23.ywwy;

        var inner02 = inner02_13.xzzx;
        var inner13 = inner02_13.ywwy;

        // Calculate minors
        // var minors0 = r3_wzyx * inner12 - r2_wzyx * inner13 + r1_wzyx * inner23;
        var minors0 = fam(fsm(r3_wzyx * inner12, r2_wzyx, inner13), r1_wzyx, inner23);

        var denom = r0_xyzw * minors0;

        // Horizontal sum of denominator. Free sign flip of z and w compensates for missing flip in inner terms
        denom += denom.yxwz; // x+y        x+y            z+w            z+w
        denom -= denom.zzxx; // x+y-z-w  x+y-z-w        z+w-x-y        z+w-x-y

        var rcp_denom_ppnn = decimal4.One / denom;
        var rc0 = minors0 * rcp_denom_ppnn;

        var inner30 = inner30_01.xzzx;
        var inner01 = inner30_01.ywwy;

        // var minors1 = r2_wzyx * inner30 - r0_wzyx * inner23 - r3_wzyx * inner02;
        var minors1 = fsm(fsm(r2_wzyx * inner30, r0_wzyx, inner23), r3_wzyx, inner02);
        var rc1 = minors1 * rcp_denom_ppnn;

        // var minors2 = r0_wzyx * inner13 - r1_wzyx * inner30 - r3_wzyx * inner01;
        var minors2 = fsm(fsm(r0_wzyx * inner13, r1_wzyx, inner30), r3_wzyx, inner01);
        var rc2 = minors2 * rcp_denom_ppnn;

        // var minors3 = r1_wzyx * inner02 - r0_wzyx * inner12 + r2_wzyx * inner01;
        var minors3 = fsm(fsm(r1_wzyx * inner02, r0_wzyx, inner12), r2_wzyx, inner01);
        var rc3 = minors3 * rcp_denom_ppnn;

        return new(rc0, rc1, rc2, rc3);
    }

    /// <summary>Fast matrix inverse for rigid transforms (orthonormal basis and translation)</summary>
    /// <param name="m">Matrix to invert</param>
    /// <returns>The inverted matrix</returns>
    [MethodImpl(256 | 512)]
    public static decimal4x4 fastinverse(this decimal4x4 m)
    {
        var (c0, c1, c2, pos) = m;

        var t0 = unpacklo(c0, c2);
        var t1 = unpacklo(c1, default);
        var t2 = unpackhi(c0, c2);
        var t3 = unpackhi(c1, default);

        var r0 = unpacklo(t0, t1);
        var r1 = unpackhi(t0, t1);
        var r2 = unpacklo(t2, t3);

        //pos = -(r0 * pos.x + r1 * pos.y + r2 * pos.z);
        pos = -fam(fam(r0 * pos.x, r1, pos.y), r2, pos.z);
        pos.w = 1m;

        return new(r0, r1, r2, pos);
    }

    /// <summary>Returns the determinant of a decimal4x4 matrix</summary>
    /// <param name="m">Matrix to use when computing determinant</param>
    /// <returns>The determinant of the matrix</returns>
    [MethodImpl(256 | 512)]
    public static decimal determinant(this decimal4x4 m)
    {
        var (c0, c1, c2, c3) = m;

        // var m00 = c1.y * (c2.z * c3.w - c2.w * c3.z) - c2.y * (c1.z * c3.w - c1.w * c3.z) + c3.y * (c1.z * c2.w - c1.w * c2.z);
        // var m01 = c0.y * (c2.z * c3.w - c2.w * c3.z) - c2.y * (c0.z * c3.w - c0.w * c3.z) + c3.y * (c0.z * c2.w - c0.w * c2.z);
        // var m02 = c0.y * (c1.z * c3.w - c1.w * c3.z) - c1.y * (c0.z * c3.w - c0.w * c3.z) + c3.y * (c0.z * c1.w - c0.w * c1.z);
        // var m03 = c0.y * (c1.z * c2.w - c1.w * c2.z) - c1.y * (c0.z * c2.w - c0.w * c2.z) + c2.y * (c0.z * c1.w - c0.w * c1.z);
        
        // var r = c0.x * m00 - c1.x * m01 + c2.x * m02 - c3.x * m03;
        
        var x1_y1_x0_y0 = movelh(c1, c0); // (x1, y1, x0, y0)
        var x2_y2_x3_y3 = movelh(c2, c3); // (x2, y2, x3, y3)
        var z1_w1_z0_w0 = movehl(c0, c1); // (z1, w1, z0, w0)
        var z2_w2_z3_w3 = movehl(c3, c2); // (z2, w2, z3, w3)
        
        var x2_y2_x1_y1 = movelh(c2, c1); // (x2, y2, x1, y1)
        var z2_w2_z1_w1 = movehl(c1, c2); // (z2, w2, z1, w1)

        var x0_x1_x2_x3 = shuffle_zx_xz(x1_y1_x0_y0, x2_y2_x3_y3); // x0 x1 x2 x3

        var y1000 = x1_y1_x0_y0.ywww;
        var z1000 = z1_w1_z0_w0.xzzz;
        var w1000 = z1_w1_z0_w0.ywww;
        var y2211 = x2_y2_x1_y1.yyww;
        var z2211 = z2_w2_z1_w1.xxzz;
        var w2211 = z2_w2_z1_w1.yyww;
        var y3332 = x2_y2_x3_y3.wwwy;
        var z3332 = z2_w2_z3_w3.zzzx;
        var w3332 = z2_w2_z3_w3.wwwy;
        
        // var a = y1000 * (z2211 * w3332 - w2211 * z3332) - y2211 * (z1000 * w3332 - w1000 * z3332) + y3332 * (z1000 * w2211 - w1000 * z2211);
        var a = fam(fsm(y1000 * fsm(z2211 * w3332, w2211, z3332), y2211, fsm(z1000 * w3332, w1000, z3332)), y3332, fsm(z1000 * w2211, w1000, z2211));
        var b = x0_x1_x2_x3 * a;
        var r = b.x - b.y + b.z - b.w;
        
        return r;
    }
}

#endregion // decimal4x4

#region half4x4

public partial struct half4x4
{
    /// <summary>Constructs a half4x4 from a half3x3 rotation matrix and a half3 translation vector</summary>
    /// <param name="rotation">The half3x3 rotation matrix</param>
    /// <param name="translation">The translation vector</param>
    [MethodImpl(256 | 512)]
    public half4x4(half3x3 rotation, half3 translation)
    {
        c0 = new(rotation.c0, default);
        c1 = new(rotation.c1, default);
        c2 = new(rotation.c2, default);
        c3 = new(translation, (half)1.0);
    }

    /// <summary>Constructs a half4x4 from a quaternion and a half3 translation vector</summary>
    /// <param name="rotation">The quaternion rotation</param>
    /// <param name="translation">The translation vector</param>
    [MethodImpl(256 | 512)]
    public half4x4(quaternion_h rotation, half3 translation) 
        : this(new half3x3(rotation), translation) {}

    /// <summary>
    /// Returns a half4x4 matrix representing a rotation around a unit axis by an angle in radians
    /// The rotation direction is clockwise when looking along the rotation axis towards the origin
    /// </summary>
    /// <param name="axis">The axis of rotation</param>
    /// <param name="angle">The angle of rotation in radians</param>
    /// <returns>The half4x4 matrix representing the rotation about an axis</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 AxisAngle(half3 axis, half angle)
    {
        angle.sincos(out var sina, out var cosa);
        var u = new half4(axis, default);
        var u_inv_cosa = u - u * cosa; // u * (1 - cosa);
        var t = new half4(u.xyz * sina, cosa);

        var ppnp = new ushort4(default, default, 0x8000, default).ashalf();
        var nppp = new ushort4(0x8000, default, default, default).ashalf();
        var pnpp = new ushort4(default, 0x8000, default, default).ashalf();
        var mask = new short4(-1, -1, -1, default).ashalf();

        return new(
            u.xxxx.fma(u_inv_cosa, (t.wzyx ^ ppnp) & mask),
            u.yyyy.fma(u_inv_cosa, (t.zwxx ^ nppp) & mask),
            u.zzzz.fma(u_inv_cosa, (t.yxwx ^ pnpp) & mask),
            new(default, default, default, (half)1.0)
        );
    }

    /// <summary>
    /// Returns a half4x4 rotation matrix constructed by first performing a rotation around the x-axis, then the y-axis and finally the z-axis.
    /// All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin.
    /// </summary>
    /// <param name="xyz">A half3 vector containing the rotation angles around the x-, y- and z-axis measures in radians</param>
    /// <returns>The half4x4 rotation matrix of the Euler angle rotation in x-y-z order</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 EulerXYZ(half3 xyz)
    {
        xyz.sincos(out var s, out var c);
        return new(
            (half)(c.y * c.z),  (half)(c.z * s.x * s.y - c.x * s.z),    (half)(c.x * c.z * s.y + s.x * s.z),    default,
            (half)(c.y * s.z),  (half)(c.x * c.z + s.x * s.y * s.z),    (half)(c.x * s.y * s.z - c.z * s.x),    default,
            (half)(-s.y),       (half)(c.y * s.x),                      (half)(c.x * c.y),                      default,
            default,                        default,                        default,       (half)1.0
        );
    }

    /// <summary>
    /// Returns a half4x4 rotation matrix constructed by first performing a rotation around the x-axis, then the z-axis and finally the y-axis.
    /// All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin.
    /// </summary>
    /// <param name="xyz">A half3 vector containing the rotation angles around the x-, y- and z-axis measures in radians</param>
    /// <returns>The half4x4 rotation matrix of the Euler angle rotation in x-z-y order</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 EulerXZY(half3 xyz)
    {
        xyz.sincos(out var s, out var c);
        return new(
            (half)(c.y * c.z),  (half)(s.x * s.y - c.x * c.y * s.z),    (half)(c.x * s.y + c.y * s.x * s.z),    default,
            (half)(s.z),        (half)(c.x * c.z),                      (half)(-c.z * s.x),                     default,
            (half)(-c.z * s.y), (half)(c.y * s.x + c.x * s.y * s.z),    (half)(c.x * c.y - s.x * s.y * s.z),    default,
            default,                        default,                        default,       (half)1.0
        );
    }

    /// <summary>
    /// Returns a half4x4 rotation matrix constructed by first performing a rotation around the y-axis, then the x-axis and finally the z-axis.
    /// All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin.
    /// </summary>
    /// <param name="xyz">A half3 vector containing the rotation angles around the x-, y- and z-axis measures in radians</param>
    /// <returns>The half4x4 rotation matrix of the Euler angle rotation in y-x-z order</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 EulerYXZ(half3 xyz)
    {
        xyz.sincos(out var s, out var c);
        return new(
            (half)(c.y * c.z - s.x * s.y * s.z),    (half)(-c.x * s.z), (half)(c.z * s.y + c.y * s.x * s.z),    default,
            (half)(c.z * s.x * s.y + c.y * s.z),    (half)(c.x * c.z),  (half)(s.y * s.z - c.y * c.z * s.x),    default,
            (half)(-c.x * s.y),                     (half)(s.x),        (half)(c.x * c.y),                      default,
            default,                        default,                        default,       (half)1.0
        );
    }

    /// <summary>
    /// Returns a half4x4 rotation matrix constructed by first performing a rotation around the y-axis, then the z-axis and finally the x-axis.
    /// All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin.
    /// </summary>
    /// <param name="xyz">A half3 vector containing the rotation angles around the x-, y- and z-axis measures in radians</param>
    /// <returns>The half4x4 rotation matrix of the Euler angle rotation in y-z-x order</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 EulerYZX(half3 xyz)
    {
        xyz.sincos(out var s, out var c);
        return new(
            (half)(c.y * c.z),                      (half)(-s.z),       (half)(c.z * s.y),                      default,
            (half)(s.x * s.y + c.x * c.y * s.z),    (half)(c.x * c.z),  (half)(c.x * s.y * s.z - c.y * s.x),    default,
            (half)(c.y * s.x * s.z - c.x * s.y),    (half)(c.z * s.x),  (half)(c.x * c.y + s.x * s.y * s.z),    default,
            default,                        default,                        default,       (half)1.0
        );
    }

    /// <summary>
    /// Returns a half4x4 rotation matrix constructed by first performing a rotation around the z-axis, then the x-axis and finally the y-axis.
    /// All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin.
    /// </summary>
    /// <param name="xyz">A half3 vector containing the rotation angles around the x-, y- and z-axis measures in radians</param>
    /// <returns>The half4x4 rotation matrix of the Euler angle rotation in z-x-y order</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 EulerZXY(half3 xyz)
    {
        xyz.sincos(out var s, out var c);
        return new(
            (half)(c.y * c.z + s.x * s.y * s.z),    (half)(c.z * s.x * s.y - c.y * s.z),    (half)(c.x * s.y),  default,
            (half)(c.x * s.z),                      (half)(c.x * c.z),                      (half)(-s.x),       default,
            (half)(c.y * s.x * s.z - c.z * s.y),    (half)(c.y * c.z * s.x + s.y * s.z),    (half)(c.x * c.y),  default,
            default,                        default,                        default,       (half)1.0
        );
    }

    /// <summary>
    /// Returns a half4x4 rotation matrix constructed by first performing a rotation around the z-axis, then the y-axis and finally the x-axis.
    /// All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin.
    /// </summary>
    /// <param name="xyz">A half3 vector containing the rotation angles around the x-, y- and z-axis measures in radians</param>
    /// <returns>The half4x4 rotation matrix of the Euler angle rotation in z-y-x order</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 EulerZYX(half3 xyz)
    {
        xyz.sincos(out var s, out var c);
        return new(
            (half)(c.y * c.z),                      (half)(-c.y * s.z),                     (half)(s.y),        default,
            (half)(c.z * s.x * s.y + c.x * s.z),    (half)(c.x * c.z - s.x * s.y * s.z),    (half)(-c.y * s.x), default,
            (half)(s.x * s.z - c.x * c.z * s.y),    (half)(c.z * s.x + c.x * s.y * s.z),    (half)(c.x * c.y),  default,
            default,                        default,                        default,       (half)1.0
        );
    }

    /// <summary>Returns a half4x4 matrix that rotates around the x-axis by a given number of radians</summary>
    /// <param name="angle">The clockwise rotation angle when looking along the x-axis towards the origin in radians</param>
    /// <returns>The half4x4 rotation matrix that rotates around the x-axis</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 RotateX(half angle)
    {
        angle.sincos(out var s, out var c);
        return new(
            (half)1.0, default, default, default,
            default, c,     -s,    default,
            default, s,     c,     default,
            default, default, default, (half)1.0
        );
    }

    /// <summary>Returns a half4x4 matrix that rotates around the y-axis by a given number of radians</summary>
    /// <param name="angle">The clockwise rotation angle when looking along the y-axis towards the origin in radians</param>
    /// <returns>The half4x4 rotation matrix that rotates around the y-axis</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 RotateY(half angle)
    {
        angle.sincos(out var s, out var c);
        return new(
            c,     default, s,     default,
            default, (half)1.0, default, default,
            -s,    default, c,     default,
            default, default, default, (half)1.0
        );
    }

    /// <summary>Returns a half4x4 matrix that rotates around the z-axis by a given number of radians</summary>
    /// <param name="angle">The clockwise rotation angle when looking along the z-axis towards the origin in radians</param>
    /// <returns>The half4x4 rotation matrix that rotates around the z-axis</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 RotateZ(half angle)
    {
        angle.sincos(out var s, out var c);
        return new(
            c,     -s,    default, default,
            s,     c,     default, default,
            default, default, (half)1.0, default,
            default, default, default, (half)1.0
        );
    }

    /// <summary>
    /// Returns a half4x4 view matrix given an eye position, a target point and a unit length up vector.
    /// The up vector is assumed to be unit length, the eye and target points are assumed to be distinct and
    /// the vector between them is assumes to be collinear with the up vector.
    /// </summary>
    /// <param name="eye">The eye position</param>
    /// <param name="target">The view target position</param>
    /// <param name="up">The eye up direction</param>
    /// <returns>The half4x4 view matrix.</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 LookAt(half3 eye, half3 target, half3 up) 
        => LookTo(eye, target - eye, up);

    /// <summary>
    /// Returns a half4x4 view matrix given an eye position, a target direction and a unit length up vector.
    /// The up vector is assumed to be unit length.
    /// </summary>
    /// <param name="eye">The eye position</param>
    /// <param name="dir">The view target direction</param>
    /// <param name="up">The eye up direction</param>
    /// <returns>The half4x4 view matrix.</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 LookTo(half3 eye, half3 dir, half3 up)
    {
        var rot = half3x3.LookRotation(dir.normalize(), up);
        return new(
            new(rot.c0, default),
            new(rot.c1, default),
            new(rot.c2, default),
            new(eye, (half)1.0)
        );
    }

    /// <summary>
    /// Returns a half4x4 centered orthographic projection matrix
    /// </summary>
    /// <param name="width">The width of the view volume</param>
    /// <param name="height">The height of the view volume</param>
    /// <param name="near">The distance to the near plane</param>
    /// <param name="far">The distance to the far plane</param>
    /// <returns>The half4x4 centered orthographic projection matrix.</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 Ortho(half width, half height, half near, half far)
    {
        var rcpdx = (half)1.0 / width;
        var rcpdy = (half)1.0 / height;
        var rcpdz = (half)1.0 / (far - near);

        return new(
            (half)((half)2.0f * rcpdx),       default,            default,            default,
            default,           (half)((half)2.0f * rcpdy),        default,            default,
            default,           default,            (half)(-(half)2.0f * rcpdz),       (half)(-(far + near) * rcpdz),
            default,           default,            default,            (half)1.0
       );
    }

    /// <summary>
    /// Returns a half4x4 off-center orthographic projection matrix
    /// </summary>
    /// <param name="left">The minimum x-coordinate of the view volume</param>
    /// <param name="right">The maximum x-coordinate of the view volume</param>
    /// <param name="bottom">The minimum y-coordinate of the view volume</param>
    /// <param name="top">The minimum y-coordinate of the view volume</param>
    /// <param name="near">The distance to the near plane</param>
    /// <param name="far">The distance to the far plane</param>
    /// <returns>The half4x4 off-center orthographic projection matrix.</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 OrthoOffCenter(half left, half right, half bottom, half top, half near, half far)
    {
        var rcpdx = (half)1.0 / (right - left);
        var rcpdy = (half)1.0 / (top - bottom);
        var rcpdz = (half)1.0 / (far - near);

        return new(
            (half)((half)2.0f * rcpdx),      default,           default,                (half)(-(right + left) * rcpdx),
            default,           (half)((half)2.0f * rcpdy),      default,                (half)(-(top + bottom) * rcpdy),
            default,           default,           (half)(-(half)2.0f * rcpdz),          (half)(-(far + near) * rcpdz),
            default,           default,           default,                (half)1.0
        );
    }

    /// <summary>
    /// Returns a half4x4 perspective projection matrix based on field of view
    /// </summary>
    /// <param name="verticalFov">Vertical Field of view in radians</param>
    /// <param name="aspect">X:Y aspect ratio</param>
    /// <param name="near">Distance to near plane. Must be greater than zero</param>
    /// <param name="far">Distance to far plane. Must be greater than zero</param>
    /// <returns>The half4x4 perspective projection matrix</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 PerspectiveFov(half verticalFov, half aspect, half near, half far)
    {
        var cotangent = (half)1.0 / math.tan(verticalFov * (half)0.5f);
        var rcpdz = (half)1.0 / (near - far);

        return new(
            (half)(cotangent / aspect),    default,       default,                   default,
            default,               (half)cotangent,     default,                   default,
            default,               default,       (half)((far + near) * rcpdz),      (half)((half)2.0f * near * far * rcpdz),
            default,               default,       -(half)1.0,                     default
        );
    }

    [MethodImpl(256 | 512)]
    public static half4x4 PerspectiveOffCenter(half left, half right, half bottom, half top, half near, half far)
    {
        var rcpdz = (half)1.0 / (near - far);
        var rcpWidth = (half)1.0 / (right - left);
        var rcpHeight = (half)1.0 / (top - bottom);

        return new(
            (half)((half)2.0f * near * rcpWidth),        default,                       (half)((left + right) * rcpWidth),     default,
            default,                       (half)((half)2.0f * near * rcpHeight),       (half)((bottom + top) * rcpHeight),    default,
            default,                       default,                       (half)((far + near) * rcpdz),          (half)((half)2.0f * near * far * rcpdz),
            default,                       default,                       -(half)1.0,                         default
        );
    }

    /// <summary>
    /// Returns a half4x4 matrix representing a combined scale-, rotation- and translation transform.
    /// Equivalent to mul(translationTransform, mul(rotationTransform, scaleTransform))
    /// </summary>
    /// <param name="translation">The translation vector</param>
    /// <param name="rotation">The quaternion rotation</param>
    /// <param name="scale">The scaling factors of each axis</param>
    /// <returns>The half4x4 matrix representing the translation, rotation, and scale by the inputs</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 TRS(half3 translation, quaternion_h rotation, half3 scale)
    {
        var r = new half3x3(rotation);
        r.c0 *= scale.xxx;
        r.c1 *= scale.yyy;
        r.c2 *= scale.zzz;
        return new(r, translation);
    }

    /// <summary>Returns a half4x4 scale matrix given 3 axis scales</summary>
    /// <param name="s">The uniform scaling factor</param>
    /// <returns>The half4x4 matrix that represents a uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 Scale(half s) => new(
        s,    default, default, default,
        default, s,    default, default,
        default, default, s,    default,
        default, default, default, (half)1.0
    );

    /// <summary>Returns a half4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="x">The x-axis scaling factor</param>
    /// <param name="y">The y-axis scaling factor</param>
    /// <param name="z">The z-axis scaling factor</param>
    /// <returns>The half4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 Scale(half x, half y, half z) => new(
        x,    default, default, default,
        default, y,    default, default,
        default, default, z,    default,
        default, default, default, (half)1.0
    );

    /// <summary>Returns a half4x4 scale matrix given a float3 vector containing the 3 axis scales</summary>
    /// <param name="scales">The vector containing scale factors for each axis</param>
    /// <returns>The half4x4 matrix that represents a non-uniform scale</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 Scale(half3 scales) => Scale(scales.x, scales.y, scales.z);

    /// <summary>Returns a half4x4 translation matrix given a float3 translation vector</summary>
    /// <param name="vector">The translation vector</param>
    /// <returns>The half4x4 translation matrix</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 Translate(half3 vector) => new(
        new((half)1.0, default, default, default),
        new(default, (half)1.0, default, default),
        new(default, default, (half)1.0, default),
        new(vector, (half)1.0)
    );
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half3 rotate(this half4x4 a, half3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz * a.c2)).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z).xyz;

    [MethodImpl(256 | 512)]
    public static half3 transform(this half4x4 a, half3 b) 
        => b.xxxx.fma(a.c0, b.yyyy.fma(a.c1, b.zzzz.fma(a.c2, a.c3))).xyz;
        // (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z + a.c3).xyz;

    [MethodImpl(256 | 512)]
    public static half4x4 inverse(this half4x4 m)
    {
        var (c0, c1, c2, c3) = m;

        var r0y_r1y_r0x_r1x = movelh(c1, c0); // (x1, y1, x0, y0)
        var r0z_r1z_r0w_r1w = movelh(c2, c3); // (x2, y2, x3, y3)
        var r2y_r3y_r2x_r3x = movehl(c0, c1); // (z1, w1, z0, w0)
        var r2z_r3z_r2w_r3w = movehl(c3, c2); // (z2, w2, z3, w3)

        var r0_wzyx = shuffle_zx_xz(r0z_r1z_r0w_r1w, r0y_r1y_r0x_r1x); // x3 x2 x1 x0
        var r1_wzyx = shuffle_wy_yw(r0z_r1z_r0w_r1w, r0y_r1y_r0x_r1x); // y3 y2 y1 y0
        var r2_wzyx = shuffle_zx_xz(r2z_r3z_r2w_r3w, r2y_r3y_r2x_r3x); // z3 z2 z1 z0
        var r3_wzyx = shuffle_wy_yw(r2z_r3z_r2w_r3w, r2y_r3y_r2x_r3x); // w3 w2 w1 w0
        var r0_xyzw = r0_wzyx.wzyx; // x0 x1 x2 x3

        var r1y_r2y_r1x_r2x = shuffle_yz_yz(c1, c0); // (y1, z1, y0, z0)
        var r1z_r2z_r1w_r2w = shuffle_yz_yz(c2, c3); // (y2, z2, y3, z3)
        var r3y_r0y_r3x_r0x = shuffle_wx_wx(c1, c0); // (w1, x1, w0, x0)
        var r3z_r0z_r3w_r0w = shuffle_wx_wx(c2, c3); // (w2, x2, w3, x3)

        // Calculate remaining inner term pairs. inner terms have zw=-xy, so we only have to calculate xy and can pack two pairs per vector
        // var inner12_23 = r1y_r2y_r1x_r2x * r2z_r3z_r2w_r3w - r1z_r2z_r1w_r2w * r2y_r3y_r2x_r3x;
        // var inner02_13 = r0y_r1y_r0x_r1x * r2z_r3z_r2w_r3w - r0z_r1z_r0w_r1w * r2y_r3y_r2x_r3x;
        // var inner30_01 = r3z_r0z_r3w_r0w * r0y_r1y_r0x_r1x - r3y_r0y_r3x_r0x * r0z_r1z_r0w_r1w;
        var inner12_23 = fsm(r1y_r2y_r1x_r2x * r2z_r3z_r2w_r3w, r1z_r2z_r1w_r2w, r2y_r3y_r2x_r3x);
        var inner02_13 = fsm(r0y_r1y_r0x_r1x * r2z_r3z_r2w_r3w, r0z_r1z_r0w_r1w, r2y_r3y_r2x_r3x);
        var inner30_01 = fsm(r3z_r0z_r3w_r0w * r0y_r1y_r0x_r1x, r3y_r0y_r3x_r0x, r0z_r1z_r0w_r1w);

        // Expand inner terms back to 4 components. zw signs still need to be flipped
        var inner12 = inner12_23.xzzx;
        var inner23 = inner12_23.ywwy;

        var inner02 = inner02_13.xzzx;
        var inner13 = inner02_13.ywwy;

        // Calculate minors
        // var minors0 = r3_wzyx * inner12 - r2_wzyx * inner13 + r1_wzyx * inner23;
        var minors0 = fam(fsm(r3_wzyx * inner12, r2_wzyx, inner13), r1_wzyx, inner23);

        var denom = r0_xyzw * minors0;

        // Horizontal sum of denominator. Free sign flip of z and w compensates for missing flip in inner terms
        denom += denom.yxwz; // x+y        x+y            z+w            z+w
        denom -= denom.zzxx; // x+y-z-w  x+y-z-w        z+w-x-y        z+w-x-y

        var rcp_denom_ppnn = half4.One / denom;
        var rc0 = minors0 * rcp_denom_ppnn;

        var inner30 = inner30_01.xzzx;
        var inner01 = inner30_01.ywwy;

        // var minors1 = r2_wzyx * inner30 - r0_wzyx * inner23 - r3_wzyx * inner02;
        var minors1 = fsm(fsm(r2_wzyx * inner30, r0_wzyx, inner23), r3_wzyx, inner02);
        var rc1 = minors1 * rcp_denom_ppnn;

        // var minors2 = r0_wzyx * inner13 - r1_wzyx * inner30 - r3_wzyx * inner01;
        var minors2 = fsm(fsm(r0_wzyx * inner13, r1_wzyx, inner30), r3_wzyx, inner01);
        var rc2 = minors2 * rcp_denom_ppnn;

        // var minors3 = r1_wzyx * inner02 - r0_wzyx * inner12 + r2_wzyx * inner01;
        var minors3 = fsm(fsm(r1_wzyx * inner02, r0_wzyx, inner12), r2_wzyx, inner01);
        var rc3 = minors3 * rcp_denom_ppnn;

        return new(rc0, rc1, rc2, rc3);
    }

    /// <summary>Fast matrix inverse for rigid transforms (orthonormal basis and translation)</summary>
    /// <param name="m">Matrix to invert</param>
    /// <returns>The inverted matrix</returns>
    [MethodImpl(256 | 512)]
    public static half4x4 fastinverse(this half4x4 m)
    {
        var (c0, c1, c2, pos) = m;

        var t0 = unpacklo(c0, c2);
        var t1 = unpacklo(c1, default);
        var t2 = unpackhi(c0, c2);
        var t3 = unpackhi(c1, default);

        var r0 = unpacklo(t0, t1);
        var r1 = unpackhi(t0, t1);
        var r2 = unpacklo(t2, t3);

        //pos = -(r0 * pos.x + r1 * pos.y + r2 * pos.z);
        pos = -fam(fam(r0 * pos.x, r1, pos.y), r2, pos.z);
        pos.w = (half)1.0;

        return new(r0, r1, r2, pos);
    }

    /// <summary>Returns the determinant of a half4x4 matrix</summary>
    /// <param name="m">Matrix to use when computing determinant</param>
    /// <returns>The determinant of the matrix</returns>
    [MethodImpl(256 | 512)]
    public static half determinant(this half4x4 m)
    {
        var (c0, c1, c2, c3) = m;

        // var m00 = c1.y * (c2.z * c3.w - c2.w * c3.z) - c2.y * (c1.z * c3.w - c1.w * c3.z) + c3.y * (c1.z * c2.w - c1.w * c2.z);
        // var m01 = c0.y * (c2.z * c3.w - c2.w * c3.z) - c2.y * (c0.z * c3.w - c0.w * c3.z) + c3.y * (c0.z * c2.w - c0.w * c2.z);
        // var m02 = c0.y * (c1.z * c3.w - c1.w * c3.z) - c1.y * (c0.z * c3.w - c0.w * c3.z) + c3.y * (c0.z * c1.w - c0.w * c1.z);
        // var m03 = c0.y * (c1.z * c2.w - c1.w * c2.z) - c1.y * (c0.z * c2.w - c0.w * c2.z) + c2.y * (c0.z * c1.w - c0.w * c1.z);
        
        // var r = c0.x * m00 - c1.x * m01 + c2.x * m02 - c3.x * m03;
        
        var x1_y1_x0_y0 = movelh(c1, c0); // (x1, y1, x0, y0)
        var x2_y2_x3_y3 = movelh(c2, c3); // (x2, y2, x3, y3)
        var z1_w1_z0_w0 = movehl(c0, c1); // (z1, w1, z0, w0)
        var z2_w2_z3_w3 = movehl(c3, c2); // (z2, w2, z3, w3)
        
        var x2_y2_x1_y1 = movelh(c2, c1); // (x2, y2, x1, y1)
        var z2_w2_z1_w1 = movehl(c1, c2); // (z2, w2, z1, w1)

        var x0_x1_x2_x3 = shuffle_zx_xz(x1_y1_x0_y0, x2_y2_x3_y3); // x0 x1 x2 x3

        var y1000 = x1_y1_x0_y0.ywww;
        var z1000 = z1_w1_z0_w0.xzzz;
        var w1000 = z1_w1_z0_w0.ywww;
        var y2211 = x2_y2_x1_y1.yyww;
        var z2211 = z2_w2_z1_w1.xxzz;
        var w2211 = z2_w2_z1_w1.yyww;
        var y3332 = x2_y2_x3_y3.wwwy;
        var z3332 = z2_w2_z3_w3.zzzx;
        var w3332 = z2_w2_z3_w3.wwwy;
        
        // var a = y1000 * (z2211 * w3332 - w2211 * z3332) - y2211 * (z1000 * w3332 - w1000 * z3332) + y3332 * (z1000 * w2211 - w1000 * z2211);
        var a = fam(fsm(y1000 * fsm(z2211 * w3332, w2211, z3332), y2211, fsm(z1000 * w3332, w1000, z3332)), y3332, fsm(z1000 * w2211, w1000, z2211));
        var b = x0_x1_x2_x3 * a;
        var r = b.x - b.y + b.z - b.w;
        
        return (half)r;
    }
}

#endregion // half4x4
