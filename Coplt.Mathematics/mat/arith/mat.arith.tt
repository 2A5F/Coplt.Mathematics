<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        if (!typ.arith) continue;

        for (var n = 2; n <= 4; n++)
        {
            for (var m = 2; m <= 4; m++)
            {
                var byteSize = typ.size * (n is 3 ? 4 : n);
                var bitSize = 8 * byteSize;

                var vecTypeName = $"{typ.name}{n}";
                var vecTypeNameM = $"{typ.name}{m}";
                var typeName = $"{typ.name.Replace('v', 'm')}{n}x{m}";

                var bType = $"b{typ.size * 8}v";
                var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
                var bTypeName = $"{bType.Replace('v', 'm')}{n}x{m}";
#>

#region <#= typeName #>

public partial struct <#= typeName #>
{
    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator +(<#= typeName #> a) => a;
<#
                if (typ.sig)
                {
#>

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator -(<#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"-a.c{i}")) #>);
<#
                }
#>

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator +(<#= typeName #> a, <#= typeName #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i} + b.c{i}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator -(<#= typeName #> a, <#= typeName #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i} - b.c{i}")) #>);

    /// <summary>
    /// Scale a <#= typeName #> by <#= typeName #>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator *(<#= typeName #> a, <#= typeName #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i} * b.c{i}")) #>);

    /// <summary>
    /// Scale a <#= typeName #> by <#= typ.compType #>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator *(<#= typeName #> a, <#= typ.compType #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i} * b")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator *(<#= typ.compType #> a, <#= typeName #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a * b.c{i}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator /(<#= typeName #> a, <#= typeName #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i} / b.c{i}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator /(<#= typeName #> a, <#= typ.compType #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i} / b")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator %(<#= typeName #> a, <#= typeName #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i} % b.c{i}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator %(<#= typeName #> a, <#= typ.compType #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i} % b")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator --(<#= typeName #> a) => a - One;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator ++(<#= typeName #> a) => a + One;
}

[Ex]
public static partial class math
{
    [MethodImpl(256 | 512)]
    public static <#= typeName #> abs([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.abs()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> sign([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.sign()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> min([This] <#= typeName #> a, <#= typeName #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.min(b.c{i})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> max([This] <#= typeName #> a, <#= typeName #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.max(b.c{i})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> clamp([This] <#= typeName #> v, <#= typeName #> min, <#= typeName #> max) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"v.c{i}.clamp(min.c{i}, max.c{i})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> square([This] <#= typeName #> a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> fma([This] <#= typeName #> a, <#= typeName #> b, <#= typeName #> c) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.fma(b.c{i}, c.c{i})")) #>);

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> fms([This] <#= typeName #> a, <#= typeName #> b, <#= typeName #> c) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.fms(b.c{i}, c.c{i})")) #>);

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> fnma([This] <#= typeName #> a, <#= typeName #> b, <#= typeName #> c) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.fnma(b.c{i}, c.c{i})")) #>);

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> fsm([This] <#= typeName #> c, <#= typeName #> a, <#= typeName #> b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> fam([This] <#= typeName #> c, <#= typeName #> a, <#= typeName #> b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> mad([This] <#= typeName #> a, <#= typeName #> b, <#= typeName #> c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static <#= vecTypeNameM #> csum([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.csum()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= vecTypeNameM #> cmin([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.cmin()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= vecTypeNameM #> cmax([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.cmax()")) #>);
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
