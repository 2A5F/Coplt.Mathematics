<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        if (!typ.i) continue;
        if (!typ.arith) continue;

        for (var n = 2; n <= 4; n++)
        {
            for (var m = 2; m <= 4; m++)
            {
                var byteSize = typ.size * (n is 3 ? 4 : n);
                var bitSize = 8 * byteSize;

                var vecTypeName = $"{typ.name}{n}";
                var vecTypeNameM = $"{typ.name}{m}";
                var typeName = $"{typ.name.Replace('v', 'm')}{n}x{m}";

                var bType = $"b{typ.size * 8}v";
                var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
                var bTypeName = $"{bType.Replace('v', 'm')}{n}x{m}";
#>

#region <#= typeName #>

public partial struct <#= typeName #>
{
}

[Ex]
public static partial class math
{
    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isPow2([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.isPow2()")) #>);
<#
                if (!typ.sig)
                {
#>

    [MethodImpl(256 | 512)]
    public static <#= typeName #> up2pow2([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.up2pow2()")) #>);
<#
                }
#>
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
