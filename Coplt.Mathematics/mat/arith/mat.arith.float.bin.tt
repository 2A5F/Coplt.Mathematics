<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        if (!typ.f) continue;
        if (!typ.arith) continue;
        if (!typ.bin) continue;

        for (var n = 2; n <= 4; n++)
        {
            for (var m = 2; m <= 4; m++)
            {
                var byteSize = typ.size * (n is 3 ? 4 : n);
                var bitSize = 8 * byteSize;

                var vecTypeName = $"{typ.name}{n}";
                var vecTypeNameM = $"{typ.name}{m}";
                var typeName = $"{typ.name.Replace('v', 'm')}{n}x{m}";

                var bType = $"b{typ.size * 8}v";
                var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
                var bTypeName = $"{bType.Replace('v', 'm')}{n}x{m}";
#>

#region <#= typeName #>

public partial struct <#= typeName #>
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isFinite(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.isFinite()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isInf(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.isInf()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isPosInf(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.isPosInf()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isNegInf(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.isNegInf()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> log(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.log()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> log2(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.log2()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> log(this <#= typeName #> a, <#= typeName #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.log(b.c{i})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> log10(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.log10()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> exp(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.exp()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> exp2(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.exp2()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> exp10(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.exp10()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> pow(this <#= typeName #> a, <#= typeName #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.pow(b.c{i})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> pow(this <#= typeName #> a, <#= vecTypeName #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.pow(b)")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> pow(this <#= typeName #> a, <#= typ.simdComp #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.pow(b)")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> sqrt(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.sqrt()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> rsqrt(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.rsqrt()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> sin(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.sin()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> cos(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.cos()")) #>);

    [MethodImpl(256 | 512)]
    public static (<#= typeName #> sin, <#= typeName #> cos) sincos(this <#= typeName #> a)
    {
        <#=
                    string.Join(";\n        ", Enumerable.Range(0, m).Select(i => $"a.c{i}.sincos(out var s{i}, out var c{i})")) #>;
        return (
            new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"s{i}")) #>),
            new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"c{i}")) #>)
        );
    }

    [MethodImpl(256 | 512)]
    public static void sincos(this <#= typeName #> a, out <#= typeName #> sin, out <#= typeName #> cos)
    {
        <#=
                    string.Join(";\n        ", Enumerable.Range(0, m).Select(i => $"a.c{i}.sincos(out var s{i}, out var c{i})")) #>;
        sin = new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"s{i}")) #>);
        cos = new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"c{i}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> tan(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.tan()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> asin(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.asin()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> acos(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.acos()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> atan(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.atan()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> atan2(this <#= typeName #> a, <#= typeName #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.atan2(b.c{i})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> sinh(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.sinh()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> cosh(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.cosh()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> tanh(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.tanh()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> asinh(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.asinh()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> acosh(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.acosh()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> atanh(this <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.atanh()")) #>);
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
