<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        if (!typ.arith) continue;

        for (var n = 2; n <= 4; n++)
        {
            for (var m = 2; m <= 4; m++)
            {
                var byteSize = typ.size * (n is 3 ? 4 : n);
                var bitSize = 8 * byteSize;

                var vecTypeName = $"{typ.name}{n}";
                var vecTypeNameM = $"{typ.name}{m}";
                var typeName = $"{typ.name.Replace('v', 'm')}{n}x{m}";

                var bType = $"b{typ.size * 8}v";
                var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
                var bTypeName = $"{bType.Replace('v', 'm')}{n}x{m}";
#>

#region <#= typeName #>

public partial struct <#= typeName #>
{
    /// <summary>
    /// Scale a <#= typeName #> columns by <#= vecTypeNameM #>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator *(<#= typeName #> a, <#= vecTypeNameM #> b) 
        => new(<#=
                    string.Join(", ", Enumerable.Range(0, m).Select(c => $"a.c{c} * b.{string.Join("", Enumerable.Repeat(Typ.xyzw[c], n))}")) #>);

    /// <summary>
    /// Scale a <#= typeName #> rows by <#= vecTypeName #>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator *(<#= vecTypeName #> a, <#= typeName #> b)
        => new(<#= string.Join(", ", Enumerable.Range(0, m).Select(c => $"b.c{c} * a")) #>);
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static <#= vecTypeName #> mul(this <#= typeName #> a, <#= vecTypeNameM #> b)
        => <#= Enumerable.Range(0, m)
                   .Select(c => $"a.c{c} * b.{string.Join("", Enumerable.Repeat(Typ.xyzw[c], n))}")
                   .Aggregate((a, b) => $"fma({b.Replace(" * ", ", ")}, {a})") #>; // <#=
                    string.Join(" + ", Enumerable.Range(0, m).Select(c => $"a.c{c} * b.{string.Join("", Enumerable.Repeat(Typ.xyzw[c], n))}")) #>

    [MethodImpl(256 | 512)]
    public static <#= vecTypeNameM #> mul(this <#= vecTypeName #> a, <#= typeName #> b)
        => new(<#= string.Join(", ", Enumerable.Range(0, m).Select(c => $"dot(a, b.c{c})")) #>);
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
