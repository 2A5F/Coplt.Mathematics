<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

using System.Runtime.Intrinsics.X86;
using System.Runtime.Intrinsics.Arm;

namespace Coplt.Mathematics.Simd;

public static partial class simd_matrix
{
<#
    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd || !(typ.f || typ.i)) continue;
        {
            var byteSize = typ.size * 2;
            var bitSize = 8 * byteSize;

            var typeName = $"Vector{bitSize}<{typ.simdComp}>";
            var vecName = $"Vector{bitSize}";
            var largeVec = $"Vector{bitSize * 2}";
#>
    #region <#= typeName #>

    [MethodImpl(256 | 512)]
    public static (<#= typeName #> c0, <#= typeName #> c1) Transpose2x2(
        <#= typeName #> c0, <#= typeName #> c1
    )
    {
<#
            if (typ.name is "float")
            {
#>
<#
            }
            else if (typ.name is "double")
            {
#>
<#
            }
            else if (typ.name is "int" or "uint")
            {
#>
<#
            }
            else if (typ.name is "long" or "ulong")
            {
#>
<#
            }
#>
        if (<#= largeVec #>.IsHardwareAccelerated)
        {
            var a = <#= largeVec #>.Create(c0, c1);
            var b = <#= largeVec #>.Shuffle(a, <#= largeVec #>.Create(<#= typ.shuffleCast #>0, 2, 1, 3));
            return (b.GetLower(), b.GetUpper());
        }
        {
            var oc0 = <#= vecName #>.Create(c0.GetElement(0), c1.GetElement(0));
            var oc1 = <#= vecName #>.Create(c0.GetElement(1), c1.GetElement(1));
            return (oc0, oc1);
        }
    }

    #endregion
<#
        }
    }
#>
}
