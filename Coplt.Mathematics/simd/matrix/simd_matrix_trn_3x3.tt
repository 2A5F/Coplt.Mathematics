<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

using System.Runtime.Intrinsics.X86;
using System.Runtime.Intrinsics.Arm;

namespace Coplt.Mathematics.Simd;

public static partial class simd_matrix
{
<#
    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd || !(typ.f || typ.i)) continue;
        {
            var byteSize = typ.size * 4;
            var bitSize = 8 * byteSize;

            var typeName = $"Vector{bitSize}<{typ.simdComp}>";
            var vecName = $"Vector{bitSize}";
#>
    #region <#= typeName #>

    [MethodImpl(256 | 512)]
    public static (<#= typeName #> c0, <#= typeName #> c1, <#= typeName #> c2) Transpose3x3(
        <#= typeName #> c0, <#= typeName #> c1, <#= typeName #> c2
    )
    {
<#
            if (typ.name is "float")
            {
#>
        if (Sse.IsSupported)
        {
            var a = Sse.Shuffle(c0, c1, 0x44); // a0 a1 b0 b1 => (c0.xy, c1.xy)
            var c = Sse.Shuffle(c0, c1, 0xEE); // a2 a3 b2 b3 => (c0.yz, c1.yz)
            var oc0 = Sse.Shuffle(a, c2, 0xC8); // a0 a2 b0 b3 => (a.xz, c2.xw) => (c0.x, c1.x, c2.x, 0)         
            var oc1 = Sse.Shuffle(a, c2, 0xDD); // a1 a3 a1 a3 => (a.yw, c2.yw) => (c0.y, c1.y, c2.y, 0)            
            var oc2 = Sse.Shuffle(c, c2, 0xE8); // a0 a2 b2 b3 => (c.xz, c2.zw) => (c0.z, c1.z, c2.z, 0)
            return (oc0, oc1, oc2);
        }
<#
            }
            else if (typ.name is "double")
            {
#>
        if (Avx.IsSupported)
        {
            var a = Avx.Shuffle(c0, c1, 0x0); // a0 b0 a2 b2  => (c0.x, c1.x, c0.z, c1.z)
            var c = Avx.Shuffle(c0, c1, 0xF); // a1 b1 a3 b3  => (c0.y, c1.y, 0, 0)
            var b = <#= vecName #>.Shuffle(c2, <#= vecName #>.Create(<#= typ.shuffleCast #>0, 3, 2, 3)); // (c2.x, 0, c2.z, 0)
            var d = <#= vecName #>.Shuffle(c2, <#= vecName #>.Create(<#= typ.shuffleCast #>1, 3, 3, 3)); // (c2.y, 0, 0, 0)
            var oc0 = Avx.Permute2x128(a, b, 0x20); // a01 b01 => (c0.x, c1.x, c2.x, 0)
            var oc1 = Avx.Permute2x128(c, d, 0x20); // a01 b01 => (c0.y, c1.y, c2.y, 0)
            var oc2 = Avx.Permute2x128(a, b, 0x31); // a23 b23 => (c0.z, c1.z, c2.z, 0)
            return (oc0, oc1, oc2);
        }
<#
            }
            else if (typ.name is "int" or "uint")
            {
#>
        if (Sse.IsSupported)
        {
            var ic0 = c0.AsSingle();
            var ic1 = c1.AsSingle();
            var ic2 = c2.AsSingle();
            var a = Sse.Shuffle(ic0, ic1, 0x44); // a0 a1 b0 b1 => (c0.xy, c1.xy)
            var c = Sse.Shuffle(ic0, ic1, 0xEE); // a2 a3 b2 b3 => (c0.yz, c1.yz)
            var oc0 = Sse.Shuffle(a, ic2, 0xC8); // a0 a2 b0 b3 => (a.xz, c2.xw) => (c0.x, c1.x, c2.x, 0)         
            var oc1 = Sse.Shuffle(a, ic2, 0xDD); // a1 a3 a1 a3 => (a.yw, c2.yw) => (c0.y, c1.y, c2.y, 0)            
            var oc2 = Sse.Shuffle(c, ic2, 0xE8); // a0 a2 b2 b3 => (c.xz, c2.zw) => (c0.z, c1.z, c2.z, 0)
            return (oc0.As<#= typ.Type #>(), oc1.As<#= typ.Type #>(), oc2.As<#= typ.Type #>());
        }
<#
            }
            else if (typ.name is "long" or "ulong")
            {
#>
        if (Avx.IsSupported)
        {
            var ic0 = c0.AsDouble();
            var ic1 = c1.AsDouble();
            var a = Avx.Shuffle(ic0, ic1, 0x0); // a0 b0 a2 b2  => (c0.x, c1.x, c0.z, c1.z)
            var c = Avx.Shuffle(ic0, ic1, 0xF); // a1 b1 a3 b3  => (c0.y, c1.y, 0, 0)
            var b = <#= vecName #>.Shuffle(c2, <#= vecName #>.Create(<#= typ.shuffleCast #>0, 3, 2, 3)).AsDouble(); // (c2.x, 0, c2.z, 0)
            var d = <#= vecName #>.Shuffle(c2, <#= vecName #>.Create(<#= typ.shuffleCast #>1, 3, 3, 3)).AsDouble(); // (c2.y, 0, 0, 0)
            var oc0 = Avx.Permute2x128(a, b, 0x20); // a01 b01 => (c0.x, c1.x, c2.x, 0)
            var oc1 = Avx.Permute2x128(c, d, 0x20); // a01 b01 => (c0.y, c1.y, c2.y, 0)
            var oc2 = Avx.Permute2x128(a, b, 0x31); // a23 b23 => (c0.z, c1.z, c2.z, 0)
            return (oc0.As<#= typ.Type #>(), oc1.As<#= typ.Type #>(), oc2.As<#= typ.Type #>());
        }
<#
            }
#>
        {
            var oc0 = <#= vecName #>.Create(c0.GetElement(0), c1.GetElement(0), c2.GetElement(0), 0);
            var oc1 = <#= vecName #>.Create(c0.GetElement(1), c1.GetElement(1), c2.GetElement(1), 0);
            var oc2 = <#= vecName #>.Create(c0.GetElement(2), c1.GetElement(2), c2.GetElement(2), 0);
            return (oc0, oc1, oc2);
        }
    }

    #endregion
<#
        }
    }
#>
}
