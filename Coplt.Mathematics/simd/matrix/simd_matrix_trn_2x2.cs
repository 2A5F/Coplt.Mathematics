// generated by template, do not modify manually

using System.Runtime.Intrinsics.X86;
using System.Runtime.Intrinsics.Arm;

namespace Coplt.Mathematics.Simd;

public static partial class simd_matrix
{
    #region Vector64<float>

    [MethodImpl(256 | 512)]
    public static (Vector64<float> c0, Vector64<float> c1) Transpose2x2(
        Vector64<float> c0, Vector64<float> c1
    )
    {
        if (Vector128.IsHardwareAccelerated)
        {
            var a = Vector128.Create(c0, c1);
            var b = Vector128.Shuffle(a, Vector128.Create(0, 2, 1, 3));
            return (b.GetLower(), b.GetUpper());
        }
        {
            var oc0 = Vector64.Create(c0.GetElement(0), c1.GetElement(0));
            var oc1 = Vector64.Create(c0.GetElement(1), c1.GetElement(1));
            return (oc0, oc1);
        }
    }

    #endregion
    #region Vector128<double>

    [MethodImpl(256 | 512)]
    public static (Vector128<double> c0, Vector128<double> c1) Transpose2x2(
        Vector128<double> c0, Vector128<double> c1
    )
    {
        if (Vector256.IsHardwareAccelerated)
        {
            var a = Vector256.Create(c0, c1);
            var b = Vector256.Shuffle(a, Vector256.Create(0, 2, 1, 3));
            return (b.GetLower(), b.GetUpper());
        }
        {
            var oc0 = Vector128.Create(c0.GetElement(0), c1.GetElement(0));
            var oc1 = Vector128.Create(c0.GetElement(1), c1.GetElement(1));
            return (oc0, oc1);
        }
    }

    #endregion
    #region Vector64<int>

    [MethodImpl(256 | 512)]
    public static (Vector64<int> c0, Vector64<int> c1) Transpose2x2(
        Vector64<int> c0, Vector64<int> c1
    )
    {
        if (Vector128.IsHardwareAccelerated)
        {
            var a = Vector128.Create(c0, c1);
            var b = Vector128.Shuffle(a, Vector128.Create(0, 2, 1, 3));
            return (b.GetLower(), b.GetUpper());
        }
        {
            var oc0 = Vector64.Create(c0.GetElement(0), c1.GetElement(0));
            var oc1 = Vector64.Create(c0.GetElement(1), c1.GetElement(1));
            return (oc0, oc1);
        }
    }

    #endregion
    #region Vector64<uint>

    [MethodImpl(256 | 512)]
    public static (Vector64<uint> c0, Vector64<uint> c1) Transpose2x2(
        Vector64<uint> c0, Vector64<uint> c1
    )
    {
        if (Vector128.IsHardwareAccelerated)
        {
            var a = Vector128.Create(c0, c1);
            var b = Vector128.Shuffle(a, Vector128.Create((uint)0, 2, 1, 3));
            return (b.GetLower(), b.GetUpper());
        }
        {
            var oc0 = Vector64.Create(c0.GetElement(0), c1.GetElement(0));
            var oc1 = Vector64.Create(c0.GetElement(1), c1.GetElement(1));
            return (oc0, oc1);
        }
    }

    #endregion
    #region Vector128<long>

    [MethodImpl(256 | 512)]
    public static (Vector128<long> c0, Vector128<long> c1) Transpose2x2(
        Vector128<long> c0, Vector128<long> c1
    )
    {
        if (Vector256.IsHardwareAccelerated)
        {
            var a = Vector256.Create(c0, c1);
            var b = Vector256.Shuffle(a, Vector256.Create(0, 2, 1, 3));
            return (b.GetLower(), b.GetUpper());
        }
        {
            var oc0 = Vector128.Create(c0.GetElement(0), c1.GetElement(0));
            var oc1 = Vector128.Create(c0.GetElement(1), c1.GetElement(1));
            return (oc0, oc1);
        }
    }

    #endregion
    #region Vector128<ulong>

    [MethodImpl(256 | 512)]
    public static (Vector128<ulong> c0, Vector128<ulong> c1) Transpose2x2(
        Vector128<ulong> c0, Vector128<ulong> c1
    )
    {
        if (Vector256.IsHardwareAccelerated)
        {
            var a = Vector256.Create(c0, c1);
            var b = Vector256.Shuffle(a, Vector256.Create((ulong)0, 2, 1, 3));
            return (b.GetLower(), b.GetUpper());
        }
        {
            var oc0 = Vector128.Create(c0.GetElement(0), c1.GetElement(0));
            var oc1 = Vector128.Create(c0.GetElement(1), c1.GetElement(1));
            return (oc0, oc1);
        }
    }

    #endregion
}
