<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

using System.Runtime.Intrinsics.X86;
using System.Runtime.Intrinsics.Arm;

namespace Coplt.Mathematics.Simd;

public static partial class simd_matrix
{
<#
    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd || !(typ.f || typ.i)) continue;
        {
            var byteSize = typ.size * 4;
            var bitSize = 8 * byteSize;
            
            var t_byteSize = typ.size * 2;
            var t_bitSize = 8 * t_byteSize;

            var typeName = $"Vector{bitSize}<{typ.simdComp}>";
            var vecName = $"Vector{bitSize}";
            
            var t_typeName = $"Vector{t_bitSize}<{typ.simdComp}>";
            var t_vecName = $"Vector{t_bitSize}";
#>
    #region <#= typeName #>

    [MethodImpl(256 | 512)]
    public static (<#= t_typeName #> c0, <#= t_typeName #> c1, <#= t_typeName #> c2, <#= t_typeName #> c3) Transpose4x2To2x4(
        <#= typeName #> c0, <#= typeName #> c1
    )
    {
<#
            if (typ.name is "float")
            {
#>
        if (Sse.IsSupported)
        {
            var a = Sse.UnpackLow(c0, c1); // (c0.x, c1.x, c0.y, c1.y)
            var b = Sse.UnpackHigh(c0, c1); // (c0.z, c1.z, c0.w, c1.w)
            return (a.GetLower(), a.GetUpper(), b.GetLower(), b.GetUpper());
        }
<#
            }
            else if (typ.name is "double")
            {
#>
        if (Avx.IsSupported)
        {
            var a = Avx.Shuffle(c0, c1, 0x0); // a0 b0 a2 b2  => (c0.x, c1.x, c0.z, c1.z)
            var c = Avx.Shuffle(c0, c1, 0xF); // a1 b1 a3 b3  => (c0.y, c1.y, c0.w, c1.w)
            return (a.GetLower(), c.GetLower(), a.GetUpper(), c.GetUpper());
        }
<#
            }
            else if (typ.name is "int" or "uint")
            {
#>
        if (Sse.IsSupported)
        {
            var ic0 = c0.AsSingle();
            var ic1 = c1.AsSingle();
            var a = Sse.UnpackLow(ic0, ic1).As<#= typ.Type #>(); // (c0.x, c1.x, c0.y, c1.y)
            var b = Sse.UnpackHigh(ic0, ic1).As<#= typ.Type #>(); // (c0.z, c1.z, c0.w, c1.w)
            return (a.GetLower(), a.GetUpper(), b.GetLower(), b.GetUpper());
        }
<#
            }
            else if (typ.name is "long" or "ulong")
            {
#>
        if (Avx.IsSupported)
        {
            var ic0 = c0.AsDouble();
            var ic1 = c1.AsDouble();
            var a = Avx.Shuffle(ic0, ic1, 0x0).As<#= typ.Type #>(); // a0 b0 a2 b2  => (c0.x, c1.x, c0.z, c1.z)
            var c = Avx.Shuffle(ic0, ic1, 0xF).As<#= typ.Type #>(); // a1 b1 a3 b3  => (c0.y, c1.y, c0.w, c1.w)
            return (a.GetLower(), c.GetLower(), a.GetUpper(), c.GetUpper());
        }
<#
            }
#>
        {
            var oc0 = <#= t_vecName #>.Create(c0.GetElement(0), c1.GetElement(0));
            var oc1 = <#= t_vecName #>.Create(c0.GetElement(1), c1.GetElement(1));
            var oc2 = <#= t_vecName #>.Create(c0.GetElement(2), c1.GetElement(2));
            var oc3 = <#= t_vecName #>.Create(c0.GetElement(3), c1.GetElement(3));
            return (oc0, oc1, oc2, oc3);
        }
    }

    #endregion
<#
        }
    }
#>
}
