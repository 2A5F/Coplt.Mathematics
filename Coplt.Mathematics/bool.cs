// generated by template, do not modify manually

namespace Coplt.Mathematics;

public readonly partial record struct b16 : IEquatable<bool>, IFormattable
#if NET8_0_OR_GREATER
    , ISpanFormattable, IUtf8SpanFormattable
    , IEqualityOperators<b16, b16, bool>
#endif
{
    [MethodImpl(256 | 512)]
    internal b16(ushort value) => this.value = value;
    internal readonly ushort value;

    public static readonly b16 True = new(ushort.MaxValue);
    public static readonly b16 False = new(0);

    public bool Equals(bool other) => other == (bool)this;

    #region ToString

    public override string ToString() => ((bool)this).ToString();

    public string ToString(string? format, IFormatProvider? formatProvider) => ToString();

    public bool TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
        => ((bool)this).TryFormat(destination, out charsWritten);

    #if NET8_0_OR_GREATER
    public bool TryFormat(Span<byte> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        charsWritten = 0;
        if (this)
        {
            if (destination.Length < 4) return false;
            var lit = "True"u8;
            lit.CopyTo(destination);
            charsWritten = 4;
        }
        else 
        {
            if (destination.Length < 5) return false;
            var lit = "False"u8;
            lit.CopyTo(destination);
            charsWritten = 5;
        }
        return true;
    }
    #endif

    #endregion

    #region Conv operator

    [MethodImpl(256 | 512)]
    public static implicit operator bool(b16 v) => v.value != 0;
    [MethodImpl(256 | 512)]
    public static implicit operator b16(bool v) => v ? True : False;

    [MethodImpl(256 | 512)]
    public static bool operator true(b16 v) => v.value != 0;
    [MethodImpl(256 | 512)]
    public static bool operator false(b16 v) => v.value == 0;

    [MethodImpl(256 | 512)]
    public static explicit operator byte(b16 v) => (byte)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator sbyte(b16 v) => (sbyte)v.value;
    [MethodImpl(256 | 512)]
    public static implicit operator ushort(b16 v) => (ushort)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator short(b16 v) => (short)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator uint(b16 v) => (uint)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator int(b16 v) => (int)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator ulong(b16 v) => (ulong)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator long(b16 v) => (long)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator half(b16 v) => (Half)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator float(b16 v) => (float)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator double(b16 v) => (double)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator decimal(b16 v) => (decimal)v.value;

    [MethodImpl(256 | 512)]
    public static explicit operator b16(sbyte v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b16(byte v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static implicit operator b16(ushort v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b16(short v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b16(uint v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b16(int v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b16(ulong v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b16(long v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b16(half v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b16(float v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b16(double v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b16(decimal v) => v.Equals(default) ? False : True;

    #endregion
}

public readonly partial record struct b32 : IEquatable<bool>, IFormattable
#if NET8_0_OR_GREATER
    , ISpanFormattable, IUtf8SpanFormattable
    , IEqualityOperators<b32, b32, bool>
#endif
{
    [MethodImpl(256 | 512)]
    internal b32(uint value) => this.value = value;
    internal readonly uint value;

    public static readonly b32 True = new(uint.MaxValue);
    public static readonly b32 False = new(0);

    public bool Equals(bool other) => other == (bool)this;

    #region ToString

    public override string ToString() => ((bool)this).ToString();

    public string ToString(string? format, IFormatProvider? formatProvider) => ToString();

    public bool TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
        => ((bool)this).TryFormat(destination, out charsWritten);

    #if NET8_0_OR_GREATER
    public bool TryFormat(Span<byte> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        charsWritten = 0;
        if (this)
        {
            if (destination.Length < 4) return false;
            var lit = "True"u8;
            lit.CopyTo(destination);
            charsWritten = 4;
        }
        else 
        {
            if (destination.Length < 5) return false;
            var lit = "False"u8;
            lit.CopyTo(destination);
            charsWritten = 5;
        }
        return true;
    }
    #endif

    #endregion

    #region Conv operator

    [MethodImpl(256 | 512)]
    public static implicit operator bool(b32 v) => v.value != 0;
    [MethodImpl(256 | 512)]
    public static implicit operator b32(bool v) => v ? True : False;

    [MethodImpl(256 | 512)]
    public static bool operator true(b32 v) => v.value != 0;
    [MethodImpl(256 | 512)]
    public static bool operator false(b32 v) => v.value == 0;

    [MethodImpl(256 | 512)]
    public static explicit operator byte(b32 v) => (byte)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator sbyte(b32 v) => (sbyte)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator ushort(b32 v) => (ushort)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator short(b32 v) => (short)v.value;
    [MethodImpl(256 | 512)]
    public static implicit operator uint(b32 v) => (uint)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator int(b32 v) => (int)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator ulong(b32 v) => (ulong)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator long(b32 v) => (long)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator half(b32 v) => (Half)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator float(b32 v) => (float)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator double(b32 v) => (double)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator decimal(b32 v) => (decimal)v.value;

    [MethodImpl(256 | 512)]
    public static explicit operator b32(sbyte v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b32(byte v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b32(ushort v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b32(short v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static implicit operator b32(uint v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b32(int v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b32(ulong v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b32(long v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b32(half v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b32(float v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b32(double v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b32(decimal v) => v.Equals(default) ? False : True;

    #endregion
}

public readonly partial record struct b64 : IEquatable<bool>, IFormattable
#if NET8_0_OR_GREATER
    , ISpanFormattable, IUtf8SpanFormattable
    , IEqualityOperators<b64, b64, bool>
#endif
{
    [MethodImpl(256 | 512)]
    internal b64(ulong value) => this.value = value;
    internal readonly ulong value;

    public static readonly b64 True = new(ulong.MaxValue);
    public static readonly b64 False = new(0);

    public bool Equals(bool other) => other == (bool)this;

    #region ToString

    public override string ToString() => ((bool)this).ToString();

    public string ToString(string? format, IFormatProvider? formatProvider) => ToString();

    public bool TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
        => ((bool)this).TryFormat(destination, out charsWritten);

    #if NET8_0_OR_GREATER
    public bool TryFormat(Span<byte> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        charsWritten = 0;
        if (this)
        {
            if (destination.Length < 4) return false;
            var lit = "True"u8;
            lit.CopyTo(destination);
            charsWritten = 4;
        }
        else 
        {
            if (destination.Length < 5) return false;
            var lit = "False"u8;
            lit.CopyTo(destination);
            charsWritten = 5;
        }
        return true;
    }
    #endif

    #endregion

    #region Conv operator

    [MethodImpl(256 | 512)]
    public static implicit operator bool(b64 v) => v.value != 0;
    [MethodImpl(256 | 512)]
    public static implicit operator b64(bool v) => v ? True : False;

    [MethodImpl(256 | 512)]
    public static bool operator true(b64 v) => v.value != 0;
    [MethodImpl(256 | 512)]
    public static bool operator false(b64 v) => v.value == 0;

    [MethodImpl(256 | 512)]
    public static explicit operator byte(b64 v) => (byte)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator sbyte(b64 v) => (sbyte)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator ushort(b64 v) => (ushort)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator short(b64 v) => (short)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator uint(b64 v) => (uint)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator int(b64 v) => (int)v.value;
    [MethodImpl(256 | 512)]
    public static implicit operator ulong(b64 v) => (ulong)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator long(b64 v) => (long)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator half(b64 v) => (Half)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator float(b64 v) => (float)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator double(b64 v) => (double)v.value;
    [MethodImpl(256 | 512)]
    public static explicit operator decimal(b64 v) => (decimal)v.value;

    [MethodImpl(256 | 512)]
    public static explicit operator b64(sbyte v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b64(byte v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b64(ushort v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b64(short v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b64(uint v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b64(int v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static implicit operator b64(ulong v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b64(long v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b64(half v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b64(float v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b64(double v) => v.Equals(default) ? False : True;
    [MethodImpl(256 | 512)]
    public static explicit operator b64(decimal v) => v.Equals(default) ? False : True;

    #endregion
}
