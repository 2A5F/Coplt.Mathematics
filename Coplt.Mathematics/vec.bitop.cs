// generated by template, do not modify manually

namespace Coplt.Mathematics;

#region float2

public partial struct float2
{
    [MethodImpl(256 | 512)]
    public static float2 operator ~(float2 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float2 operator |(float2 a, float2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float2 operator &(float2 a, float2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float2 operator <<(float2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float2 operator >>(float2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float2 operator >>>(float2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // float2

#region float3

public partial struct float3
{
    [MethodImpl(256 | 512)]
    public static float3 operator ~(float3 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float3 operator |(float3 a, float3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float3 operator &(float3 a, float3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float3 operator <<(float3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float3 operator >>(float3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float3 operator >>>(float3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // float3

#region float4

public partial struct float4
{
    [MethodImpl(256 | 512)]
    public static float4 operator ~(float4 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float4 operator |(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float4 operator &(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float4 operator <<(float4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b), a.w.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float4 operator >>(float4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b), a.w.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float4 operator >>>(float4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b), a.w.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // float4

#region double2

public partial struct double2
{
    [MethodImpl(256 | 512)]
    public static double2 operator ~(double2 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double2 operator |(double2 a, double2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double2 operator &(double2 a, double2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double2 operator <<(double2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double2 operator >>(double2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double2 operator >>>(double2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // double2

#region double3

public partial struct double3
{
    [MethodImpl(256 | 512)]
    public static double3 operator ~(double3 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double3 operator |(double3 a, double3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double3 operator &(double3 a, double3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double3 operator <<(double3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double3 operator >>(double3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double3 operator >>>(double3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // double3

#region double4

public partial struct double4
{
    [MethodImpl(256 | 512)]
    public static double4 operator ~(double4 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double4 operator |(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double4 operator &(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double4 operator <<(double4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b), a.w.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double4 operator >>(double4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b), a.w.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double4 operator >>>(double4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b), a.w.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // double4

#region int2

public partial struct int2
{
    [MethodImpl(256 | 512)]
    public static int2 operator ~(int2 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int2 operator |(int2 a, int2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int2 operator &(int2 a, int2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int2 operator <<(int2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int2 operator >>(int2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int2 operator >>>(int2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // int2

#region int3

public partial struct int3
{
    [MethodImpl(256 | 512)]
    public static int3 operator ~(int3 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int3 operator |(int3 a, int3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int3 operator &(int3 a, int3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int3 operator <<(int3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int3 operator >>(int3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int3 operator >>>(int3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // int3

#region int4

public partial struct int4
{
    [MethodImpl(256 | 512)]
    public static int4 operator ~(int4 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int4 operator |(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int4 operator &(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int4 operator <<(int4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b), a.w.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int4 operator >>(int4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b), a.w.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int4 operator >>>(int4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b), a.w.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // int4

#region uint2

public partial struct uint2
{
    [MethodImpl(256 | 512)]
    public static uint2 operator ~(uint2 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint2 operator |(uint2 a, uint2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint2 operator &(uint2 a, uint2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint2 operator <<(uint2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint2 operator >>(uint2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint2 operator >>>(uint2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // uint2

#region uint3

public partial struct uint3
{
    [MethodImpl(256 | 512)]
    public static uint3 operator ~(uint3 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint3 operator |(uint3 a, uint3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint3 operator &(uint3 a, uint3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint3 operator <<(uint3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint3 operator >>(uint3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint3 operator >>>(uint3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // uint3

#region uint4

public partial struct uint4
{
    [MethodImpl(256 | 512)]
    public static uint4 operator ~(uint4 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint4 operator |(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint4 operator &(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint4 operator <<(uint4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b), a.w.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint4 operator >>(uint4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b), a.w.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint4 operator >>>(uint4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b), a.w.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // uint4

#region long2

public partial struct long2
{
    [MethodImpl(256 | 512)]
    public static long2 operator ~(long2 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long2 operator |(long2 a, long2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long2 operator &(long2 a, long2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long2 operator <<(long2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long2 operator >>(long2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long2 operator >>>(long2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // long2

#region long3

public partial struct long3
{
    [MethodImpl(256 | 512)]
    public static long3 operator ~(long3 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long3 operator |(long3 a, long3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long3 operator &(long3 a, long3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long3 operator <<(long3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long3 operator >>(long3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long3 operator >>>(long3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // long3

#region long4

public partial struct long4
{
    [MethodImpl(256 | 512)]
    public static long4 operator ~(long4 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long4 operator |(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long4 operator &(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long4 operator <<(long4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b), a.w.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long4 operator >>(long4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b), a.w.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long4 operator >>>(long4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b), a.w.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // long4

#region ulong2

public partial struct ulong2
{
    [MethodImpl(256 | 512)]
    public static ulong2 operator ~(ulong2 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong2 operator |(ulong2 a, ulong2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong2 operator &(ulong2 a, ulong2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong2 operator <<(ulong2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong2 operator >>(ulong2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong2 operator >>>(ulong2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong2

#region ulong3

public partial struct ulong3
{
    [MethodImpl(256 | 512)]
    public static ulong3 operator ~(ulong3 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong3 operator |(ulong3 a, ulong3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong3 operator &(ulong3 a, ulong3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong3 operator <<(ulong3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong3 operator >>(ulong3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong3 operator >>>(ulong3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong3

#region ulong4

public partial struct ulong4
{
    [MethodImpl(256 | 512)]
    public static ulong4 operator ~(ulong4 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong4 operator |(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong4 operator &(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong4 operator <<(ulong4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b), a.w.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong4 operator >>(ulong4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b), a.w.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong4 operator >>>(ulong4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b), a.w.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong4

#region half2

public partial struct half2
{
    [MethodImpl(256 | 512)]
    public static half2 operator ~(half2 a)
    {
        return new(a.x.BitNot(), a.y.BitNot());
    }

    [MethodImpl(256 | 512)]
    public static half2 operator |(half2 a, half2 b)
    {
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
    }

    [MethodImpl(256 | 512)]
    public static half2 operator &(half2 a, half2 b)
    {
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
    }

    [MethodImpl(256 | 512)]
    public static half2 operator <<(half2 a, int b)
    {
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b));
    }

    [MethodImpl(256 | 512)]
    public static half2 operator >>(half2 a, int b)
    {
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b));
    }

    [MethodImpl(256 | 512)]
    public static half2 operator >>>(half2 a, int b)
    {
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b));
    }
}

#endregion // half2

#region half3

public partial struct half3
{
    [MethodImpl(256 | 512)]
    public static half3 operator ~(half3 a)
    {
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
    }

    [MethodImpl(256 | 512)]
    public static half3 operator |(half3 a, half3 b)
    {
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
    }

    [MethodImpl(256 | 512)]
    public static half3 operator &(half3 a, half3 b)
    {
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
    }

    [MethodImpl(256 | 512)]
    public static half3 operator <<(half3 a, int b)
    {
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b));
    }

    [MethodImpl(256 | 512)]
    public static half3 operator >>(half3 a, int b)
    {
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b));
    }

    [MethodImpl(256 | 512)]
    public static half3 operator >>>(half3 a, int b)
    {
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b));
    }
}

#endregion // half3

#region half4

public partial struct half4
{
    [MethodImpl(256 | 512)]
    public static half4 operator ~(half4 a)
    {
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
    }

    [MethodImpl(256 | 512)]
    public static half4 operator |(half4 a, half4 b)
    {
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
    }

    [MethodImpl(256 | 512)]
    public static half4 operator &(half4 a, half4 b)
    {
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
    }

    [MethodImpl(256 | 512)]
    public static half4 operator <<(half4 a, int b)
    {
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b), a.w.BitShiftLeft(b));
    }

    [MethodImpl(256 | 512)]
    public static half4 operator >>(half4 a, int b)
    {
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b), a.w.BitShiftRight(b));
    }

    [MethodImpl(256 | 512)]
    public static half4 operator >>>(half4 a, int b)
    {
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b), a.w.BitShiftRightUnsigned(b));
    }
}

#endregion // half4

#region b16v2

public partial struct b16v2
{
    [MethodImpl(256 | 512)]
    public static b16v2 operator ~(b16v2 a)
    {
        return new(a.x.BitNot(), a.y.BitNot());
    }

    [MethodImpl(256 | 512)]
    public static b16v2 operator |(b16v2 a, b16v2 b)
    {
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
    }

    [MethodImpl(256 | 512)]
    public static b16v2 operator &(b16v2 a, b16v2 b)
    {
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
    }
}

#endregion // b16v2

#region b16v3

public partial struct b16v3
{
    [MethodImpl(256 | 512)]
    public static b16v3 operator ~(b16v3 a)
    {
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
    }

    [MethodImpl(256 | 512)]
    public static b16v3 operator |(b16v3 a, b16v3 b)
    {
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
    }

    [MethodImpl(256 | 512)]
    public static b16v3 operator &(b16v3 a, b16v3 b)
    {
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
    }
}

#endregion // b16v3

#region b16v4

public partial struct b16v4
{
    [MethodImpl(256 | 512)]
    public static b16v4 operator ~(b16v4 a)
    {
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
    }

    [MethodImpl(256 | 512)]
    public static b16v4 operator |(b16v4 a, b16v4 b)
    {
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
    }

    [MethodImpl(256 | 512)]
    public static b16v4 operator &(b16v4 a, b16v4 b)
    {
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
    }
}

#endregion // b16v4

#region b32v2

public partial struct b32v2
{
    [MethodImpl(256 | 512)]
    public static b32v2 operator ~(b32v2 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b32v2 operator |(b32v2 a, b32v2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b32v2 operator &(b32v2 a, b32v2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b32v2

#region b32v3

public partial struct b32v3
{
    [MethodImpl(256 | 512)]
    public static b32v3 operator ~(b32v3 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b32v3 operator |(b32v3 a, b32v3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b32v3 operator &(b32v3 a, b32v3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b32v3

#region b32v4

public partial struct b32v4
{
    [MethodImpl(256 | 512)]
    public static b32v4 operator ~(b32v4 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b32v4 operator |(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b32v4 operator &(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b32v4

#region b64v2

public partial struct b64v2
{
    [MethodImpl(256 | 512)]
    public static b64v2 operator ~(b64v2 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b64v2 operator |(b64v2 a, b64v2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b64v2 operator &(b64v2 a, b64v2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b64v2

#region b64v3

public partial struct b64v3
{
    [MethodImpl(256 | 512)]
    public static b64v3 operator ~(b64v3 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b64v3 operator |(b64v3 a, b64v3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b64v3 operator &(b64v3 a, b64v3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b64v3

#region b64v4

public partial struct b64v4
{
    [MethodImpl(256 | 512)]
    public static b64v4 operator ~(b64v4 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b64v4 operator |(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b64v4 operator &(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b64v4

