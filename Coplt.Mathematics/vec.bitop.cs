// generated by template, do not modify manually

namespace Coplt.Mathematics;

#region float2

public partial struct float2 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<float2, float2, float2>
    , IShiftOperators<float2, int, float2>
    #endif
{
    [MethodImpl(256 | 512)]
    public static float2 operator ~(float2 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float2 operator |(float2 a, float2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float2 operator &(float2 a, float2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float2 operator ^(float2 a, float2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float2 operator <<(float2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float2 operator >>(float2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float2 operator >>>(float2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float2 BitAndNot(this float2 a, float2 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector64.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // float2

#region float3

public partial struct float3 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<float3, float3, float3>
    , IShiftOperators<float3, int, float3>
    #endif
{
    [MethodImpl(256 | 512)]
    public static float3 operator ~(float3 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float3 operator |(float3 a, float3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float3 operator &(float3 a, float3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float3 operator ^(float3 a, float3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float3 operator <<(float3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float3 operator >>(float3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float3 operator >>>(float3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float3 BitAndNot(this float3 a, float3 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // float3

#region float4

public partial struct float4 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<float4, float4, float4>
    , IShiftOperators<float4, int, float4>
    #endif
{
    [MethodImpl(256 | 512)]
    public static float4 operator ~(float4 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float4 operator |(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float4 operator &(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float4 operator ^(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z), a.w.BitXor(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float4 operator <<(float4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b), a.w.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float4 operator >>(float4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b), a.w.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static float4 operator >>>(float4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b), a.w.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float4 BitAndNot(this float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z), a.w.BitAndNot(b.w));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // float4

#region double2

public partial struct double2 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<double2, double2, double2>
    , IShiftOperators<double2, int, double2>
    #endif
{
    [MethodImpl(256 | 512)]
    public static double2 operator ~(double2 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double2 operator |(double2 a, double2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double2 operator &(double2 a, double2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double2 operator ^(double2 a, double2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double2 operator <<(double2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double2 operator >>(double2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double2 operator >>>(double2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double2 BitAndNot(this double2 a, double2 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // double2

#region double3

public partial struct double3 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<double3, double3, double3>
    , IShiftOperators<double3, int, double3>
    #endif
{
    [MethodImpl(256 | 512)]
    public static double3 operator ~(double3 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double3 operator |(double3 a, double3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double3 operator &(double3 a, double3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double3 operator ^(double3 a, double3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double3 operator <<(double3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double3 operator >>(double3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double3 operator >>>(double3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double3 BitAndNot(this double3 a, double3 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector256.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // double3

#region double4

public partial struct double4 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<double4, double4, double4>
    , IShiftOperators<double4, int, double4>
    #endif
{
    [MethodImpl(256 | 512)]
    public static double4 operator ~(double4 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double4 operator |(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double4 operator &(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double4 operator ^(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z), a.w.BitXor(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double4 operator <<(double4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b), a.w.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double4 operator >>(double4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b), a.w.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static double4 operator >>>(double4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b), a.w.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double4 BitAndNot(this double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector256.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z), a.w.BitAndNot(b.w));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // double4

#region short2

public partial struct short2 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<short2, short2, short2>
    , IShiftOperators<short2, int, short2>
    #endif
{
    [MethodImpl(256 | 512)]
    public static short2 operator ~(short2 a)
    {
        return new(a.x.BitNot(), a.y.BitNot());
    }

    [MethodImpl(256 | 512)]
    public static short2 operator |(short2 a, short2 b)
    {
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
    }

    [MethodImpl(256 | 512)]
    public static short2 operator &(short2 a, short2 b)
    {
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
    }

    [MethodImpl(256 | 512)]
    public static short2 operator ^(short2 a, short2 b)
    {
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y));
    }

    [MethodImpl(256 | 512)]
    public static short2 operator <<(short2 a, int b)
    {
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b));
    }

    [MethodImpl(256 | 512)]
    public static short2 operator >>(short2 a, int b)
    {
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b));
    }

    [MethodImpl(256 | 512)]
    public static short2 operator >>>(short2 a, int b)
    {
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b));
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static short2 BitAndNot(this short2 a, short2 b)
    {
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y));
    }
}

#endregion // short2

#region short3

public partial struct short3 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<short3, short3, short3>
    , IShiftOperators<short3, int, short3>
    #endif
{
    [MethodImpl(256 | 512)]
    public static short3 operator ~(short3 a)
    {
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
    }

    [MethodImpl(256 | 512)]
    public static short3 operator |(short3 a, short3 b)
    {
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
    }

    [MethodImpl(256 | 512)]
    public static short3 operator &(short3 a, short3 b)
    {
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
    }

    [MethodImpl(256 | 512)]
    public static short3 operator ^(short3 a, short3 b)
    {
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z));
    }

    [MethodImpl(256 | 512)]
    public static short3 operator <<(short3 a, int b)
    {
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b));
    }

    [MethodImpl(256 | 512)]
    public static short3 operator >>(short3 a, int b)
    {
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b));
    }

    [MethodImpl(256 | 512)]
    public static short3 operator >>>(short3 a, int b)
    {
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b));
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static short3 BitAndNot(this short3 a, short3 b)
    {
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z));
    }
}

#endregion // short3

#region short4

public partial struct short4 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<short4, short4, short4>
    , IShiftOperators<short4, int, short4>
    #endif
{
    [MethodImpl(256 | 512)]
    public static short4 operator ~(short4 a)
    {
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
    }

    [MethodImpl(256 | 512)]
    public static short4 operator |(short4 a, short4 b)
    {
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
    }

    [MethodImpl(256 | 512)]
    public static short4 operator &(short4 a, short4 b)
    {
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
    }

    [MethodImpl(256 | 512)]
    public static short4 operator ^(short4 a, short4 b)
    {
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z), a.w.BitXor(b.w));
    }

    [MethodImpl(256 | 512)]
    public static short4 operator <<(short4 a, int b)
    {
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b), a.w.BitShiftLeft(b));
    }

    [MethodImpl(256 | 512)]
    public static short4 operator >>(short4 a, int b)
    {
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b), a.w.BitShiftRight(b));
    }

    [MethodImpl(256 | 512)]
    public static short4 operator >>>(short4 a, int b)
    {
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b), a.w.BitShiftRightUnsigned(b));
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static short4 BitAndNot(this short4 a, short4 b)
    {
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z), a.w.BitAndNot(b.w));
    }
}

#endregion // short4

#region ushort2

public partial struct ushort2 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<ushort2, ushort2, ushort2>
    , IShiftOperators<ushort2, int, ushort2>
    #endif
{
    [MethodImpl(256 | 512)]
    public static ushort2 operator ~(ushort2 a)
    {
        return new(a.x.BitNot(), a.y.BitNot());
    }

    [MethodImpl(256 | 512)]
    public static ushort2 operator |(ushort2 a, ushort2 b)
    {
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
    }

    [MethodImpl(256 | 512)]
    public static ushort2 operator &(ushort2 a, ushort2 b)
    {
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
    }

    [MethodImpl(256 | 512)]
    public static ushort2 operator ^(ushort2 a, ushort2 b)
    {
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y));
    }

    [MethodImpl(256 | 512)]
    public static ushort2 operator <<(ushort2 a, int b)
    {
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b));
    }

    [MethodImpl(256 | 512)]
    public static ushort2 operator >>(ushort2 a, int b)
    {
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b));
    }

    [MethodImpl(256 | 512)]
    public static ushort2 operator >>>(ushort2 a, int b)
    {
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b));
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ushort2 BitAndNot(this ushort2 a, ushort2 b)
    {
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y));
    }
}

#endregion // ushort2

#region ushort3

public partial struct ushort3 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<ushort3, ushort3, ushort3>
    , IShiftOperators<ushort3, int, ushort3>
    #endif
{
    [MethodImpl(256 | 512)]
    public static ushort3 operator ~(ushort3 a)
    {
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
    }

    [MethodImpl(256 | 512)]
    public static ushort3 operator |(ushort3 a, ushort3 b)
    {
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
    }

    [MethodImpl(256 | 512)]
    public static ushort3 operator &(ushort3 a, ushort3 b)
    {
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
    }

    [MethodImpl(256 | 512)]
    public static ushort3 operator ^(ushort3 a, ushort3 b)
    {
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z));
    }

    [MethodImpl(256 | 512)]
    public static ushort3 operator <<(ushort3 a, int b)
    {
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b));
    }

    [MethodImpl(256 | 512)]
    public static ushort3 operator >>(ushort3 a, int b)
    {
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b));
    }

    [MethodImpl(256 | 512)]
    public static ushort3 operator >>>(ushort3 a, int b)
    {
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b));
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ushort3 BitAndNot(this ushort3 a, ushort3 b)
    {
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z));
    }
}

#endregion // ushort3

#region ushort4

public partial struct ushort4 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<ushort4, ushort4, ushort4>
    , IShiftOperators<ushort4, int, ushort4>
    #endif
{
    [MethodImpl(256 | 512)]
    public static ushort4 operator ~(ushort4 a)
    {
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
    }

    [MethodImpl(256 | 512)]
    public static ushort4 operator |(ushort4 a, ushort4 b)
    {
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
    }

    [MethodImpl(256 | 512)]
    public static ushort4 operator &(ushort4 a, ushort4 b)
    {
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
    }

    [MethodImpl(256 | 512)]
    public static ushort4 operator ^(ushort4 a, ushort4 b)
    {
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z), a.w.BitXor(b.w));
    }

    [MethodImpl(256 | 512)]
    public static ushort4 operator <<(ushort4 a, int b)
    {
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b), a.w.BitShiftLeft(b));
    }

    [MethodImpl(256 | 512)]
    public static ushort4 operator >>(ushort4 a, int b)
    {
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b), a.w.BitShiftRight(b));
    }

    [MethodImpl(256 | 512)]
    public static ushort4 operator >>>(ushort4 a, int b)
    {
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b), a.w.BitShiftRightUnsigned(b));
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ushort4 BitAndNot(this ushort4 a, ushort4 b)
    {
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z), a.w.BitAndNot(b.w));
    }
}

#endregion // ushort4

#region int2

public partial struct int2 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<int2, int2, int2>
    , IShiftOperators<int2, int, int2>
    #endif
{
    [MethodImpl(256 | 512)]
    public static int2 operator ~(int2 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int2 operator |(int2 a, int2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int2 operator &(int2 a, int2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int2 operator ^(int2 a, int2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int2 operator <<(int2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int2 operator >>(int2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int2 operator >>>(int2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int2 BitAndNot(this int2 a, int2 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector64.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // int2

#region int3

public partial struct int3 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<int3, int3, int3>
    , IShiftOperators<int3, int, int3>
    #endif
{
    [MethodImpl(256 | 512)]
    public static int3 operator ~(int3 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int3 operator |(int3 a, int3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int3 operator &(int3 a, int3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int3 operator ^(int3 a, int3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int3 operator <<(int3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int3 operator >>(int3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int3 operator >>>(int3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int3 BitAndNot(this int3 a, int3 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // int3

#region int4

public partial struct int4 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<int4, int4, int4>
    , IShiftOperators<int4, int, int4>
    #endif
{
    [MethodImpl(256 | 512)]
    public static int4 operator ~(int4 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int4 operator |(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int4 operator &(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int4 operator ^(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z), a.w.BitXor(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int4 operator <<(int4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b), a.w.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int4 operator >>(int4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b), a.w.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static int4 operator >>>(int4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b), a.w.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int4 BitAndNot(this int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z), a.w.BitAndNot(b.w));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // int4

#region uint2

public partial struct uint2 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<uint2, uint2, uint2>
    , IShiftOperators<uint2, int, uint2>
    #endif
{
    [MethodImpl(256 | 512)]
    public static uint2 operator ~(uint2 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint2 operator |(uint2 a, uint2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint2 operator &(uint2 a, uint2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint2 operator ^(uint2 a, uint2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint2 operator <<(uint2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint2 operator >>(uint2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint2 operator >>>(uint2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint2 BitAndNot(this uint2 a, uint2 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector64.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // uint2

#region uint3

public partial struct uint3 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<uint3, uint3, uint3>
    , IShiftOperators<uint3, int, uint3>
    #endif
{
    [MethodImpl(256 | 512)]
    public static uint3 operator ~(uint3 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint3 operator |(uint3 a, uint3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint3 operator &(uint3 a, uint3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint3 operator ^(uint3 a, uint3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint3 operator <<(uint3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint3 operator >>(uint3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint3 operator >>>(uint3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint3 BitAndNot(this uint3 a, uint3 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // uint3

#region uint4

public partial struct uint4 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<uint4, uint4, uint4>
    , IShiftOperators<uint4, int, uint4>
    #endif
{
    [MethodImpl(256 | 512)]
    public static uint4 operator ~(uint4 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint4 operator |(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint4 operator &(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint4 operator ^(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z), a.w.BitXor(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint4 operator <<(uint4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b), a.w.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint4 operator >>(uint4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b), a.w.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static uint4 operator >>>(uint4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b), a.w.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint4 BitAndNot(this uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z), a.w.BitAndNot(b.w));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // uint4

#region long2

public partial struct long2 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<long2, long2, long2>
    , IShiftOperators<long2, int, long2>
    #endif
{
    [MethodImpl(256 | 512)]
    public static long2 operator ~(long2 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long2 operator |(long2 a, long2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long2 operator &(long2 a, long2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long2 operator ^(long2 a, long2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long2 operator <<(long2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long2 operator >>(long2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long2 operator >>>(long2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long2 BitAndNot(this long2 a, long2 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // long2

#region long3

public partial struct long3 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<long3, long3, long3>
    , IShiftOperators<long3, int, long3>
    #endif
{
    [MethodImpl(256 | 512)]
    public static long3 operator ~(long3 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long3 operator |(long3 a, long3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long3 operator &(long3 a, long3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long3 operator ^(long3 a, long3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long3 operator <<(long3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long3 operator >>(long3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long3 operator >>>(long3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long3 BitAndNot(this long3 a, long3 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector256.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // long3

#region long4

public partial struct long4 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<long4, long4, long4>
    , IShiftOperators<long4, int, long4>
    #endif
{
    [MethodImpl(256 | 512)]
    public static long4 operator ~(long4 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long4 operator |(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long4 operator &(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long4 operator ^(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z), a.w.BitXor(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long4 operator <<(long4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b), a.w.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long4 operator >>(long4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b), a.w.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static long4 operator >>>(long4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b), a.w.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long4 BitAndNot(this long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector256.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z), a.w.BitAndNot(b.w));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // long4

#region ulong2

public partial struct ulong2 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<ulong2, ulong2, ulong2>
    , IShiftOperators<ulong2, int, ulong2>
    #endif
{
    [MethodImpl(256 | 512)]
    public static ulong2 operator ~(ulong2 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong2 operator |(ulong2 a, ulong2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong2 operator &(ulong2 a, ulong2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong2 operator ^(ulong2 a, ulong2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong2 operator <<(ulong2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong2 operator >>(ulong2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong2 operator >>>(ulong2 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong2 BitAndNot(this ulong2 a, ulong2 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong2

#region ulong3

public partial struct ulong3 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<ulong3, ulong3, ulong3>
    , IShiftOperators<ulong3, int, ulong3>
    #endif
{
    [MethodImpl(256 | 512)]
    public static ulong3 operator ~(ulong3 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong3 operator |(ulong3 a, ulong3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong3 operator &(ulong3 a, ulong3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong3 operator ^(ulong3 a, ulong3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong3 operator <<(ulong3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong3 operator >>(ulong3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong3 operator >>>(ulong3 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong3 BitAndNot(this ulong3 a, ulong3 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector256.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong3

#region ulong4

public partial struct ulong4 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<ulong4, ulong4, ulong4>
    , IShiftOperators<ulong4, int, ulong4>
    #endif
{
    [MethodImpl(256 | 512)]
    public static ulong4 operator ~(ulong4 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong4 operator |(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong4 operator &(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong4 operator ^(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z), a.w.BitXor(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong4 operator <<(ulong4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector << b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b), a.w.BitShiftLeft(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong4 operator >>(ulong4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b), a.w.BitShiftRight(b));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static ulong4 operator >>>(ulong4 a, int b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector >>> b);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b), a.w.BitShiftRightUnsigned(b));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong4 BitAndNot(this ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector256.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z), a.w.BitAndNot(b.w));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong4

#region half2

public partial struct half2 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<half2, half2, half2>
    , IShiftOperators<half2, int, half2>
    #endif
{
    [MethodImpl(256 | 512)]
    public static half2 operator ~(half2 a)
    {
        return new(a.x.BitNot(), a.y.BitNot());
    }

    [MethodImpl(256 | 512)]
    public static half2 operator |(half2 a, half2 b)
    {
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
    }

    [MethodImpl(256 | 512)]
    public static half2 operator &(half2 a, half2 b)
    {
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
    }

    [MethodImpl(256 | 512)]
    public static half2 operator ^(half2 a, half2 b)
    {
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y));
    }

    [MethodImpl(256 | 512)]
    public static half2 operator <<(half2 a, int b)
    {
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b));
    }

    [MethodImpl(256 | 512)]
    public static half2 operator >>(half2 a, int b)
    {
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b));
    }

    [MethodImpl(256 | 512)]
    public static half2 operator >>>(half2 a, int b)
    {
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b));
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half2 BitAndNot(this half2 a, half2 b)
    {
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y));
    }
}

#endregion // half2

#region half3

public partial struct half3 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<half3, half3, half3>
    , IShiftOperators<half3, int, half3>
    #endif
{
    [MethodImpl(256 | 512)]
    public static half3 operator ~(half3 a)
    {
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
    }

    [MethodImpl(256 | 512)]
    public static half3 operator |(half3 a, half3 b)
    {
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
    }

    [MethodImpl(256 | 512)]
    public static half3 operator &(half3 a, half3 b)
    {
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
    }

    [MethodImpl(256 | 512)]
    public static half3 operator ^(half3 a, half3 b)
    {
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z));
    }

    [MethodImpl(256 | 512)]
    public static half3 operator <<(half3 a, int b)
    {
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b));
    }

    [MethodImpl(256 | 512)]
    public static half3 operator >>(half3 a, int b)
    {
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b));
    }

    [MethodImpl(256 | 512)]
    public static half3 operator >>>(half3 a, int b)
    {
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b));
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half3 BitAndNot(this half3 a, half3 b)
    {
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z));
    }
}

#endregion // half3

#region half4

public partial struct half4 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<half4, half4, half4>
    , IShiftOperators<half4, int, half4>
    #endif
{
    [MethodImpl(256 | 512)]
    public static half4 operator ~(half4 a)
    {
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
    }

    [MethodImpl(256 | 512)]
    public static half4 operator |(half4 a, half4 b)
    {
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
    }

    [MethodImpl(256 | 512)]
    public static half4 operator &(half4 a, half4 b)
    {
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
    }

    [MethodImpl(256 | 512)]
    public static half4 operator ^(half4 a, half4 b)
    {
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z), a.w.BitXor(b.w));
    }

    [MethodImpl(256 | 512)]
    public static half4 operator <<(half4 a, int b)
    {
        return new(a.x.BitShiftLeft(b), a.y.BitShiftLeft(b), a.z.BitShiftLeft(b), a.w.BitShiftLeft(b));
    }

    [MethodImpl(256 | 512)]
    public static half4 operator >>(half4 a, int b)
    {
        return new(a.x.BitShiftRight(b), a.y.BitShiftRight(b), a.z.BitShiftRight(b), a.w.BitShiftRight(b));
    }

    [MethodImpl(256 | 512)]
    public static half4 operator >>>(half4 a, int b)
    {
        return new(a.x.BitShiftRightUnsigned(b), a.y.BitShiftRightUnsigned(b), a.z.BitShiftRightUnsigned(b), a.w.BitShiftRightUnsigned(b));
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half4 BitAndNot(this half4 a, half4 b)
    {
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z), a.w.BitAndNot(b.w));
    }
}

#endregion // half4

#region b16v2

public partial struct b16v2 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<b16v2, b16v2, b16v2>
    #endif
{
    [MethodImpl(256 | 512)]
    public static b16v2 operator ~(b16v2 a)
    {
        return new(a.x.BitNot(), a.y.BitNot());
    }

    [MethodImpl(256 | 512)]
    public static b16v2 operator |(b16v2 a, b16v2 b)
    {
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
    }

    [MethodImpl(256 | 512)]
    public static b16v2 operator &(b16v2 a, b16v2 b)
    {
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
    }

    [MethodImpl(256 | 512)]
    public static b16v2 operator ^(b16v2 a, b16v2 b)
    {
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y));
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b16v2 BitAndNot(this b16v2 a, b16v2 b)
    {
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y));
    }
}

#endregion // b16v2

#region b16v3

public partial struct b16v3 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<b16v3, b16v3, b16v3>
    #endif
{
    [MethodImpl(256 | 512)]
    public static b16v3 operator ~(b16v3 a)
    {
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
    }

    [MethodImpl(256 | 512)]
    public static b16v3 operator |(b16v3 a, b16v3 b)
    {
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
    }

    [MethodImpl(256 | 512)]
    public static b16v3 operator &(b16v3 a, b16v3 b)
    {
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
    }

    [MethodImpl(256 | 512)]
    public static b16v3 operator ^(b16v3 a, b16v3 b)
    {
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z));
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b16v3 BitAndNot(this b16v3 a, b16v3 b)
    {
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z));
    }
}

#endregion // b16v3

#region b16v4

public partial struct b16v4 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<b16v4, b16v4, b16v4>
    #endif
{
    [MethodImpl(256 | 512)]
    public static b16v4 operator ~(b16v4 a)
    {
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
    }

    [MethodImpl(256 | 512)]
    public static b16v4 operator |(b16v4 a, b16v4 b)
    {
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
    }

    [MethodImpl(256 | 512)]
    public static b16v4 operator &(b16v4 a, b16v4 b)
    {
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
    }

    [MethodImpl(256 | 512)]
    public static b16v4 operator ^(b16v4 a, b16v4 b)
    {
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z), a.w.BitXor(b.w));
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b16v4 BitAndNot(this b16v4 a, b16v4 b)
    {
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z), a.w.BitAndNot(b.w));
    }
}

#endregion // b16v4

#region b32v2

public partial struct b32v2 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<b32v2, b32v2, b32v2>
    #endif
{
    [MethodImpl(256 | 512)]
    public static b32v2 operator ~(b32v2 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b32v2 operator |(b32v2 a, b32v2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b32v2 operator &(b32v2 a, b32v2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b32v2 operator ^(b32v2 a, b32v2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b32v2 BitAndNot(this b32v2 a, b32v2 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector64.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b32v2

#region b32v3

public partial struct b32v3 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<b32v3, b32v3, b32v3>
    #endif
{
    [MethodImpl(256 | 512)]
    public static b32v3 operator ~(b32v3 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b32v3 operator |(b32v3 a, b32v3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b32v3 operator &(b32v3 a, b32v3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b32v3 operator ^(b32v3 a, b32v3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b32v3 BitAndNot(this b32v3 a, b32v3 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b32v3

#region b32v4

public partial struct b32v4 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<b32v4, b32v4, b32v4>
    #endif
{
    [MethodImpl(256 | 512)]
    public static b32v4 operator ~(b32v4 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b32v4 operator |(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b32v4 operator &(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b32v4 operator ^(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z), a.w.BitXor(b.w));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b32v4 BitAndNot(this b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z), a.w.BitAndNot(b.w));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b32v4

#region b64v2

public partial struct b64v2 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<b64v2, b64v2, b64v2>
    #endif
{
    [MethodImpl(256 | 512)]
    public static b64v2 operator ~(b64v2 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b64v2 operator |(b64v2 a, b64v2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b64v2 operator &(b64v2 a, b64v2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b64v2 operator ^(b64v2 a, b64v2 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b64v2 BitAndNot(this b64v2 a, b64v2 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b64v2

#region b64v3

public partial struct b64v3 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<b64v3, b64v3, b64v3>
    #endif
{
    [MethodImpl(256 | 512)]
    public static b64v3 operator ~(b64v3 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b64v3 operator |(b64v3 a, b64v3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b64v3 operator &(b64v3 a, b64v3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b64v3 operator ^(b64v3 a, b64v3 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b64v3 BitAndNot(this b64v3 a, b64v3 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector256.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b64v3

#region b64v4

public partial struct b64v4 : IVectorBitops
    #if NET8_0_OR_GREATER
    , IBitwiseOperators<b64v4, b64v4, b64v4>
    #endif
{
    [MethodImpl(256 | 512)]
    public static b64v4 operator ~(b64v4 a)
    {
        #if NET8_0_OR_GREATER
        return new(~a.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitNot(), a.y.BitNot(), a.z.BitNot(), a.w.BitNot());
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b64v4 operator |(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector | b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitOr(b.x), a.y.BitOr(b.y), a.z.BitOr(b.z), a.w.BitOr(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b64v4 operator &(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector & b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAnd(b.x), a.y.BitAnd(b.y), a.z.BitAnd(b.z), a.w.BitAnd(b.w));
        #endif // NET8_0_OR_GREATER
    }

    [MethodImpl(256 | 512)]
    public static b64v4 operator ^(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(a.vector ^ b.vector);
        #else // NET8_0_OR_GREATER
        return new(a.x.BitXor(b.x), a.y.BitXor(b.y), a.z.BitXor(b.z), a.w.BitXor(b.w));
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b64v4 BitAndNot(this b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(Vector256.AndNot(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x.BitAndNot(b.x), a.y.BitAndNot(b.y), a.z.BitAndNot(b.z), a.w.BitAndNot(b.w));
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b64v4

