// generated by template, do not modify manually

namespace Coplt.Mathematics;

#region float2x2

public partial struct float2x2
{
    /// <summary>
    /// Scale a float2x2 by float2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2 operator *(float2x2 a, float2 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float2x2 by float2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2 operator *(float2 a, float2x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float2 mul(this float2x2 a, float2 b)
        => a.c0 * b.xx + a.c1 * b.yy;

    [MethodImpl(256 | 512)]
    public static float2 mul(this float2 a, float2x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // float2x2

#region float2x3

public partial struct float2x3
{
    /// <summary>
    /// Scale a float2x3 by float2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3 operator *(float2x3 a, float2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float2x3 by float2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3 operator *(float2 a, float2x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float2 mul(this float2x3 a, float3 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz;

    [MethodImpl(256 | 512)]
    public static float3 mul(this float2 a, float2x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // float2x3

#region float2x4

public partial struct float2x4
{
    /// <summary>
    /// Scale a float2x4 by float2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4 operator *(float2x4 a, float2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float2x4 by float2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4 operator *(float2 a, float2x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float2 mul(this float2x4 a, float4 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww;

    [MethodImpl(256 | 512)]
    public static float4 mul(this float2 a, float2x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // float2x4

#region float3x2

public partial struct float3x2
{
    /// <summary>
    /// Scale a float3x2 by float3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2 operator *(float3x2 a, float3 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float3x2 by float3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2 operator *(float3 a, float3x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float3 mul(this float3x2 a, float2 b)
        => a.c0 * b.xxx + a.c1 * b.yyy;

    [MethodImpl(256 | 512)]
    public static float2 mul(this float3 a, float3x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // float3x2

#region float3x3

public partial struct float3x3
{
    /// <summary>
    /// Scale a float3x3 by float3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3 operator *(float3x3 a, float3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float3x3 by float3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3 operator *(float3 a, float3x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float3 mul(this float3x3 a, float3 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz;

    [MethodImpl(256 | 512)]
    public static float3 mul(this float3 a, float3x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // float3x3

#region float3x4

public partial struct float3x4
{
    /// <summary>
    /// Scale a float3x4 by float3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4 operator *(float3x4 a, float3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float3x4 by float3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4 operator *(float3 a, float3x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float3 mul(this float3x4 a, float4 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www;

    [MethodImpl(256 | 512)]
    public static float4 mul(this float3 a, float3x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // float3x4

#region float4x2

public partial struct float4x2
{
    /// <summary>
    /// Scale a float4x2 by float4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2 operator *(float4x2 a, float4 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float4x2 by float4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2 operator *(float4 a, float4x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float4 mul(this float4x2 a, float2 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy;

    [MethodImpl(256 | 512)]
    public static float2 mul(this float4 a, float4x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // float4x2

#region float4x3

public partial struct float4x3
{
    /// <summary>
    /// Scale a float4x3 by float4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3 operator *(float4x3 a, float4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float4x3 by float4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3 operator *(float4 a, float4x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float4 mul(this float4x3 a, float3 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz;

    [MethodImpl(256 | 512)]
    public static float3 mul(this float4 a, float4x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // float4x3

#region float4x4

public partial struct float4x4
{
    /// <summary>
    /// Scale a float4x4 by float4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4 operator *(float4x4 a, float4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float4x4 by float4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4 operator *(float4 a, float4x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float4 mul(this float4x4 a, float4 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww;

    [MethodImpl(256 | 512)]
    public static float4 mul(this float4 a, float4x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // float4x4

#region double2x2

public partial struct double2x2
{
    /// <summary>
    /// Scale a double2x2 by double2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2 operator *(double2x2 a, double2 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double2x2 by double2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2 operator *(double2 a, double2x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double2 mul(this double2x2 a, double2 b)
        => a.c0 * b.xx + a.c1 * b.yy;

    [MethodImpl(256 | 512)]
    public static double2 mul(this double2 a, double2x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // double2x2

#region double2x3

public partial struct double2x3
{
    /// <summary>
    /// Scale a double2x3 by double2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3 operator *(double2x3 a, double2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double2x3 by double2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3 operator *(double2 a, double2x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double2 mul(this double2x3 a, double3 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz;

    [MethodImpl(256 | 512)]
    public static double3 mul(this double2 a, double2x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // double2x3

#region double2x4

public partial struct double2x4
{
    /// <summary>
    /// Scale a double2x4 by double2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4 operator *(double2x4 a, double2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double2x4 by double2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4 operator *(double2 a, double2x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double2 mul(this double2x4 a, double4 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww;

    [MethodImpl(256 | 512)]
    public static double4 mul(this double2 a, double2x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // double2x4

#region double3x2

public partial struct double3x2
{
    /// <summary>
    /// Scale a double3x2 by double3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2 operator *(double3x2 a, double3 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double3x2 by double3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2 operator *(double3 a, double3x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double3 mul(this double3x2 a, double2 b)
        => a.c0 * b.xxx + a.c1 * b.yyy;

    [MethodImpl(256 | 512)]
    public static double2 mul(this double3 a, double3x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // double3x2

#region double3x3

public partial struct double3x3
{
    /// <summary>
    /// Scale a double3x3 by double3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3 operator *(double3x3 a, double3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double3x3 by double3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3 operator *(double3 a, double3x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double3 mul(this double3x3 a, double3 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz;

    [MethodImpl(256 | 512)]
    public static double3 mul(this double3 a, double3x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // double3x3

#region double3x4

public partial struct double3x4
{
    /// <summary>
    /// Scale a double3x4 by double3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4 operator *(double3x4 a, double3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double3x4 by double3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4 operator *(double3 a, double3x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double3 mul(this double3x4 a, double4 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www;

    [MethodImpl(256 | 512)]
    public static double4 mul(this double3 a, double3x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // double3x4

#region double4x2

public partial struct double4x2
{
    /// <summary>
    /// Scale a double4x2 by double4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2 operator *(double4x2 a, double4 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double4x2 by double4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2 operator *(double4 a, double4x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double4 mul(this double4x2 a, double2 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy;

    [MethodImpl(256 | 512)]
    public static double2 mul(this double4 a, double4x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // double4x2

#region double4x3

public partial struct double4x3
{
    /// <summary>
    /// Scale a double4x3 by double4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3 operator *(double4x3 a, double4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double4x3 by double4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3 operator *(double4 a, double4x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double4 mul(this double4x3 a, double3 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz;

    [MethodImpl(256 | 512)]
    public static double3 mul(this double4 a, double4x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // double4x3

#region double4x4

public partial struct double4x4
{
    /// <summary>
    /// Scale a double4x4 by double4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4 operator *(double4x4 a, double4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double4x4 by double4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4 operator *(double4 a, double4x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double4 mul(this double4x4 a, double4 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww;

    [MethodImpl(256 | 512)]
    public static double4 mul(this double4 a, double4x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // double4x4

#region short2x2

public partial struct short2x2
{
    /// <summary>
    /// Scale a short2x2 by short2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short2x2 operator *(short2x2 a, short2 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a short2x2 by short2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short2x2 operator *(short2 a, short2x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static short2 mul(this short2x2 a, short2 b)
        => a.c0 * b.xx + a.c1 * b.yy;

    [MethodImpl(256 | 512)]
    public static short2 mul(this short2 a, short2x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // short2x2

#region short2x3

public partial struct short2x3
{
    /// <summary>
    /// Scale a short2x3 by short2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short2x3 operator *(short2x3 a, short2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a short2x3 by short2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short2x3 operator *(short2 a, short2x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static short2 mul(this short2x3 a, short3 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz;

    [MethodImpl(256 | 512)]
    public static short3 mul(this short2 a, short2x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // short2x3

#region short2x4

public partial struct short2x4
{
    /// <summary>
    /// Scale a short2x4 by short2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short2x4 operator *(short2x4 a, short2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a short2x4 by short2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short2x4 operator *(short2 a, short2x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static short2 mul(this short2x4 a, short4 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww;

    [MethodImpl(256 | 512)]
    public static short4 mul(this short2 a, short2x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // short2x4

#region short3x2

public partial struct short3x2
{
    /// <summary>
    /// Scale a short3x2 by short3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short3x2 operator *(short3x2 a, short3 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a short3x2 by short3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short3x2 operator *(short3 a, short3x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static short3 mul(this short3x2 a, short2 b)
        => a.c0 * b.xxx + a.c1 * b.yyy;

    [MethodImpl(256 | 512)]
    public static short2 mul(this short3 a, short3x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // short3x2

#region short3x3

public partial struct short3x3
{
    /// <summary>
    /// Scale a short3x3 by short3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short3x3 operator *(short3x3 a, short3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a short3x3 by short3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short3x3 operator *(short3 a, short3x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static short3 mul(this short3x3 a, short3 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz;

    [MethodImpl(256 | 512)]
    public static short3 mul(this short3 a, short3x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // short3x3

#region short3x4

public partial struct short3x4
{
    /// <summary>
    /// Scale a short3x4 by short3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short3x4 operator *(short3x4 a, short3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a short3x4 by short3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short3x4 operator *(short3 a, short3x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static short3 mul(this short3x4 a, short4 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www;

    [MethodImpl(256 | 512)]
    public static short4 mul(this short3 a, short3x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // short3x4

#region short4x2

public partial struct short4x2
{
    /// <summary>
    /// Scale a short4x2 by short4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4x2 operator *(short4x2 a, short4 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a short4x2 by short4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4x2 operator *(short4 a, short4x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static short4 mul(this short4x2 a, short2 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy;

    [MethodImpl(256 | 512)]
    public static short2 mul(this short4 a, short4x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // short4x2

#region short4x3

public partial struct short4x3
{
    /// <summary>
    /// Scale a short4x3 by short4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4x3 operator *(short4x3 a, short4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a short4x3 by short4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4x3 operator *(short4 a, short4x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static short4 mul(this short4x3 a, short3 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz;

    [MethodImpl(256 | 512)]
    public static short3 mul(this short4 a, short4x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // short4x3

#region short4x4

public partial struct short4x4
{
    /// <summary>
    /// Scale a short4x4 by short4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4x4 operator *(short4x4 a, short4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a short4x4 by short4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4x4 operator *(short4 a, short4x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static short4 mul(this short4x4 a, short4 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww;

    [MethodImpl(256 | 512)]
    public static short4 mul(this short4 a, short4x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // short4x4

#region ushort2x2

public partial struct ushort2x2
{
    /// <summary>
    /// Scale a ushort2x2 by ushort2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort2x2 operator *(ushort2x2 a, ushort2 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ushort2x2 by ushort2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort2x2 operator *(ushort2 a, ushort2x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ushort2 mul(this ushort2x2 a, ushort2 b)
        => a.c0 * b.xx + a.c1 * b.yy;

    [MethodImpl(256 | 512)]
    public static ushort2 mul(this ushort2 a, ushort2x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // ushort2x2

#region ushort2x3

public partial struct ushort2x3
{
    /// <summary>
    /// Scale a ushort2x3 by ushort2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort2x3 operator *(ushort2x3 a, ushort2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ushort2x3 by ushort2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort2x3 operator *(ushort2 a, ushort2x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ushort2 mul(this ushort2x3 a, ushort3 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz;

    [MethodImpl(256 | 512)]
    public static ushort3 mul(this ushort2 a, ushort2x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // ushort2x3

#region ushort2x4

public partial struct ushort2x4
{
    /// <summary>
    /// Scale a ushort2x4 by ushort2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort2x4 operator *(ushort2x4 a, ushort2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ushort2x4 by ushort2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort2x4 operator *(ushort2 a, ushort2x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ushort2 mul(this ushort2x4 a, ushort4 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww;

    [MethodImpl(256 | 512)]
    public static ushort4 mul(this ushort2 a, ushort2x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // ushort2x4

#region ushort3x2

public partial struct ushort3x2
{
    /// <summary>
    /// Scale a ushort3x2 by ushort3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort3x2 operator *(ushort3x2 a, ushort3 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ushort3x2 by ushort3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort3x2 operator *(ushort3 a, ushort3x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ushort3 mul(this ushort3x2 a, ushort2 b)
        => a.c0 * b.xxx + a.c1 * b.yyy;

    [MethodImpl(256 | 512)]
    public static ushort2 mul(this ushort3 a, ushort3x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // ushort3x2

#region ushort3x3

public partial struct ushort3x3
{
    /// <summary>
    /// Scale a ushort3x3 by ushort3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort3x3 operator *(ushort3x3 a, ushort3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ushort3x3 by ushort3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort3x3 operator *(ushort3 a, ushort3x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ushort3 mul(this ushort3x3 a, ushort3 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz;

    [MethodImpl(256 | 512)]
    public static ushort3 mul(this ushort3 a, ushort3x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // ushort3x3

#region ushort3x4

public partial struct ushort3x4
{
    /// <summary>
    /// Scale a ushort3x4 by ushort3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort3x4 operator *(ushort3x4 a, ushort3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ushort3x4 by ushort3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort3x4 operator *(ushort3 a, ushort3x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ushort3 mul(this ushort3x4 a, ushort4 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www;

    [MethodImpl(256 | 512)]
    public static ushort4 mul(this ushort3 a, ushort3x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // ushort3x4

#region ushort4x2

public partial struct ushort4x2
{
    /// <summary>
    /// Scale a ushort4x2 by ushort4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4x2 operator *(ushort4x2 a, ushort4 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ushort4x2 by ushort4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4x2 operator *(ushort4 a, ushort4x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ushort4 mul(this ushort4x2 a, ushort2 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy;

    [MethodImpl(256 | 512)]
    public static ushort2 mul(this ushort4 a, ushort4x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // ushort4x2

#region ushort4x3

public partial struct ushort4x3
{
    /// <summary>
    /// Scale a ushort4x3 by ushort4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4x3 operator *(ushort4x3 a, ushort4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ushort4x3 by ushort4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4x3 operator *(ushort4 a, ushort4x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ushort4 mul(this ushort4x3 a, ushort3 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz;

    [MethodImpl(256 | 512)]
    public static ushort3 mul(this ushort4 a, ushort4x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // ushort4x3

#region ushort4x4

public partial struct ushort4x4
{
    /// <summary>
    /// Scale a ushort4x4 by ushort4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4x4 operator *(ushort4x4 a, ushort4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ushort4x4 by ushort4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4x4 operator *(ushort4 a, ushort4x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ushort4 mul(this ushort4x4 a, ushort4 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww;

    [MethodImpl(256 | 512)]
    public static ushort4 mul(this ushort4 a, ushort4x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // ushort4x4

#region int2x2

public partial struct int2x2
{
    /// <summary>
    /// Scale a int2x2 by int2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2 operator *(int2x2 a, int2 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int2x2 by int2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2 operator *(int2 a, int2x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int2 mul(this int2x2 a, int2 b)
        => a.c0 * b.xx + a.c1 * b.yy;

    [MethodImpl(256 | 512)]
    public static int2 mul(this int2 a, int2x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // int2x2

#region int2x3

public partial struct int2x3
{
    /// <summary>
    /// Scale a int2x3 by int2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3 operator *(int2x3 a, int2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int2x3 by int2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3 operator *(int2 a, int2x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int2 mul(this int2x3 a, int3 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz;

    [MethodImpl(256 | 512)]
    public static int3 mul(this int2 a, int2x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // int2x3

#region int2x4

public partial struct int2x4
{
    /// <summary>
    /// Scale a int2x4 by int2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4 operator *(int2x4 a, int2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int2x4 by int2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4 operator *(int2 a, int2x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int2 mul(this int2x4 a, int4 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww;

    [MethodImpl(256 | 512)]
    public static int4 mul(this int2 a, int2x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // int2x4

#region int3x2

public partial struct int3x2
{
    /// <summary>
    /// Scale a int3x2 by int3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2 operator *(int3x2 a, int3 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int3x2 by int3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2 operator *(int3 a, int3x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int3 mul(this int3x2 a, int2 b)
        => a.c0 * b.xxx + a.c1 * b.yyy;

    [MethodImpl(256 | 512)]
    public static int2 mul(this int3 a, int3x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // int3x2

#region int3x3

public partial struct int3x3
{
    /// <summary>
    /// Scale a int3x3 by int3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3 operator *(int3x3 a, int3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int3x3 by int3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3 operator *(int3 a, int3x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int3 mul(this int3x3 a, int3 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz;

    [MethodImpl(256 | 512)]
    public static int3 mul(this int3 a, int3x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // int3x3

#region int3x4

public partial struct int3x4
{
    /// <summary>
    /// Scale a int3x4 by int3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4 operator *(int3x4 a, int3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int3x4 by int3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4 operator *(int3 a, int3x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int3 mul(this int3x4 a, int4 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www;

    [MethodImpl(256 | 512)]
    public static int4 mul(this int3 a, int3x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // int3x4

#region int4x2

public partial struct int4x2
{
    /// <summary>
    /// Scale a int4x2 by int4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2 operator *(int4x2 a, int4 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int4x2 by int4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2 operator *(int4 a, int4x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int4 mul(this int4x2 a, int2 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy;

    [MethodImpl(256 | 512)]
    public static int2 mul(this int4 a, int4x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // int4x2

#region int4x3

public partial struct int4x3
{
    /// <summary>
    /// Scale a int4x3 by int4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3 operator *(int4x3 a, int4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int4x3 by int4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3 operator *(int4 a, int4x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int4 mul(this int4x3 a, int3 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz;

    [MethodImpl(256 | 512)]
    public static int3 mul(this int4 a, int4x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // int4x3

#region int4x4

public partial struct int4x4
{
    /// <summary>
    /// Scale a int4x4 by int4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4 operator *(int4x4 a, int4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int4x4 by int4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4 operator *(int4 a, int4x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int4 mul(this int4x4 a, int4 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww;

    [MethodImpl(256 | 512)]
    public static int4 mul(this int4 a, int4x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // int4x4

#region uint2x2

public partial struct uint2x2
{
    /// <summary>
    /// Scale a uint2x2 by uint2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2 operator *(uint2x2 a, uint2 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint2x2 by uint2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2 operator *(uint2 a, uint2x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint2 mul(this uint2x2 a, uint2 b)
        => a.c0 * b.xx + a.c1 * b.yy;

    [MethodImpl(256 | 512)]
    public static uint2 mul(this uint2 a, uint2x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // uint2x2

#region uint2x3

public partial struct uint2x3
{
    /// <summary>
    /// Scale a uint2x3 by uint2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3 operator *(uint2x3 a, uint2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint2x3 by uint2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3 operator *(uint2 a, uint2x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint2 mul(this uint2x3 a, uint3 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz;

    [MethodImpl(256 | 512)]
    public static uint3 mul(this uint2 a, uint2x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // uint2x3

#region uint2x4

public partial struct uint2x4
{
    /// <summary>
    /// Scale a uint2x4 by uint2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4 operator *(uint2x4 a, uint2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint2x4 by uint2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4 operator *(uint2 a, uint2x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint2 mul(this uint2x4 a, uint4 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww;

    [MethodImpl(256 | 512)]
    public static uint4 mul(this uint2 a, uint2x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // uint2x4

#region uint3x2

public partial struct uint3x2
{
    /// <summary>
    /// Scale a uint3x2 by uint3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2 operator *(uint3x2 a, uint3 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint3x2 by uint3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2 operator *(uint3 a, uint3x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint3 mul(this uint3x2 a, uint2 b)
        => a.c0 * b.xxx + a.c1 * b.yyy;

    [MethodImpl(256 | 512)]
    public static uint2 mul(this uint3 a, uint3x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // uint3x2

#region uint3x3

public partial struct uint3x3
{
    /// <summary>
    /// Scale a uint3x3 by uint3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3 operator *(uint3x3 a, uint3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint3x3 by uint3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3 operator *(uint3 a, uint3x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint3 mul(this uint3x3 a, uint3 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz;

    [MethodImpl(256 | 512)]
    public static uint3 mul(this uint3 a, uint3x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // uint3x3

#region uint3x4

public partial struct uint3x4
{
    /// <summary>
    /// Scale a uint3x4 by uint3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4 operator *(uint3x4 a, uint3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint3x4 by uint3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4 operator *(uint3 a, uint3x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint3 mul(this uint3x4 a, uint4 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www;

    [MethodImpl(256 | 512)]
    public static uint4 mul(this uint3 a, uint3x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // uint3x4

#region uint4x2

public partial struct uint4x2
{
    /// <summary>
    /// Scale a uint4x2 by uint4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2 operator *(uint4x2 a, uint4 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint4x2 by uint4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2 operator *(uint4 a, uint4x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint4 mul(this uint4x2 a, uint2 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy;

    [MethodImpl(256 | 512)]
    public static uint2 mul(this uint4 a, uint4x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // uint4x2

#region uint4x3

public partial struct uint4x3
{
    /// <summary>
    /// Scale a uint4x3 by uint4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3 operator *(uint4x3 a, uint4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint4x3 by uint4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3 operator *(uint4 a, uint4x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint4 mul(this uint4x3 a, uint3 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz;

    [MethodImpl(256 | 512)]
    public static uint3 mul(this uint4 a, uint4x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // uint4x3

#region uint4x4

public partial struct uint4x4
{
    /// <summary>
    /// Scale a uint4x4 by uint4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4 operator *(uint4x4 a, uint4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint4x4 by uint4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4 operator *(uint4 a, uint4x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint4 mul(this uint4x4 a, uint4 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww;

    [MethodImpl(256 | 512)]
    public static uint4 mul(this uint4 a, uint4x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // uint4x4

#region long2x2

public partial struct long2x2
{
    /// <summary>
    /// Scale a long2x2 by long2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2 operator *(long2x2 a, long2 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long2x2 by long2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2 operator *(long2 a, long2x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long2 mul(this long2x2 a, long2 b)
        => a.c0 * b.xx + a.c1 * b.yy;

    [MethodImpl(256 | 512)]
    public static long2 mul(this long2 a, long2x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // long2x2

#region long2x3

public partial struct long2x3
{
    /// <summary>
    /// Scale a long2x3 by long2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3 operator *(long2x3 a, long2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long2x3 by long2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3 operator *(long2 a, long2x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long2 mul(this long2x3 a, long3 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz;

    [MethodImpl(256 | 512)]
    public static long3 mul(this long2 a, long2x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // long2x3

#region long2x4

public partial struct long2x4
{
    /// <summary>
    /// Scale a long2x4 by long2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4 operator *(long2x4 a, long2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long2x4 by long2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4 operator *(long2 a, long2x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long2 mul(this long2x4 a, long4 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww;

    [MethodImpl(256 | 512)]
    public static long4 mul(this long2 a, long2x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // long2x4

#region long3x2

public partial struct long3x2
{
    /// <summary>
    /// Scale a long3x2 by long3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2 operator *(long3x2 a, long3 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long3x2 by long3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2 operator *(long3 a, long3x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long3 mul(this long3x2 a, long2 b)
        => a.c0 * b.xxx + a.c1 * b.yyy;

    [MethodImpl(256 | 512)]
    public static long2 mul(this long3 a, long3x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // long3x2

#region long3x3

public partial struct long3x3
{
    /// <summary>
    /// Scale a long3x3 by long3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3 operator *(long3x3 a, long3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long3x3 by long3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3 operator *(long3 a, long3x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long3 mul(this long3x3 a, long3 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz;

    [MethodImpl(256 | 512)]
    public static long3 mul(this long3 a, long3x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // long3x3

#region long3x4

public partial struct long3x4
{
    /// <summary>
    /// Scale a long3x4 by long3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4 operator *(long3x4 a, long3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long3x4 by long3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4 operator *(long3 a, long3x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long3 mul(this long3x4 a, long4 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www;

    [MethodImpl(256 | 512)]
    public static long4 mul(this long3 a, long3x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // long3x4

#region long4x2

public partial struct long4x2
{
    /// <summary>
    /// Scale a long4x2 by long4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2 operator *(long4x2 a, long4 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long4x2 by long4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2 operator *(long4 a, long4x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long4 mul(this long4x2 a, long2 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy;

    [MethodImpl(256 | 512)]
    public static long2 mul(this long4 a, long4x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // long4x2

#region long4x3

public partial struct long4x3
{
    /// <summary>
    /// Scale a long4x3 by long4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3 operator *(long4x3 a, long4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long4x3 by long4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3 operator *(long4 a, long4x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long4 mul(this long4x3 a, long3 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz;

    [MethodImpl(256 | 512)]
    public static long3 mul(this long4 a, long4x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // long4x3

#region long4x4

public partial struct long4x4
{
    /// <summary>
    /// Scale a long4x4 by long4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4 operator *(long4x4 a, long4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long4x4 by long4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4 operator *(long4 a, long4x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long4 mul(this long4x4 a, long4 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww;

    [MethodImpl(256 | 512)]
    public static long4 mul(this long4 a, long4x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // long4x4

#region ulong2x2

public partial struct ulong2x2
{
    /// <summary>
    /// Scale a ulong2x2 by ulong2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2 operator *(ulong2x2 a, ulong2 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong2x2 by ulong2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2 operator *(ulong2 a, ulong2x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong2 mul(this ulong2x2 a, ulong2 b)
        => a.c0 * b.xx + a.c1 * b.yy;

    [MethodImpl(256 | 512)]
    public static ulong2 mul(this ulong2 a, ulong2x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // ulong2x2

#region ulong2x3

public partial struct ulong2x3
{
    /// <summary>
    /// Scale a ulong2x3 by ulong2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3 operator *(ulong2x3 a, ulong2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong2x3 by ulong2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3 operator *(ulong2 a, ulong2x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong2 mul(this ulong2x3 a, ulong3 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz;

    [MethodImpl(256 | 512)]
    public static ulong3 mul(this ulong2 a, ulong2x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // ulong2x3

#region ulong2x4

public partial struct ulong2x4
{
    /// <summary>
    /// Scale a ulong2x4 by ulong2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4 operator *(ulong2x4 a, ulong2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong2x4 by ulong2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4 operator *(ulong2 a, ulong2x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong2 mul(this ulong2x4 a, ulong4 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww;

    [MethodImpl(256 | 512)]
    public static ulong4 mul(this ulong2 a, ulong2x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // ulong2x4

#region ulong3x2

public partial struct ulong3x2
{
    /// <summary>
    /// Scale a ulong3x2 by ulong3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2 operator *(ulong3x2 a, ulong3 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong3x2 by ulong3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2 operator *(ulong3 a, ulong3x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong3 mul(this ulong3x2 a, ulong2 b)
        => a.c0 * b.xxx + a.c1 * b.yyy;

    [MethodImpl(256 | 512)]
    public static ulong2 mul(this ulong3 a, ulong3x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // ulong3x2

#region ulong3x3

public partial struct ulong3x3
{
    /// <summary>
    /// Scale a ulong3x3 by ulong3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3 operator *(ulong3x3 a, ulong3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong3x3 by ulong3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3 operator *(ulong3 a, ulong3x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong3 mul(this ulong3x3 a, ulong3 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz;

    [MethodImpl(256 | 512)]
    public static ulong3 mul(this ulong3 a, ulong3x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // ulong3x3

#region ulong3x4

public partial struct ulong3x4
{
    /// <summary>
    /// Scale a ulong3x4 by ulong3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4 operator *(ulong3x4 a, ulong3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong3x4 by ulong3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4 operator *(ulong3 a, ulong3x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong3 mul(this ulong3x4 a, ulong4 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www;

    [MethodImpl(256 | 512)]
    public static ulong4 mul(this ulong3 a, ulong3x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // ulong3x4

#region ulong4x2

public partial struct ulong4x2
{
    /// <summary>
    /// Scale a ulong4x2 by ulong4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2 operator *(ulong4x2 a, ulong4 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong4x2 by ulong4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2 operator *(ulong4 a, ulong4x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong4 mul(this ulong4x2 a, ulong2 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy;

    [MethodImpl(256 | 512)]
    public static ulong2 mul(this ulong4 a, ulong4x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // ulong4x2

#region ulong4x3

public partial struct ulong4x3
{
    /// <summary>
    /// Scale a ulong4x3 by ulong4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3 operator *(ulong4x3 a, ulong4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong4x3 by ulong4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3 operator *(ulong4 a, ulong4x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong4 mul(this ulong4x3 a, ulong3 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz;

    [MethodImpl(256 | 512)]
    public static ulong3 mul(this ulong4 a, ulong4x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // ulong4x3

#region ulong4x4

public partial struct ulong4x4
{
    /// <summary>
    /// Scale a ulong4x4 by ulong4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4 operator *(ulong4x4 a, ulong4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong4x4 by ulong4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4 operator *(ulong4 a, ulong4x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong4 mul(this ulong4x4 a, ulong4 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww;

    [MethodImpl(256 | 512)]
    public static ulong4 mul(this ulong4 a, ulong4x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // ulong4x4

#region decimal2x2

public partial struct decimal2x2
{
    /// <summary>
    /// Scale a decimal2x2 by decimal2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal2x2 operator *(decimal2x2 a, decimal2 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a decimal2x2 by decimal2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal2x2 operator *(decimal2 a, decimal2x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal2 mul(this decimal2x2 a, decimal2 b)
        => a.c0 * b.xx + a.c1 * b.yy;

    [MethodImpl(256 | 512)]
    public static decimal2 mul(this decimal2 a, decimal2x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // decimal2x2

#region decimal2x3

public partial struct decimal2x3
{
    /// <summary>
    /// Scale a decimal2x3 by decimal2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal2x3 operator *(decimal2x3 a, decimal2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a decimal2x3 by decimal2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal2x3 operator *(decimal2 a, decimal2x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal2 mul(this decimal2x3 a, decimal3 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz;

    [MethodImpl(256 | 512)]
    public static decimal3 mul(this decimal2 a, decimal2x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // decimal2x3

#region decimal2x4

public partial struct decimal2x4
{
    /// <summary>
    /// Scale a decimal2x4 by decimal2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal2x4 operator *(decimal2x4 a, decimal2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a decimal2x4 by decimal2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal2x4 operator *(decimal2 a, decimal2x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal2 mul(this decimal2x4 a, decimal4 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww;

    [MethodImpl(256 | 512)]
    public static decimal4 mul(this decimal2 a, decimal2x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // decimal2x4

#region decimal3x2

public partial struct decimal3x2
{
    /// <summary>
    /// Scale a decimal3x2 by decimal3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal3x2 operator *(decimal3x2 a, decimal3 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a decimal3x2 by decimal3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal3x2 operator *(decimal3 a, decimal3x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal3 mul(this decimal3x2 a, decimal2 b)
        => a.c0 * b.xxx + a.c1 * b.yyy;

    [MethodImpl(256 | 512)]
    public static decimal2 mul(this decimal3 a, decimal3x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // decimal3x2

#region decimal3x3

public partial struct decimal3x3
{
    /// <summary>
    /// Scale a decimal3x3 by decimal3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal3x3 operator *(decimal3x3 a, decimal3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a decimal3x3 by decimal3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal3x3 operator *(decimal3 a, decimal3x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal3 mul(this decimal3x3 a, decimal3 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz;

    [MethodImpl(256 | 512)]
    public static decimal3 mul(this decimal3 a, decimal3x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // decimal3x3

#region decimal3x4

public partial struct decimal3x4
{
    /// <summary>
    /// Scale a decimal3x4 by decimal3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal3x4 operator *(decimal3x4 a, decimal3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a decimal3x4 by decimal3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal3x4 operator *(decimal3 a, decimal3x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal3 mul(this decimal3x4 a, decimal4 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www;

    [MethodImpl(256 | 512)]
    public static decimal4 mul(this decimal3 a, decimal3x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // decimal3x4

#region decimal4x2

public partial struct decimal4x2
{
    /// <summary>
    /// Scale a decimal4x2 by decimal4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4x2 operator *(decimal4x2 a, decimal4 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a decimal4x2 by decimal4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4x2 operator *(decimal4 a, decimal4x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal4 mul(this decimal4x2 a, decimal2 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy;

    [MethodImpl(256 | 512)]
    public static decimal2 mul(this decimal4 a, decimal4x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // decimal4x2

#region decimal4x3

public partial struct decimal4x3
{
    /// <summary>
    /// Scale a decimal4x3 by decimal4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4x3 operator *(decimal4x3 a, decimal4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a decimal4x3 by decimal4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4x3 operator *(decimal4 a, decimal4x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal4 mul(this decimal4x3 a, decimal3 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz;

    [MethodImpl(256 | 512)]
    public static decimal3 mul(this decimal4 a, decimal4x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // decimal4x3

#region decimal4x4

public partial struct decimal4x4
{
    /// <summary>
    /// Scale a decimal4x4 by decimal4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4x4 operator *(decimal4x4 a, decimal4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a decimal4x4 by decimal4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4x4 operator *(decimal4 a, decimal4x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal4 mul(this decimal4x4 a, decimal4 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww;

    [MethodImpl(256 | 512)]
    public static decimal4 mul(this decimal4 a, decimal4x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // decimal4x4

#region half2x2

public partial struct half2x2
{
    /// <summary>
    /// Scale a half2x2 by half2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half2x2 operator *(half2x2 a, half2 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a half2x2 by half2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half2x2 operator *(half2 a, half2x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half2 mul(this half2x2 a, half2 b)
        => a.c0 * b.xx + a.c1 * b.yy;

    [MethodImpl(256 | 512)]
    public static half2 mul(this half2 a, half2x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // half2x2

#region half2x3

public partial struct half2x3
{
    /// <summary>
    /// Scale a half2x3 by half2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half2x3 operator *(half2x3 a, half2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a half2x3 by half2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half2x3 operator *(half2 a, half2x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half2 mul(this half2x3 a, half3 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz;

    [MethodImpl(256 | 512)]
    public static half3 mul(this half2 a, half2x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // half2x3

#region half2x4

public partial struct half2x4
{
    /// <summary>
    /// Scale a half2x4 by half2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half2x4 operator *(half2x4 a, half2 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a half2x4 by half2
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half2x4 operator *(half2 a, half2x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half2 mul(this half2x4 a, half4 b)
        => a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww;

    [MethodImpl(256 | 512)]
    public static half4 mul(this half2 a, half2x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // half2x4

#region half3x2

public partial struct half3x2
{
    /// <summary>
    /// Scale a half3x2 by half3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half3x2 operator *(half3x2 a, half3 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a half3x2 by half3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half3x2 operator *(half3 a, half3x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half3 mul(this half3x2 a, half2 b)
        => a.c0 * b.xxx + a.c1 * b.yyy;

    [MethodImpl(256 | 512)]
    public static half2 mul(this half3 a, half3x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // half3x2

#region half3x3

public partial struct half3x3
{
    /// <summary>
    /// Scale a half3x3 by half3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half3x3 operator *(half3x3 a, half3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a half3x3 by half3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half3x3 operator *(half3 a, half3x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half3 mul(this half3x3 a, half3 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz;

    [MethodImpl(256 | 512)]
    public static half3 mul(this half3 a, half3x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // half3x3

#region half3x4

public partial struct half3x4
{
    /// <summary>
    /// Scale a half3x4 by half3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half3x4 operator *(half3x4 a, half3 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a half3x4 by half3
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half3x4 operator *(half3 a, half3x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half3 mul(this half3x4 a, half4 b)
        => a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www;

    [MethodImpl(256 | 512)]
    public static half4 mul(this half3 a, half3x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // half3x4

#region half4x2

public partial struct half4x2
{
    /// <summary>
    /// Scale a half4x2 by half4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4x2 operator *(half4x2 a, half4 b) 
        => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a half4x2 by half4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4x2 operator *(half4 a, half4x2 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half4 mul(this half4x2 a, half2 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy;

    [MethodImpl(256 | 512)]
    public static half2 mul(this half4 a, half4x2 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // half4x2

#region half4x3

public partial struct half4x3
{
    /// <summary>
    /// Scale a half4x3 by half4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4x3 operator *(half4x3 a, half4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a half4x3 by half4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4x3 operator *(half4 a, half4x3 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half4 mul(this half4x3 a, half3 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz;

    [MethodImpl(256 | 512)]
    public static half3 mul(this half4 a, half4x3 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // half4x3

#region half4x4

public partial struct half4x4
{
    /// <summary>
    /// Scale a half4x4 by half4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4x4 operator *(half4x4 a, half4 b) 
        => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a half4x4 by half4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4x4 operator *(half4 a, half4x4 b) => b * a;
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half4 mul(this half4x4 a, half4 b)
        => a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww;

    [MethodImpl(256 | 512)]
    public static half4 mul(this half4 a, half4x4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // half4x4
