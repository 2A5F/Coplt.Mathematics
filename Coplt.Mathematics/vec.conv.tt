<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

using System;
#if NET8_0_OR_GREATER
using System.Numerics;
using System.Runtime.Intrinsics;
#endif
using System.Runtime.CompilerServices;
using half = System.Half;

namespace Coplt.Mathematics;
<#
    var TypMap = Typ.Typs.ToDictionary(a => a.name);

    foreach (var typ in Typ.Typs)
    {
        for (var i = 2; i <= 4; i++)
        {
            var typeName = $"{typ.name}{i}";
            var type = typ.name;

            var byteSize = typ.size * (i is 3 ? 4 : i);
            var bitSize = 8 * byteSize;

            if (!Typ.ExplicitConverts.TryGetValue(typ.name, out var exp)) exp = [];
            if (!Typ.ImplicitConverts.TryGetValue(typ.name, out var imp)) imp = [];

            if (exp.Length + imp.Length == 0) continue;

            var convs = exp.AsParallel().AsOrdered().Select(a => (c:"explicit", t:TypMap.TryGetValue(a, out var b) ? b : default))
                .Concat(imp.AsParallel().AsOrdered().Select(a => (c:"implicit", t:TypMap.TryGetValue(a, out var b) ? b : default)))
                .Where(a => a.t.name != null).ToArray();
#>

#region <#= typeName #>

public partial struct <#= typeName #> 
{
<#
            foreach (var (ck, tar) in convs)
            {
                var tarName = $"{tar.name}{i}";

                var cast = $"({tar.name})";

                var tarByteSize = tar.size * (i is 3 ? 4 : i);
                var tarBitSize = 8 * tarByteSize;
#>
    [MethodImpl(256 | 512)]
    public static <#= ck #> operator <#= tarName #>(<#= typeName #> self)
    {
<#
                if (typ.simd && tar.simd)
                {
#>
        #if NET8_0_OR_GREATER
<#
                    if (bitSize == tarBitSize)
                    {
                        if (typ.f || tar.f)
                        {
#>
        return new(Vector<#= bitSize #>.ConvertTo<#= tar.Type #>(self.vector));
<#
                        }
                        else
                        {
#>
        return new(self.vector.As<#= tar.Type #>());
<#
                        }
                    }
                    else if (bitSize < tarBitSize)
                    {
#>
        var (a, b) = Vector<#= bitSize #>.Widen(self.vector);
<#
                        if (typ.f && tar.f)
                        {
#>
        return new(Vector<#= tarBitSize #>.Create(a, b));
<#
                        }
                        else if (typ.f || tar.f)
                        {
#>
        return new(Vector<#= tarBitSize #>.ConvertTo<#= tar.Type #>(Vector<#= tarBitSize #>.Create(a, b)));
<#
                        }
                        else
                        {
#>
        return new(Vector<#= tarBitSize #>.Create(a, b).As<#= tar.Type #>());
<#
                        }
                    }
                    else
                    {
#>
        var v = Vector<#= tarBitSize #>.Narrow(self.vector.GetLower(), self.vector.GetUpper());
<#
                        if (typ.f && tar.f)
                        {
#>
        return new(v);
<#
                        }
                        else if (typ.f || tar.f)
                        {
#>
        return new(Vector<#= tarBitSize #>.ConvertTo<#= tar.Type #>(v));
<#
                        }
                        else
                        {
#>
        return new(v.As<#= tar.Type #>());
<#
                        }
                    }
#>
        #else // NET8_0_OR_GREATER
<#
                }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"{cast}self.{Typ.xyzw[n]}")) #>);
<#
                if (typ.simd && tar.simd)
                {
#>
        #endif // NET8_0_OR_GREATER
<#
                }
#>
    }
<#
            }
#>
}

#endregion // <#= typeName #>
<#
        }
    }
#>
