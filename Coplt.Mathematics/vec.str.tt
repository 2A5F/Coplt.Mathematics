<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        for (var i = 2; i <= 4; i++)
        {
            var typeName = $"{typ.name}{i}";

            var byteSize = typ.size * (i is 3 ? 4 : i);
            var bitSize = 8 * byteSize;

            var format = string.Join(", ", Enumerable.Range(0, i).Select(n => $"{{{Typ.xyzw[n]}}}"));
            var format2 = !typ.formattable
                ? format
                : string.Join(", ", Enumerable.Range(0, i).Select(n => $"{{{Typ.xyzw[n]}.ToString(format, formatProvider)}}"));
#>

#region <#= typeName #>

public partial struct <#= typeName #> : IFormattable
    #if NET8_0_OR_GREATER
    , ISpanFormattable
    , IUtf8SpanFormattable
    #endif
{
    public override string ToString() => $"<#= typeName #>(<#= format #>)";

    public string ToString(string? format, IFormatProvider? formatProvider) => $"<#= typeName #>(<#= format2 #>)";

    public bool TryFormat(Span<char> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "<#= typeName #>(")) return false;
<#
            for (var n = 0; n < i; n++)
            {
                if (n != 0)
                {
#>
        if (!TryFormatPart(ref dst, ref nc, ", ")) return false;
<#
                }
                var comp = Typ.xyzw[n];
#>
        if (!TryFormatPart(ref dst, ref nc, <#= comp #>, format, provider)) return false;
<#
            }
#>
        if (!TryFormatPart(ref dst, ref nc, ")")) return false;
        return true;
    }
<#
            if (typ.formattable)
            {
#>

    #if NET8_0_OR_GREATER
    public bool TryFormat(Span<byte> dst, out int nc, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        nc = 0;
        if (!TryFormatPart(ref dst, ref nc, "<#= typeName #>("u8)) return false;
<#
            for (var n = 0; n < i; n++)
            {
                if (n != 0)
                {
#>
        if (!TryFormatPart(ref dst, ref nc, ", "u8)) return false;
<#
                }
                var comp = Typ.xyzw[n];
#>
        if (!TryFormatPart(ref dst, ref nc, <#= comp #>, format, provider)) return false;
<#
            }
#>
        if (!TryFormatPart(ref dst, ref nc, ")"u8)) return false;
        return true;
    }
    #endif
<#
            }
#>
}

#endregion // <#= typeName #>
<#
        }
    }
#>
