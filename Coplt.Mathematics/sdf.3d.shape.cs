// generated by template, do not modify manually

namespace Coplt.Mathematics.Sdf;

#region float

[method: MethodImpl(256 | 512)]
public readonly partial record struct revolution_2d_to_3d<S>(S shape, float o) : ISdfShape3d<float, float3> 
    where S : ISdfShape2d<float, float2>
{
    public readonly S shape = shape;
    public readonly float o = o;

    [MethodImpl(256 | 512)]
    public float calc(float3 target) => shape.calc(new(target.xz.length() - o, target.y));
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct extrusion_2d_to_3d<S>(S shape, float h) : ISdfShape3d<float, float3> 
    where S : ISdfShape2d<float, float2>
{
    public readonly S shape = shape;
    public readonly float h = h;

    [MethodImpl(256 | 512)]
    public float calc(float3 target)
    {
        var d = shape.calc(target.xy);
        var w = new float2(d, target.z.abs() - h);
        return w.cmax().min(0.0f) + w.max(0.0f).length();
    }
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct round3d<S>(S shape, float radius) : ISdfShape3d<float, float3> 
    where S : ISdfShape3d<float, float3>
{
    public readonly S shape = shape;
    public readonly float radius = radius;

    [MethodImpl(256 | 512)]
    public float calc(float3 target) => shape.calc(target) - radius;
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct onion3d<S>(S shape, float radius) : ISdfShape3d<float, float3> 
    where S : ISdfShape3d<float, float3>
{
    public readonly S shape = shape;
    public readonly float radius = radius;

    [MethodImpl(256 | 512)]
    public float calc(float3 target) => shape.calc(target).abs() - radius;
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct point3d(float3 center) : ISdfShape3d<float, float3>
{
    public readonly float3 center = center;

    [MethodImpl(256 | 512)]
    public float calc(float3 target) => sdf.sphere(target, center, 0);
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct sphere(float3 center, float radius) : ISdfShape3d<float, float3>
{
    public readonly float3 center = center;
    public readonly float radius = radius;

    [MethodImpl(256 | 512)]
    public float calc(float3 target) => sdf.sphere(target, center, radius);
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct capsule(float3 a, float3 b, float radius) : ISdfShape3d<float, float3>
{
    public readonly float3 a = a;
    public readonly float3 b = b;
    public readonly float radius = radius;

    [MethodImpl(256 | 512)]
    public float calc(float3 target) => sdf.capsule(target, a, b, radius);
}

#endregion // float

#region double

[method: MethodImpl(256 | 512)]
public readonly partial record struct revolution_2d_to_3d_d<S>(S shape, double o) : ISdfShape3d<double, double3> 
    where S : ISdfShape2d<double, double2>
{
    public readonly S shape = shape;
    public readonly double o = o;

    [MethodImpl(256 | 512)]
    public double calc(double3 target) => shape.calc(new(target.xz.length() - o, target.y));
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct extrusion_2d_to_3d_d<S>(S shape, double h) : ISdfShape3d<double, double3> 
    where S : ISdfShape2d<double, double2>
{
    public readonly S shape = shape;
    public readonly double h = h;

    [MethodImpl(256 | 512)]
    public double calc(double3 target)
    {
        var d = shape.calc(target.xy);
        var w = new double2(d, target.z.abs() - h);
        return w.cmax().min(0.0) + w.max(0.0).length();
    }
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct round3d_d<S>(S shape, double radius) : ISdfShape3d<double, double3> 
    where S : ISdfShape3d<double, double3>
{
    public readonly S shape = shape;
    public readonly double radius = radius;

    [MethodImpl(256 | 512)]
    public double calc(double3 target) => shape.calc(target) - radius;
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct onion3d_d<S>(S shape, double radius) : ISdfShape3d<double, double3> 
    where S : ISdfShape3d<double, double3>
{
    public readonly S shape = shape;
    public readonly double radius = radius;

    [MethodImpl(256 | 512)]
    public double calc(double3 target) => shape.calc(target).abs() - radius;
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct point3d_d(double3 center) : ISdfShape3d<double, double3>
{
    public readonly double3 center = center;

    [MethodImpl(256 | 512)]
    public double calc(double3 target) => sdf.sphere(target, center, 0);
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct sphere_d(double3 center, double radius) : ISdfShape3d<double, double3>
{
    public readonly double3 center = center;
    public readonly double radius = radius;

    [MethodImpl(256 | 512)]
    public double calc(double3 target) => sdf.sphere(target, center, radius);
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct capsule_d(double3 a, double3 b, double radius) : ISdfShape3d<double, double3>
{
    public readonly double3 a = a;
    public readonly double3 b = b;
    public readonly double radius = radius;

    [MethodImpl(256 | 512)]
    public double calc(double3 target) => sdf.capsule(target, a, b, radius);
}

#endregion // double

