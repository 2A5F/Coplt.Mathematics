<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="types.ttinclude" #><#@ import namespace="System.Linq" #><#@ assembly name="netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51" #><#@ import namespace="System" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    int[] a012 = [0,1,2];
    var car_pd_3 = (
        from a in a012.AsParallel().AsOrdered()
        from b in a012.AsParallel().AsOrdered()
        select (a, b)
        ).ToList();
    foreach (var typ in Typ.Typs)
    {
        var byteSize2 = typ.size * 2;
        var bitSize2 = 8 * byteSize2;

        var byteSize3 = typ.size * 4;
        var bitSize3 = 8 * byteSize3;

        var typeName = $"{typ.name}3";
        var retTypeName = $"{typ.name}2";
#>

#region <#= typeName #>

public partial struct <#= typeName #> 
{
<#
        foreach (var tuple in car_pd_3)
        {
            var (a, b) = tuple;

            int[] inv = [0, 0, 0, 0];
            int[] sel = [-1, -1, -1, -1];
            inv[b] = 1;
            sel[a] = 0;
            sel[b] = 0;

            var xyzw = $"{Typ.xyzw[a]}{Typ.xyzw[b]}";
            var rgba = $"{Typ.rgba[a]}{Typ.rgba[b]}";
            var ordered = a == 0 && b == 1;
            var no_overlap = a != b;
            for (var t = 0; t < 2; t++)
            {
#>
    public <#= retTypeName #> <#= t == 0 ? xyzw : rgba #>
    {
<#
                if (typ.simd)
                {
                    WriteLine("#if NET8_0_OR_GREATER");
                    if (ordered && typ.simd)
                    {
#>
        [MethodImpl(256 | 512)]
        get => new(vector.GetLower());
<#
                    }
                    else
                    {
#>
        [MethodImpl(256 | 512)]
        get => new(Vector<#= bitSize3 #>.Shuffle(vector, Vector<#= bitSize3 #>.Create(<#= typ.shuffleCast #><#= a #>, <#= b #>, 0, 0)).GetLower());
<#
                    }
                    if (no_overlap)
                    {
                        if (ordered)
                        {
#>
        [MethodImpl(256 | 512)]
        set => vector = Vector<#= bitSize3 #>.ConditionalSelect(
            Vector<#= bitSize3 #>.Create(0, 0, -1, -1).As<#= typ.Type #>(), 
            vector,
            value.vector.ToVector<#= bitSize3 #>()
        );
<#
                        }
                        else
                        {
#>
        [MethodImpl(256 | 512)]
        set => vector = Vector<#= bitSize3 #>.ConditionalSelect(
            Vector<#= bitSize3 #>.Create(<#= sel[0] #>, <#= sel[1] #>, <#= sel[2] #>, <#= sel[3] #>).As<#= typ.Type #>(), 
            vector, 
            Vector<#= bitSize3 #>.Shuffle(value.vector.ToVector<#= bitSize3 #>(), Vector<#= bitSize3 #>.Create(<#= typ.shuffleCast #><#= inv[0] #>, <#= inv[1] #>, <#= inv[2] #>, <#= inv[3] #>))
        );
<#
                        }
                    }
                    WriteLine("#else // NET8_0_OR_GREATER");
                }
#>
        [MethodImpl(256 | 512)]
        get => new(<#= Typ.xyzw[a] #>, <#= Typ.xyzw[b] #>);
<#
                if (no_overlap)
                {
#>
        [MethodImpl(256 | 512)]
        set { <#= Typ.xyzw[a] #> = value.x; <#= Typ.xyzw[b] #> = value.y; }
<#
                }
                if (typ.simd) WriteLine("#endif // NET8_0_OR_GREATER");
#>
    }
<#
            }
        }
#>
}

#endregion // <#= typeName #>
<#
    }
#>
