// generated by template, do not modify manually

using System;
#if NET8_0_OR_GREATER
using System.Numerics;
using System.Runtime.Intrinsics;
#endif
using System.Runtime.CompilerServices;
using half = System.Half;

namespace Coplt.Mathematics;

#region float3

public partial struct float3 
{
    public float4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // float3

#region double3

public partial struct double3 
{
    public double4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // double3

#region decimal3

public partial struct decimal3 
{
    public decimal4 xxxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, x);
    }
    public decimal4 rrrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, x);
    }
    public decimal4 xxxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, y);
    }
    public decimal4 rrrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, y);
    }
    public decimal4 xxxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, z);
    }
    public decimal4 rrrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, z);
    }
    public decimal4 xxyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, x);
    }
    public decimal4 rrgr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, x);
    }
    public decimal4 xxyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, y);
    }
    public decimal4 rrgg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, y);
    }
    public decimal4 xxyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, z);
    }
    public decimal4 rrgb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, z);
    }
    public decimal4 xxzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, x);
    }
    public decimal4 rrbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, x);
    }
    public decimal4 xxzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, y);
    }
    public decimal4 rrbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, y);
    }
    public decimal4 xxzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, z);
    }
    public decimal4 rrbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, z);
    }
    public decimal4 xyxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, x);
    }
    public decimal4 rgrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, x);
    }
    public decimal4 xyxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, y);
    }
    public decimal4 rgrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, y);
    }
    public decimal4 xyxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, z);
    }
    public decimal4 rgrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, z);
    }
    public decimal4 xyyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, x);
    }
    public decimal4 rggr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, x);
    }
    public decimal4 xyyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, y);
    }
    public decimal4 rggg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, y);
    }
    public decimal4 xyyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, z);
    }
    public decimal4 rggb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, z);
    }
    public decimal4 xyzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, x);
    }
    public decimal4 rgbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, x);
    }
    public decimal4 xyzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, y);
    }
    public decimal4 rgbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, y);
    }
    public decimal4 xyzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, z);
    }
    public decimal4 rgbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, z);
    }
    public decimal4 xzxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, x);
    }
    public decimal4 rbrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, x);
    }
    public decimal4 xzxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, y);
    }
    public decimal4 rbrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, y);
    }
    public decimal4 xzxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, z);
    }
    public decimal4 rbrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, z);
    }
    public decimal4 xzyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, x);
    }
    public decimal4 rbgr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, x);
    }
    public decimal4 xzyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, y);
    }
    public decimal4 rbgg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, y);
    }
    public decimal4 xzyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, z);
    }
    public decimal4 rbgb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, z);
    }
    public decimal4 xzzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, x);
    }
    public decimal4 rbbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, x);
    }
    public decimal4 xzzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, y);
    }
    public decimal4 rbbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, y);
    }
    public decimal4 xzzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, z);
    }
    public decimal4 rbbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, z);
    }
    public decimal4 yxxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, x);
    }
    public decimal4 grrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, x);
    }
    public decimal4 yxxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, y);
    }
    public decimal4 grrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, y);
    }
    public decimal4 yxxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, z);
    }
    public decimal4 grrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, z);
    }
    public decimal4 yxyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, x);
    }
    public decimal4 grgr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, x);
    }
    public decimal4 yxyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, y);
    }
    public decimal4 grgg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, y);
    }
    public decimal4 yxyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, z);
    }
    public decimal4 grgb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, z);
    }
    public decimal4 yxzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, x);
    }
    public decimal4 grbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, x);
    }
    public decimal4 yxzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, y);
    }
    public decimal4 grbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, y);
    }
    public decimal4 yxzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, z);
    }
    public decimal4 grbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, z);
    }
    public decimal4 yyxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, x);
    }
    public decimal4 ggrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, x);
    }
    public decimal4 yyxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, y);
    }
    public decimal4 ggrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, y);
    }
    public decimal4 yyxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, z);
    }
    public decimal4 ggrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, z);
    }
    public decimal4 yyyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, x);
    }
    public decimal4 gggr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, x);
    }
    public decimal4 yyyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, y);
    }
    public decimal4 gggg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, y);
    }
    public decimal4 yyyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, z);
    }
    public decimal4 gggb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, z);
    }
    public decimal4 yyzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, x);
    }
    public decimal4 ggbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, x);
    }
    public decimal4 yyzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, y);
    }
    public decimal4 ggbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, y);
    }
    public decimal4 yyzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, z);
    }
    public decimal4 ggbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, z);
    }
    public decimal4 yzxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, x);
    }
    public decimal4 gbrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, x);
    }
    public decimal4 yzxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, y);
    }
    public decimal4 gbrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, y);
    }
    public decimal4 yzxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, z);
    }
    public decimal4 gbrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, z);
    }
    public decimal4 yzyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, x);
    }
    public decimal4 gbgr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, x);
    }
    public decimal4 yzyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, y);
    }
    public decimal4 gbgg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, y);
    }
    public decimal4 yzyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, z);
    }
    public decimal4 gbgb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, z);
    }
    public decimal4 yzzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, x);
    }
    public decimal4 gbbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, x);
    }
    public decimal4 yzzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, y);
    }
    public decimal4 gbbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, y);
    }
    public decimal4 yzzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, z);
    }
    public decimal4 gbbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, z);
    }
    public decimal4 zxxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, x);
    }
    public decimal4 brrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, x);
    }
    public decimal4 zxxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, y);
    }
    public decimal4 brrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, y);
    }
    public decimal4 zxxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, z);
    }
    public decimal4 brrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, z);
    }
    public decimal4 zxyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, x);
    }
    public decimal4 brgr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, x);
    }
    public decimal4 zxyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, y);
    }
    public decimal4 brgg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, y);
    }
    public decimal4 zxyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, z);
    }
    public decimal4 brgb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, z);
    }
    public decimal4 zxzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, x);
    }
    public decimal4 brbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, x);
    }
    public decimal4 zxzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, y);
    }
    public decimal4 brbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, y);
    }
    public decimal4 zxzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, z);
    }
    public decimal4 brbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, z);
    }
    public decimal4 zyxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, x);
    }
    public decimal4 bgrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, x);
    }
    public decimal4 zyxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, y);
    }
    public decimal4 bgrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, y);
    }
    public decimal4 zyxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, z);
    }
    public decimal4 bgrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, z);
    }
    public decimal4 zyyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, x);
    }
    public decimal4 bggr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, x);
    }
    public decimal4 zyyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, y);
    }
    public decimal4 bggg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, y);
    }
    public decimal4 zyyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, z);
    }
    public decimal4 bggb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, z);
    }
    public decimal4 zyzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, x);
    }
    public decimal4 bgbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, x);
    }
    public decimal4 zyzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, y);
    }
    public decimal4 bgbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, y);
    }
    public decimal4 zyzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, z);
    }
    public decimal4 bgbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, z);
    }
    public decimal4 zzxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, x);
    }
    public decimal4 bbrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, x);
    }
    public decimal4 zzxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, y);
    }
    public decimal4 bbrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, y);
    }
    public decimal4 zzxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, z);
    }
    public decimal4 bbrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, z);
    }
    public decimal4 zzyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, x);
    }
    public decimal4 bbgr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, x);
    }
    public decimal4 zzyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, y);
    }
    public decimal4 bbgg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, y);
    }
    public decimal4 zzyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, z);
    }
    public decimal4 bbgb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, z);
    }
    public decimal4 zzzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, x);
    }
    public decimal4 bbbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, x);
    }
    public decimal4 zzzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, y);
    }
    public decimal4 bbbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, y);
    }
    public decimal4 zzzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, z);
    }
    public decimal4 bbbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, z);
    }
}

#endregion // decimal3

#region half3

public partial struct half3 
{
    public half4 xxxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, x);
    }
    public half4 rrrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, x);
    }
    public half4 xxxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, y);
    }
    public half4 rrrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, y);
    }
    public half4 xxxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, z);
    }
    public half4 rrrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, z);
    }
    public half4 xxyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, x);
    }
    public half4 rrgr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, x);
    }
    public half4 xxyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, y);
    }
    public half4 rrgg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, y);
    }
    public half4 xxyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, z);
    }
    public half4 rrgb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, z);
    }
    public half4 xxzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, x);
    }
    public half4 rrbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, x);
    }
    public half4 xxzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, y);
    }
    public half4 rrbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, y);
    }
    public half4 xxzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, z);
    }
    public half4 rrbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, z);
    }
    public half4 xyxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, x);
    }
    public half4 rgrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, x);
    }
    public half4 xyxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, y);
    }
    public half4 rgrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, y);
    }
    public half4 xyxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, z);
    }
    public half4 rgrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, z);
    }
    public half4 xyyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, x);
    }
    public half4 rggr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, x);
    }
    public half4 xyyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, y);
    }
    public half4 rggg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, y);
    }
    public half4 xyyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, z);
    }
    public half4 rggb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, z);
    }
    public half4 xyzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, x);
    }
    public half4 rgbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, x);
    }
    public half4 xyzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, y);
    }
    public half4 rgbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, y);
    }
    public half4 xyzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, z);
    }
    public half4 rgbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, z);
    }
    public half4 xzxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, x);
    }
    public half4 rbrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, x);
    }
    public half4 xzxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, y);
    }
    public half4 rbrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, y);
    }
    public half4 xzxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, z);
    }
    public half4 rbrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, z);
    }
    public half4 xzyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, x);
    }
    public half4 rbgr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, x);
    }
    public half4 xzyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, y);
    }
    public half4 rbgg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, y);
    }
    public half4 xzyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, z);
    }
    public half4 rbgb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, z);
    }
    public half4 xzzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, x);
    }
    public half4 rbbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, x);
    }
    public half4 xzzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, y);
    }
    public half4 rbbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, y);
    }
    public half4 xzzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, z);
    }
    public half4 rbbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, z);
    }
    public half4 yxxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, x);
    }
    public half4 grrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, x);
    }
    public half4 yxxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, y);
    }
    public half4 grrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, y);
    }
    public half4 yxxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, z);
    }
    public half4 grrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, z);
    }
    public half4 yxyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, x);
    }
    public half4 grgr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, x);
    }
    public half4 yxyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, y);
    }
    public half4 grgg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, y);
    }
    public half4 yxyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, z);
    }
    public half4 grgb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, z);
    }
    public half4 yxzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, x);
    }
    public half4 grbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, x);
    }
    public half4 yxzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, y);
    }
    public half4 grbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, y);
    }
    public half4 yxzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, z);
    }
    public half4 grbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, z);
    }
    public half4 yyxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, x);
    }
    public half4 ggrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, x);
    }
    public half4 yyxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, y);
    }
    public half4 ggrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, y);
    }
    public half4 yyxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, z);
    }
    public half4 ggrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, z);
    }
    public half4 yyyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, x);
    }
    public half4 gggr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, x);
    }
    public half4 yyyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, y);
    }
    public half4 gggg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, y);
    }
    public half4 yyyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, z);
    }
    public half4 gggb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, z);
    }
    public half4 yyzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, x);
    }
    public half4 ggbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, x);
    }
    public half4 yyzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, y);
    }
    public half4 ggbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, y);
    }
    public half4 yyzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, z);
    }
    public half4 ggbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, z);
    }
    public half4 yzxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, x);
    }
    public half4 gbrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, x);
    }
    public half4 yzxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, y);
    }
    public half4 gbrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, y);
    }
    public half4 yzxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, z);
    }
    public half4 gbrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, z);
    }
    public half4 yzyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, x);
    }
    public half4 gbgr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, x);
    }
    public half4 yzyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, y);
    }
    public half4 gbgg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, y);
    }
    public half4 yzyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, z);
    }
    public half4 gbgb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, z);
    }
    public half4 yzzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, x);
    }
    public half4 gbbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, x);
    }
    public half4 yzzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, y);
    }
    public half4 gbbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, y);
    }
    public half4 yzzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, z);
    }
    public half4 gbbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, z);
    }
    public half4 zxxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, x);
    }
    public half4 brrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, x);
    }
    public half4 zxxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, y);
    }
    public half4 brrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, y);
    }
    public half4 zxxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, z);
    }
    public half4 brrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, z);
    }
    public half4 zxyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, x);
    }
    public half4 brgr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, x);
    }
    public half4 zxyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, y);
    }
    public half4 brgg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, y);
    }
    public half4 zxyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, z);
    }
    public half4 brgb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, z);
    }
    public half4 zxzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, x);
    }
    public half4 brbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, x);
    }
    public half4 zxzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, y);
    }
    public half4 brbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, y);
    }
    public half4 zxzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, z);
    }
    public half4 brbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, z);
    }
    public half4 zyxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, x);
    }
    public half4 bgrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, x);
    }
    public half4 zyxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, y);
    }
    public half4 bgrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, y);
    }
    public half4 zyxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, z);
    }
    public half4 bgrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, z);
    }
    public half4 zyyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, x);
    }
    public half4 bggr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, x);
    }
    public half4 zyyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, y);
    }
    public half4 bggg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, y);
    }
    public half4 zyyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, z);
    }
    public half4 bggb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, z);
    }
    public half4 zyzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, x);
    }
    public half4 bgbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, x);
    }
    public half4 zyzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, y);
    }
    public half4 bgbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, y);
    }
    public half4 zyzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, z);
    }
    public half4 bgbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, z);
    }
    public half4 zzxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, x);
    }
    public half4 bbrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, x);
    }
    public half4 zzxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, y);
    }
    public half4 bbrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, y);
    }
    public half4 zzxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, z);
    }
    public half4 bbrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, z);
    }
    public half4 zzyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, x);
    }
    public half4 bbgr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, x);
    }
    public half4 zzyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, y);
    }
    public half4 bbgg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, y);
    }
    public half4 zzyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, z);
    }
    public half4 bbgb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, z);
    }
    public half4 zzzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, x);
    }
    public half4 bbbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, x);
    }
    public half4 zzzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, y);
    }
    public half4 bbbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, y);
    }
    public half4 zzzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, z);
    }
    public half4 bbbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, z);
    }
}

#endregion // half3

#region int3

public partial struct int3 
{
    public int4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // int3

#region uint3

public partial struct uint3 
{
    public uint4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // uint3

#region long3

public partial struct long3 
{
    public long4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // long3

#region ulong3

public partial struct ulong3 
{
    public ulong4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong3

#region bool3

public partial struct bool3 
{
    public bool4 xxxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, x);
    }
    public bool4 rrrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, x);
    }
    public bool4 xxxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, y);
    }
    public bool4 rrrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, y);
    }
    public bool4 xxxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, z);
    }
    public bool4 rrrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, x, z);
    }
    public bool4 xxyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, x);
    }
    public bool4 rrgr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, x);
    }
    public bool4 xxyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, y);
    }
    public bool4 rrgg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, y);
    }
    public bool4 xxyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, z);
    }
    public bool4 rrgb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, y, z);
    }
    public bool4 xxzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, x);
    }
    public bool4 rrbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, x);
    }
    public bool4 xxzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, y);
    }
    public bool4 rrbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, y);
    }
    public bool4 xxzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, z);
    }
    public bool4 rrbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x, z, z);
    }
    public bool4 xyxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, x);
    }
    public bool4 rgrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, x);
    }
    public bool4 xyxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, y);
    }
    public bool4 rgrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, y);
    }
    public bool4 xyxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, z);
    }
    public bool4 rgrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, x, z);
    }
    public bool4 xyyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, x);
    }
    public bool4 rggr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, x);
    }
    public bool4 xyyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, y);
    }
    public bool4 rggg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, y);
    }
    public bool4 xyyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, z);
    }
    public bool4 rggb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, y, z);
    }
    public bool4 xyzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, x);
    }
    public bool4 rgbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, x);
    }
    public bool4 xyzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, y);
    }
    public bool4 rgbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, y);
    }
    public bool4 xyzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, z);
    }
    public bool4 rgbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, y, z, z);
    }
    public bool4 xzxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, x);
    }
    public bool4 rbrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, x);
    }
    public bool4 xzxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, y);
    }
    public bool4 rbrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, y);
    }
    public bool4 xzxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, z);
    }
    public bool4 rbrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, x, z);
    }
    public bool4 xzyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, x);
    }
    public bool4 rbgr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, x);
    }
    public bool4 xzyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, y);
    }
    public bool4 rbgg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, y);
    }
    public bool4 xzyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, z);
    }
    public bool4 rbgb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, y, z);
    }
    public bool4 xzzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, x);
    }
    public bool4 rbbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, x);
    }
    public bool4 xzzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, y);
    }
    public bool4 rbbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, y);
    }
    public bool4 xzzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, z);
    }
    public bool4 rbbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, z, z, z);
    }
    public bool4 yxxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, x);
    }
    public bool4 grrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, x);
    }
    public bool4 yxxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, y);
    }
    public bool4 grrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, y);
    }
    public bool4 yxxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, z);
    }
    public bool4 grrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, x, z);
    }
    public bool4 yxyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, x);
    }
    public bool4 grgr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, x);
    }
    public bool4 yxyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, y);
    }
    public bool4 grgg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, y);
    }
    public bool4 yxyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, z);
    }
    public bool4 grgb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, y, z);
    }
    public bool4 yxzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, x);
    }
    public bool4 grbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, x);
    }
    public bool4 yxzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, y);
    }
    public bool4 grbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, y);
    }
    public bool4 yxzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, z);
    }
    public bool4 grbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x, z, z);
    }
    public bool4 yyxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, x);
    }
    public bool4 ggrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, x);
    }
    public bool4 yyxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, y);
    }
    public bool4 ggrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, y);
    }
    public bool4 yyxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, z);
    }
    public bool4 ggrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, x, z);
    }
    public bool4 yyyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, x);
    }
    public bool4 gggr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, x);
    }
    public bool4 yyyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, y);
    }
    public bool4 gggg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, y);
    }
    public bool4 yyyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, z);
    }
    public bool4 gggb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, y, z);
    }
    public bool4 yyzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, x);
    }
    public bool4 ggbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, x);
    }
    public bool4 yyzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, y);
    }
    public bool4 ggbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, y);
    }
    public bool4 yyzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, z);
    }
    public bool4 ggbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y, z, z);
    }
    public bool4 yzxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, x);
    }
    public bool4 gbrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, x);
    }
    public bool4 yzxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, y);
    }
    public bool4 gbrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, y);
    }
    public bool4 yzxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, z);
    }
    public bool4 gbrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, x, z);
    }
    public bool4 yzyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, x);
    }
    public bool4 gbgr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, x);
    }
    public bool4 yzyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, y);
    }
    public bool4 gbgg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, y);
    }
    public bool4 yzyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, z);
    }
    public bool4 gbgb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, y, z);
    }
    public bool4 yzzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, x);
    }
    public bool4 gbbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, x);
    }
    public bool4 yzzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, y);
    }
    public bool4 gbbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, y);
    }
    public bool4 yzzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, z);
    }
    public bool4 gbbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, z, z, z);
    }
    public bool4 zxxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, x);
    }
    public bool4 brrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, x);
    }
    public bool4 zxxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, y);
    }
    public bool4 brrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, y);
    }
    public bool4 zxxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, z);
    }
    public bool4 brrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, x, z);
    }
    public bool4 zxyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, x);
    }
    public bool4 brgr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, x);
    }
    public bool4 zxyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, y);
    }
    public bool4 brgg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, y);
    }
    public bool4 zxyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, z);
    }
    public bool4 brgb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, y, z);
    }
    public bool4 zxzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, x);
    }
    public bool4 brbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, x);
    }
    public bool4 zxzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, y);
    }
    public bool4 brbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, y);
    }
    public bool4 zxzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, z);
    }
    public bool4 brbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, x, z, z);
    }
    public bool4 zyxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, x);
    }
    public bool4 bgrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, x);
    }
    public bool4 zyxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, y);
    }
    public bool4 bgrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, y);
    }
    public bool4 zyxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, z);
    }
    public bool4 bgrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, x, z);
    }
    public bool4 zyyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, x);
    }
    public bool4 bggr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, x);
    }
    public bool4 zyyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, y);
    }
    public bool4 bggg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, y);
    }
    public bool4 zyyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, z);
    }
    public bool4 bggb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, y, z);
    }
    public bool4 zyzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, x);
    }
    public bool4 bgbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, x);
    }
    public bool4 zyzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, y);
    }
    public bool4 bgbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, y);
    }
    public bool4 zyzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, z);
    }
    public bool4 bgbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, y, z, z);
    }
    public bool4 zzxx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, x);
    }
    public bool4 bbrr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, x);
    }
    public bool4 zzxy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, y);
    }
    public bool4 bbrg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, y);
    }
    public bool4 zzxz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, z);
    }
    public bool4 bbrb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, x, z);
    }
    public bool4 zzyx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, x);
    }
    public bool4 bbgr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, x);
    }
    public bool4 zzyy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, y);
    }
    public bool4 bbgg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, y);
    }
    public bool4 zzyz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, z);
    }
    public bool4 bbgb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, y, z);
    }
    public bool4 zzzx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, x);
    }
    public bool4 bbbr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, x);
    }
    public bool4 zzzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, y);
    }
    public bool4 bbbg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, y);
    }
    public bool4 zzzz
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, z);
    }
    public bool4 bbbb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(z, z, z, z);
    }
}

#endregion // bool3
