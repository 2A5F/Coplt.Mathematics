// generated by template, do not modify manually

namespace Coplt.Mathematics;

#region float3

public partial struct float3 
{
    public float4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // float3

#region double3

public partial struct double3 
{
    public double4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // double3

#region short3

public partial struct short3 
{
    public short4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public short4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public short4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public short4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public short4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public short4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public short4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public short4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public short4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public short4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public short4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public short4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public short4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public short4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public short4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public short4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public short4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public short4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public short4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public short4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public short4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public short4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public short4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public short4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public short4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public short4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public short4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public short4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public short4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public short4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public short4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public short4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public short4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public short4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public short4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public short4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public short4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public short4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public short4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public short4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public short4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public short4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public short4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public short4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public short4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public short4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public short4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public short4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public short4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public short4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public short4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public short4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public short4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public short4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public short4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public short4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public short4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public short4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public short4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public short4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public short4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public short4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public short4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public short4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public short4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public short4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public short4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public short4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public short4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public short4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public short4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public short4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public short4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public short4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public short4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public short4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public short4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public short4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public short4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public short4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public short4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public short4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public short4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public short4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public short4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public short4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public short4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public short4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public short4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public short4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public short4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public short4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public short4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public short4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public short4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public short4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public short4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public short4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public short4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public short4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public short4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public short4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public short4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public short4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public short4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public short4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public short4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public short4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public short4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public short4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public short4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public short4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public short4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public short4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public short4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public short4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public short4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public short4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public short4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public short4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public short4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public short4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public short4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public short4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public short4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public short4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public short4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public short4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public short4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public short4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public short4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public short4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public short4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public short4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public short4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public short4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public short4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public short4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public short4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public short4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public short4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public short4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public short4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public short4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public short4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public short4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public short4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public short4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public short4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public short4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public short4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public short4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public short4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public short4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public short4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public short4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public short4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public short4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public short4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public short4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public short4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public short4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // short3

#region ushort3

public partial struct ushort3 
{
    public ushort4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public ushort4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public ushort4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public ushort4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public ushort4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public ushort4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public ushort4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public ushort4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public ushort4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public ushort4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public ushort4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public ushort4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public ushort4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public ushort4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public ushort4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public ushort4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public ushort4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public ushort4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public ushort4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public ushort4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public ushort4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public ushort4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public ushort4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public ushort4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public ushort4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public ushort4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public ushort4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public ushort4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public ushort4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public ushort4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public ushort4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public ushort4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public ushort4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public ushort4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public ushort4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public ushort4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public ushort4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public ushort4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public ushort4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public ushort4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public ushort4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public ushort4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public ushort4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public ushort4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public ushort4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public ushort4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public ushort4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public ushort4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public ushort4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public ushort4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public ushort4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public ushort4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public ushort4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public ushort4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public ushort4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public ushort4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public ushort4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public ushort4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public ushort4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public ushort4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public ushort4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public ushort4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public ushort4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public ushort4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public ushort4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public ushort4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public ushort4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public ushort4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public ushort4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public ushort4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public ushort4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public ushort4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public ushort4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public ushort4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public ushort4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public ushort4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public ushort4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public ushort4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public ushort4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public ushort4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public ushort4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public ushort4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public ushort4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public ushort4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public ushort4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public ushort4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public ushort4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public ushort4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public ushort4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public ushort4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public ushort4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public ushort4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public ushort4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public ushort4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public ushort4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public ushort4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public ushort4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public ushort4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public ushort4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public ushort4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public ushort4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public ushort4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public ushort4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public ushort4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public ushort4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public ushort4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public ushort4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public ushort4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public ushort4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public ushort4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public ushort4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public ushort4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public ushort4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public ushort4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public ushort4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public ushort4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public ushort4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public ushort4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public ushort4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public ushort4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public ushort4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public ushort4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public ushort4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public ushort4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public ushort4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public ushort4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public ushort4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public ushort4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public ushort4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public ushort4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public ushort4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public ushort4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public ushort4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public ushort4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public ushort4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public ushort4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public ushort4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public ushort4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public ushort4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public ushort4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public ushort4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public ushort4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public ushort4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public ushort4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public ushort4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public ushort4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public ushort4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public ushort4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public ushort4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public ushort4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public ushort4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public ushort4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public ushort4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public ushort4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public ushort4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public ushort4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public ushort4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public ushort4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public ushort4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public ushort4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public ushort4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public ushort4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // ushort3

#region int3

public partial struct int3 
{
    public int4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // int3

#region uint3

public partial struct uint3 
{
    public uint4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // uint3

#region long3

public partial struct long3 
{
    public long4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // long3

#region ulong3

public partial struct ulong3 
{
    public ulong4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong3

#region decimal3

public partial struct decimal3 
{
    public decimal4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public decimal4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public decimal4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public decimal4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public decimal4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public decimal4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public decimal4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public decimal4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public decimal4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public decimal4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public decimal4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public decimal4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public decimal4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public decimal4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public decimal4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public decimal4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public decimal4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public decimal4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public decimal4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public decimal4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public decimal4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public decimal4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public decimal4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public decimal4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public decimal4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public decimal4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public decimal4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public decimal4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public decimal4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public decimal4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public decimal4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public decimal4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public decimal4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public decimal4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public decimal4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public decimal4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public decimal4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public decimal4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public decimal4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public decimal4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public decimal4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public decimal4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public decimal4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public decimal4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public decimal4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public decimal4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public decimal4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public decimal4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public decimal4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public decimal4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public decimal4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public decimal4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public decimal4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public decimal4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public decimal4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public decimal4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public decimal4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public decimal4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public decimal4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public decimal4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public decimal4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public decimal4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public decimal4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public decimal4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public decimal4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public decimal4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public decimal4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public decimal4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public decimal4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public decimal4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public decimal4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public decimal4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public decimal4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public decimal4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public decimal4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public decimal4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public decimal4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public decimal4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public decimal4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public decimal4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public decimal4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public decimal4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public decimal4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public decimal4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public decimal4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public decimal4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public decimal4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public decimal4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public decimal4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public decimal4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public decimal4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public decimal4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public decimal4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public decimal4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public decimal4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public decimal4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public decimal4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public decimal4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public decimal4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public decimal4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public decimal4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public decimal4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public decimal4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public decimal4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public decimal4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public decimal4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public decimal4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public decimal4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public decimal4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public decimal4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public decimal4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public decimal4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public decimal4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public decimal4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public decimal4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public decimal4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public decimal4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public decimal4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public decimal4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public decimal4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public decimal4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public decimal4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public decimal4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public decimal4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public decimal4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public decimal4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public decimal4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public decimal4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public decimal4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public decimal4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public decimal4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public decimal4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public decimal4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public decimal4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public decimal4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public decimal4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public decimal4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public decimal4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public decimal4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public decimal4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public decimal4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public decimal4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public decimal4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public decimal4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public decimal4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public decimal4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public decimal4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public decimal4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public decimal4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public decimal4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public decimal4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public decimal4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public decimal4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public decimal4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public decimal4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public decimal4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public decimal4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public decimal4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public decimal4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public decimal4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public decimal4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public decimal4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // decimal3

#region half3

public partial struct half3 
{
    public half4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public half4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public half4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public half4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public half4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public half4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public half4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public half4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public half4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public half4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public half4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public half4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public half4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public half4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public half4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public half4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public half4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public half4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public half4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public half4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public half4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public half4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public half4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public half4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public half4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public half4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public half4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public half4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public half4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public half4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public half4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public half4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public half4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public half4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public half4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public half4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public half4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public half4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public half4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public half4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public half4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public half4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public half4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public half4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public half4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public half4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public half4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public half4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public half4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public half4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public half4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public half4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public half4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public half4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public half4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public half4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public half4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public half4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public half4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public half4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public half4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public half4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public half4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public half4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public half4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public half4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public half4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public half4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public half4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public half4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public half4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public half4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public half4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public half4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public half4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public half4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public half4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public half4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public half4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public half4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public half4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public half4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public half4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public half4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public half4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public half4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public half4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public half4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public half4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public half4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public half4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public half4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public half4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public half4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public half4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public half4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public half4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public half4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public half4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public half4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public half4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public half4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public half4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public half4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public half4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public half4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public half4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public half4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public half4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public half4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public half4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public half4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public half4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public half4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public half4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public half4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public half4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public half4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public half4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public half4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public half4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public half4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public half4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public half4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public half4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public half4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public half4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public half4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public half4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public half4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public half4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public half4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public half4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public half4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public half4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public half4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public half4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public half4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public half4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public half4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public half4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public half4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public half4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public half4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public half4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public half4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public half4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public half4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public half4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public half4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public half4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public half4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public half4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public half4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public half4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public half4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public half4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public half4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public half4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public half4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public half4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public half4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // half3

#region b16v3

public partial struct b16v3 
{
    public b16v4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public b16v4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public b16v4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public b16v4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public b16v4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public b16v4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public b16v4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public b16v4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public b16v4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public b16v4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public b16v4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public b16v4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public b16v4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public b16v4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public b16v4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public b16v4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public b16v4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public b16v4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public b16v4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public b16v4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public b16v4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public b16v4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public b16v4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public b16v4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public b16v4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public b16v4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public b16v4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public b16v4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public b16v4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public b16v4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public b16v4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public b16v4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public b16v4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public b16v4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public b16v4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public b16v4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public b16v4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public b16v4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public b16v4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public b16v4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public b16v4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public b16v4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public b16v4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public b16v4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public b16v4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public b16v4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public b16v4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public b16v4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public b16v4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public b16v4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public b16v4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public b16v4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public b16v4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public b16v4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public b16v4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public b16v4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public b16v4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public b16v4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public b16v4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public b16v4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public b16v4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public b16v4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public b16v4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public b16v4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public b16v4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public b16v4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public b16v4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public b16v4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public b16v4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public b16v4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public b16v4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public b16v4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public b16v4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public b16v4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public b16v4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public b16v4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public b16v4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public b16v4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public b16v4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public b16v4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public b16v4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public b16v4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public b16v4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public b16v4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public b16v4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public b16v4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public b16v4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public b16v4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public b16v4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public b16v4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public b16v4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public b16v4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public b16v4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public b16v4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public b16v4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public b16v4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public b16v4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public b16v4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public b16v4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public b16v4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public b16v4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public b16v4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public b16v4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public b16v4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public b16v4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public b16v4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public b16v4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public b16v4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public b16v4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public b16v4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public b16v4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public b16v4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public b16v4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public b16v4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public b16v4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public b16v4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public b16v4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public b16v4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public b16v4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public b16v4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public b16v4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public b16v4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public b16v4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public b16v4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public b16v4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public b16v4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public b16v4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public b16v4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public b16v4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public b16v4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public b16v4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public b16v4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public b16v4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public b16v4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public b16v4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public b16v4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public b16v4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public b16v4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public b16v4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public b16v4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public b16v4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public b16v4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public b16v4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public b16v4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public b16v4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public b16v4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public b16v4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public b16v4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public b16v4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public b16v4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public b16v4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public b16v4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public b16v4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public b16v4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public b16v4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public b16v4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public b16v4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public b16v4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public b16v4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public b16v4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public b16v4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public b16v4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // b16v3

#region b32v3

public partial struct b32v3 
{
    public b32v4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // b32v3

#region b64v3

public partial struct b64v3 
{
    public b64v4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // b64v3
