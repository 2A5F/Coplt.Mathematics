<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        if (!typ.arith) continue;

        var byteSize = typ.size * 2;
        var bitSize = 8 * byteSize;

        var vecTypeName = $"{typ.name}{2}";
        var typeName = $"{typ.name.Replace('v', 'm')}{2}x{2}";
#>

#region <#= typeName #>

public partial struct <#= typeName #>
{
<#
        if (typ.f && typ.bin)
        {
#>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Rotate(<#= typ.compType #> angle)
    {
        angle.sincos(out var s, out var c);
        return new(
            c, -s,
            s,  c
        );
    }

<#
        }
#>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Scale(<#= typ.compType #> s) => new(
        s,   default,
        default, s
    );

    [MethodImpl(256 | 512)]
    public static <#= typeName #> Scale(<#= typ.compType #> x, <#= typ.compType #> y) => new(
        x,   default,
        default, y
    );

    [MethodImpl(256 | 512)]
    public static <#= typeName #> Scale(<#= vecTypeName #> v) => new(
        v.x,   default,
        default, v.y
    );
}

#endregion // <#= typeName #>
<#
    }
#>
