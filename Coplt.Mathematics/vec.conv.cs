// generated by template, do not modify manually

namespace Coplt.Mathematics;

#region float2

public partial struct float2 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint2(float2 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector64.ConvertToUInt32(self.vector));
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int2(float2 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector64.ConvertToInt32(self.vector));
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong2(float2 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector64.Widen(self.vector);
        return new(Vector128.ConvertToUInt64(Vector128.Create(a, b)));
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long2(float2 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector64.Widen(self.vector);
        return new(Vector128.ConvertToInt64(Vector128.Create(a, b)));
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator decimal2(float2 self)
    {
        return new((decimal)self.x, (decimal)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half2(float2 self)
    {
        return new((half)self.x, (half)self.y);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double2(float2 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector64.Widen(self.vector);
        return new(Vector128.Create(a, b));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y);
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // float2

#region float3

public partial struct float3 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint3(float3 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.ConvertToUInt32(self.vector));
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y, (uint)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int3(float3 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.ConvertToInt32(self.vector));
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y, (int)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong3(float3 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.ConvertToUInt64(Vector256.Create(a, b)));
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long3(float3 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.ConvertToInt64(Vector256.Create(a, b)));
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y, (long)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator decimal3(float3 self)
    {
        return new((decimal)self.x, (decimal)self.y, (decimal)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half3(float3 self)
    {
        return new((half)self.x, (half)self.y, (half)self.z);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double3(float3 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a, b));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y, (double)self.z);
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // float3

#region float4

public partial struct float4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint4(float4 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.ConvertToUInt32(self.vector));
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y, (uint)self.z, (uint)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int4(float4 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.ConvertToInt32(self.vector));
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y, (int)self.z, (int)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong4(float4 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.ConvertToUInt64(Vector256.Create(a, b)));
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z, (ulong)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long4(float4 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.ConvertToInt64(Vector256.Create(a, b)));
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y, (long)self.z, (long)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator decimal4(float4 self)
    {
        return new((decimal)self.x, (decimal)self.y, (decimal)self.z, (decimal)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half4(float4 self)
    {
        return new((half)self.x, (half)self.y, (half)self.z, (half)self.w);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double4(float4 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a, b));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y, (double)self.z, (double)self.w);
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // float4

#region double2

public partial struct double2 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint2(double2 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector64.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(Vector64.ConvertToUInt32(v));
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int2(double2 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector64.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(Vector64.ConvertToInt32(v));
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong2(double2 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.ConvertToUInt64(self.vector));
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long2(double2 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.ConvertToInt64(self.vector));
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float2(double2 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector64.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v);
        #else // NET8_0_OR_GREATER
        return new((float)self.x, (float)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator decimal2(double2 self)
    {
        return new((decimal)self.x, (decimal)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half2(double2 self)
    {
        return new((half)self.x, (half)self.y);
    }
}

#endregion // double2

#region double3

public partial struct double3 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint3(double3 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(Vector128.ConvertToUInt32(v));
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y, (uint)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int3(double3 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(Vector128.ConvertToInt32(v));
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y, (int)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong3(double3 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector256.ConvertToUInt64(self.vector));
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long3(double3 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector256.ConvertToInt64(self.vector));
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y, (long)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float3(double3 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v);
        #else // NET8_0_OR_GREATER
        return new((float)self.x, (float)self.y, (float)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator decimal3(double3 self)
    {
        return new((decimal)self.x, (decimal)self.y, (decimal)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half3(double3 self)
    {
        return new((half)self.x, (half)self.y, (half)self.z);
    }
}

#endregion // double3

#region double4

public partial struct double4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint4(double4 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(Vector128.ConvertToUInt32(v));
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y, (uint)self.z, (uint)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int4(double4 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(Vector128.ConvertToInt32(v));
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y, (int)self.z, (int)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong4(double4 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector256.ConvertToUInt64(self.vector));
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z, (ulong)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long4(double4 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector256.ConvertToInt64(self.vector));
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y, (long)self.z, (long)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float4(double4 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v);
        #else // NET8_0_OR_GREATER
        return new((float)self.x, (float)self.y, (float)self.z, (float)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator decimal4(double4 self)
    {
        return new((decimal)self.x, (decimal)self.y, (decimal)self.z, (decimal)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half4(double4 self)
    {
        return new((half)self.x, (half)self.y, (half)self.z, (half)self.w);
    }
}

#endregion // double4

#region int2

public partial struct int2 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint2(int2 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsUInt32());
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong2(int2 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector64.Widen(self.vector);
        return new(Vector128.Create(a, b).AsUInt64());
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half2(int2 self)
    {
        return new((half)self.x, (half)self.y);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator long2(int2 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector64.Widen(self.vector);
        return new(Vector128.Create(a, b).AsInt64());
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator float2(int2 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector64.ConvertToSingle(self.vector));
        #else // NET8_0_OR_GREATER
        return new((float)self.x, (float)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double2(int2 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector64.Widen(self.vector);
        return new(Vector128.ConvertToDouble(Vector128.Create(a, b)));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator decimal2(int2 self)
    {
        return new((decimal)self.x, (decimal)self.y);
    }
}

#endregion // int2

#region int3

public partial struct int3 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint3(int3 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsUInt32());
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y, (uint)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong3(int3 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a, b).AsUInt64());
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half3(int3 self)
    {
        return new((half)self.x, (half)self.y, (half)self.z);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator long3(int3 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a, b).AsInt64());
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y, (long)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator float3(int3 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.ConvertToSingle(self.vector));
        #else // NET8_0_OR_GREATER
        return new((float)self.x, (float)self.y, (float)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double3(int3 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.ConvertToDouble(Vector256.Create(a, b)));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y, (double)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator decimal3(int3 self)
    {
        return new((decimal)self.x, (decimal)self.y, (decimal)self.z);
    }
}

#endregion // int3

#region int4

public partial struct int4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint4(int4 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsUInt32());
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y, (uint)self.z, (uint)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong4(int4 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a, b).AsUInt64());
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z, (ulong)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half4(int4 self)
    {
        return new((half)self.x, (half)self.y, (half)self.z, (half)self.w);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator long4(int4 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a, b).AsInt64());
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y, (long)self.z, (long)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator float4(int4 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.ConvertToSingle(self.vector));
        #else // NET8_0_OR_GREATER
        return new((float)self.x, (float)self.y, (float)self.z, (float)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double4(int4 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.ConvertToDouble(Vector256.Create(a, b)));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y, (double)self.z, (double)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator decimal4(int4 self)
    {
        return new((decimal)self.x, (decimal)self.y, (decimal)self.z, (decimal)self.w);
    }
}

#endregion // int4

#region uint2

public partial struct uint2 
{
    [MethodImpl(256 | 512)]
    public static explicit operator int2(uint2 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsInt32());
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half2(uint2 self)
    {
        return new((half)self.x, (half)self.y);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator long2(uint2 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector64.Widen(self.vector);
        return new(Vector128.Create(a, b).AsInt64());
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator ulong2(uint2 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector64.Widen(self.vector);
        return new(Vector128.Create(a, b).AsUInt64());
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator float2(uint2 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector64.ConvertToSingle(self.vector));
        #else // NET8_0_OR_GREATER
        return new((float)self.x, (float)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double2(uint2 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector64.Widen(self.vector);
        return new(Vector128.ConvertToDouble(Vector128.Create(a, b)));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator decimal2(uint2 self)
    {
        return new((decimal)self.x, (decimal)self.y);
    }
}

#endregion // uint2

#region uint3

public partial struct uint3 
{
    [MethodImpl(256 | 512)]
    public static explicit operator int3(uint3 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsInt32());
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y, (int)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half3(uint3 self)
    {
        return new((half)self.x, (half)self.y, (half)self.z);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator long3(uint3 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a, b).AsInt64());
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y, (long)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator ulong3(uint3 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a, b).AsUInt64());
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator float3(uint3 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.ConvertToSingle(self.vector));
        #else // NET8_0_OR_GREATER
        return new((float)self.x, (float)self.y, (float)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double3(uint3 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.ConvertToDouble(Vector256.Create(a, b)));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y, (double)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator decimal3(uint3 self)
    {
        return new((decimal)self.x, (decimal)self.y, (decimal)self.z);
    }
}

#endregion // uint3

#region uint4

public partial struct uint4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator int4(uint4 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsInt32());
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y, (int)self.z, (int)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half4(uint4 self)
    {
        return new((half)self.x, (half)self.y, (half)self.z, (half)self.w);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator long4(uint4 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a, b).AsInt64());
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y, (long)self.z, (long)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator ulong4(uint4 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a, b).AsUInt64());
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z, (ulong)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator float4(uint4 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.ConvertToSingle(self.vector));
        #else // NET8_0_OR_GREATER
        return new((float)self.x, (float)self.y, (float)self.z, (float)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double4(uint4 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.ConvertToDouble(Vector256.Create(a, b)));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y, (double)self.z, (double)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator decimal4(uint4 self)
    {
        return new((decimal)self.x, (decimal)self.y, (decimal)self.z, (decimal)self.w);
    }
}

#endregion // uint4

#region long2

public partial struct long2 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint2(long2 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector64.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsUInt32());
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int2(long2 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector64.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsInt32());
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong2(long2 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsUInt64());
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half2(long2 self)
    {
        return new((half)self.x, (half)self.y);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double2(long2 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.ConvertToDouble(self.vector));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator decimal2(long2 self)
    {
        return new((decimal)self.x, (decimal)self.y);
    }
}

#endregion // long2

#region long3

public partial struct long3 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint3(long3 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsUInt32());
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y, (uint)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int3(long3 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsInt32());
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y, (int)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong3(long3 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsUInt64());
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half3(long3 self)
    {
        return new((half)self.x, (half)self.y, (half)self.z);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double3(long3 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector256.ConvertToDouble(self.vector));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y, (double)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator decimal3(long3 self)
    {
        return new((decimal)self.x, (decimal)self.y, (decimal)self.z);
    }
}

#endregion // long3

#region long4

public partial struct long4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint4(long4 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsUInt32());
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y, (uint)self.z, (uint)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int4(long4 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsInt32());
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y, (int)self.z, (int)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong4(long4 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsUInt64());
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z, (ulong)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half4(long4 self)
    {
        return new((half)self.x, (half)self.y, (half)self.z, (half)self.w);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double4(long4 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector256.ConvertToDouble(self.vector));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y, (double)self.z, (double)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator decimal4(long4 self)
    {
        return new((decimal)self.x, (decimal)self.y, (decimal)self.z, (decimal)self.w);
    }
}

#endregion // long4

#region ulong2

public partial struct ulong2 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint2(ulong2 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector64.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsUInt32());
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int2(ulong2 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector64.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsInt32());
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long2(ulong2 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsInt64());
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half2(ulong2 self)
    {
        return new((half)self.x, (half)self.y);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double2(ulong2 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.ConvertToDouble(self.vector));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator decimal2(ulong2 self)
    {
        return new((decimal)self.x, (decimal)self.y);
    }
}

#endregion // ulong2

#region ulong3

public partial struct ulong3 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint3(ulong3 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsUInt32());
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y, (uint)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int3(ulong3 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsInt32());
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y, (int)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long3(ulong3 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsInt64());
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y, (long)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half3(ulong3 self)
    {
        return new((half)self.x, (half)self.y, (half)self.z);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double3(ulong3 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector256.ConvertToDouble(self.vector));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y, (double)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator decimal3(ulong3 self)
    {
        return new((decimal)self.x, (decimal)self.y, (decimal)self.z);
    }
}

#endregion // ulong3

#region ulong4

public partial struct ulong4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint4(ulong4 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsUInt32());
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y, (uint)self.z, (uint)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int4(ulong4 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsInt32());
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y, (int)self.z, (int)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long4(ulong4 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsInt64());
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y, (long)self.z, (long)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half4(ulong4 self)
    {
        return new((half)self.x, (half)self.y, (half)self.z, (half)self.w);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double4(ulong4 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector256.ConvertToDouble(self.vector));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y, (double)self.z, (double)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static implicit operator decimal4(ulong4 self)
    {
        return new((decimal)self.x, (decimal)self.y, (decimal)self.z, (decimal)self.w);
    }
}

#endregion // ulong4

#region decimal2

public partial struct decimal2 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint2(decimal2 self)
    {
        return new((uint)self.x, (uint)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int2(decimal2 self)
    {
        return new((int)self.x, (int)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong2(decimal2 self)
    {
        return new((ulong)self.x, (ulong)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long2(decimal2 self)
    {
        return new((long)self.x, (long)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float2(decimal2 self)
    {
        return new((float)self.x, (float)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double2(decimal2 self)
    {
        return new((double)self.x, (double)self.y);
    }
}

#endregion // decimal2

#region decimal3

public partial struct decimal3 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint3(decimal3 self)
    {
        return new((uint)self.x, (uint)self.y, (uint)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int3(decimal3 self)
    {
        return new((int)self.x, (int)self.y, (int)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong3(decimal3 self)
    {
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long3(decimal3 self)
    {
        return new((long)self.x, (long)self.y, (long)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float3(decimal3 self)
    {
        return new((float)self.x, (float)self.y, (float)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double3(decimal3 self)
    {
        return new((double)self.x, (double)self.y, (double)self.z);
    }
}

#endregion // decimal3

#region decimal4

public partial struct decimal4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint4(decimal4 self)
    {
        return new((uint)self.x, (uint)self.y, (uint)self.z, (uint)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int4(decimal4 self)
    {
        return new((int)self.x, (int)self.y, (int)self.z, (int)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong4(decimal4 self)
    {
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z, (ulong)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long4(decimal4 self)
    {
        return new((long)self.x, (long)self.y, (long)self.z, (long)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float4(decimal4 self)
    {
        return new((float)self.x, (float)self.y, (float)self.z, (float)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double4(decimal4 self)
    {
        return new((double)self.x, (double)self.y, (double)self.z, (double)self.w);
    }
}

#endregion // decimal4

#region half2

public partial struct half2 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint2(half2 self)
    {
        return new((uint)self.x, (uint)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int2(half2 self)
    {
        return new((int)self.x, (int)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong2(half2 self)
    {
        return new((ulong)self.x, (ulong)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long2(half2 self)
    {
        return new((long)self.x, (long)self.y);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator float2(half2 self)
    {
        return new((float)self.x, (float)self.y);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double2(half2 self)
    {
        return new((double)self.x, (double)self.y);
    }
}

#endregion // half2

#region half3

public partial struct half3 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint3(half3 self)
    {
        return new((uint)self.x, (uint)self.y, (uint)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int3(half3 self)
    {
        return new((int)self.x, (int)self.y, (int)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong3(half3 self)
    {
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long3(half3 self)
    {
        return new((long)self.x, (long)self.y, (long)self.z);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator float3(half3 self)
    {
        return new((float)self.x, (float)self.y, (float)self.z);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double3(half3 self)
    {
        return new((double)self.x, (double)self.y, (double)self.z);
    }
}

#endregion // half3

#region half4

public partial struct half4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint4(half4 self)
    {
        return new((uint)self.x, (uint)self.y, (uint)self.z, (uint)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int4(half4 self)
    {
        return new((int)self.x, (int)self.y, (int)self.z, (int)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong4(half4 self)
    {
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z, (ulong)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long4(half4 self)
    {
        return new((long)self.x, (long)self.y, (long)self.z, (long)self.w);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator float4(half4 self)
    {
        return new((float)self.x, (float)self.y, (float)self.z, (float)self.w);
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double4(half4 self)
    {
        return new((double)self.x, (double)self.y, (double)self.z, (double)self.w);
    }
}

#endregion // half4

#region b16v2

public partial struct b16v2 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint2(b16v2 self)
    {
        return new((uint)self.x, (uint)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int2(b16v2 self)
    {
        return new((int)self.x, (int)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong2(b16v2 self)
    {
        return new((ulong)self.x, (ulong)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long2(b16v2 self)
    {
        return new((long)self.x, (long)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float2(b16v2 self)
    {
        return new((float)self.x, (float)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double2(b16v2 self)
    {
        return new((double)self.x, (double)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator decimal2(b16v2 self)
    {
        return new((decimal)self.x, (decimal)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half2(b16v2 self)
    {
        return new((half)self.x, (half)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b32v2(b16v2 self)
    {
        return new((b32v)self.x, (b32v)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b64v2(b16v2 self)
    {
        return new((b64v)self.x, (b64v)self.y);
    }
}

#endregion // b16v2

#region b16v3

public partial struct b16v3 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint3(b16v3 self)
    {
        return new((uint)self.x, (uint)self.y, (uint)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int3(b16v3 self)
    {
        return new((int)self.x, (int)self.y, (int)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong3(b16v3 self)
    {
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long3(b16v3 self)
    {
        return new((long)self.x, (long)self.y, (long)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float3(b16v3 self)
    {
        return new((float)self.x, (float)self.y, (float)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double3(b16v3 self)
    {
        return new((double)self.x, (double)self.y, (double)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator decimal3(b16v3 self)
    {
        return new((decimal)self.x, (decimal)self.y, (decimal)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half3(b16v3 self)
    {
        return new((half)self.x, (half)self.y, (half)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b32v3(b16v3 self)
    {
        return new((b32v)self.x, (b32v)self.y, (b32v)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b64v3(b16v3 self)
    {
        return new((b64v)self.x, (b64v)self.y, (b64v)self.z);
    }
}

#endregion // b16v3

#region b16v4

public partial struct b16v4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint4(b16v4 self)
    {
        return new((uint)self.x, (uint)self.y, (uint)self.z, (uint)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int4(b16v4 self)
    {
        return new((int)self.x, (int)self.y, (int)self.z, (int)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong4(b16v4 self)
    {
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z, (ulong)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long4(b16v4 self)
    {
        return new((long)self.x, (long)self.y, (long)self.z, (long)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float4(b16v4 self)
    {
        return new((float)self.x, (float)self.y, (float)self.z, (float)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double4(b16v4 self)
    {
        return new((double)self.x, (double)self.y, (double)self.z, (double)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator decimal4(b16v4 self)
    {
        return new((decimal)self.x, (decimal)self.y, (decimal)self.z, (decimal)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half4(b16v4 self)
    {
        return new((half)self.x, (half)self.y, (half)self.z, (half)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b32v4(b16v4 self)
    {
        return new((b32v)self.x, (b32v)self.y, (b32v)self.z, (b32v)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b64v4(b16v4 self)
    {
        return new((b64v)self.x, (b64v)self.y, (b64v)self.z, (b64v)self.w);
    }
}

#endregion // b16v4

#region b32v2

public partial struct b32v2 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint2(b32v2 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsUInt32());
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int2(b32v2 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsInt32());
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong2(b32v2 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector64.Widen(self.vector);
        return new(Vector128.Create(a, b).AsUInt64());
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long2(b32v2 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector64.Widen(self.vector);
        return new(Vector128.Create(a, b).AsInt64());
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float2(b32v2 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector64.ConvertToSingle(self.vector));
        #else // NET8_0_OR_GREATER
        return new((float)self.x, (float)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double2(b32v2 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector64.Widen(self.vector);
        return new(Vector128.ConvertToDouble(Vector128.Create(a, b)));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator decimal2(b32v2 self)
    {
        return new((decimal)self.x, (decimal)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half2(b32v2 self)
    {
        return new((half)self.x, (half)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b16v2(b32v2 self)
    {
        return new((b16v)self.x, (b16v)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b64v2(b32v2 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector64.Widen(self.vector);
        return new(Vector128.Create(a, b).AsUInt64());
        #else // NET8_0_OR_GREATER
        return new((b64v)self.x, (b64v)self.y);
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b32v2

#region b32v3

public partial struct b32v3 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint3(b32v3 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsUInt32());
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y, (uint)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int3(b32v3 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsInt32());
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y, (int)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong3(b32v3 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a, b).AsUInt64());
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long3(b32v3 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a, b).AsInt64());
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y, (long)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float3(b32v3 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.ConvertToSingle(self.vector));
        #else // NET8_0_OR_GREATER
        return new((float)self.x, (float)self.y, (float)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double3(b32v3 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.ConvertToDouble(Vector256.Create(a, b)));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y, (double)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator decimal3(b32v3 self)
    {
        return new((decimal)self.x, (decimal)self.y, (decimal)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half3(b32v3 self)
    {
        return new((half)self.x, (half)self.y, (half)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b16v3(b32v3 self)
    {
        return new((b16v)self.x, (b16v)self.y, (b16v)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b64v3(b32v3 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a, b).AsUInt64());
        #else // NET8_0_OR_GREATER
        return new((b64v)self.x, (b64v)self.y, (b64v)self.z);
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b32v3

#region b32v4

public partial struct b32v4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint4(b32v4 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsUInt32());
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y, (uint)self.z, (uint)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int4(b32v4 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsInt32());
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y, (int)self.z, (int)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong4(b32v4 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a, b).AsUInt64());
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z, (ulong)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long4(b32v4 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a, b).AsInt64());
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y, (long)self.z, (long)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float4(b32v4 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.ConvertToSingle(self.vector));
        #else // NET8_0_OR_GREATER
        return new((float)self.x, (float)self.y, (float)self.z, (float)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double4(b32v4 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.ConvertToDouble(Vector256.Create(a, b)));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y, (double)self.z, (double)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator decimal4(b32v4 self)
    {
        return new((decimal)self.x, (decimal)self.y, (decimal)self.z, (decimal)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half4(b32v4 self)
    {
        return new((half)self.x, (half)self.y, (half)self.z, (half)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b16v4(b32v4 self)
    {
        return new((b16v)self.x, (b16v)self.y, (b16v)self.z, (b16v)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b64v4(b32v4 self)
    {
        #if NET8_0_OR_GREATER
        var (a, b) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a, b).AsUInt64());
        #else // NET8_0_OR_GREATER
        return new((b64v)self.x, (b64v)self.y, (b64v)self.z, (b64v)self.w);
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b32v4

#region b64v2

public partial struct b64v2 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint2(b64v2 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector64.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsUInt32());
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int2(b64v2 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector64.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsInt32());
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong2(b64v2 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsUInt64());
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long2(b64v2 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsInt64());
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float2(b64v2 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector64.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(Vector64.ConvertToSingle(v));
        #else // NET8_0_OR_GREATER
        return new((float)self.x, (float)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double2(b64v2 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector128.ConvertToDouble(self.vector));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator decimal2(b64v2 self)
    {
        return new((decimal)self.x, (decimal)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half2(b64v2 self)
    {
        return new((half)self.x, (half)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b16v2(b64v2 self)
    {
        return new((b16v)self.x, (b16v)self.y);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b32v2(b64v2 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector64.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsUInt32());
        #else // NET8_0_OR_GREATER
        return new((b32v)self.x, (b32v)self.y);
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b64v2

#region b64v3

public partial struct b64v3 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint3(b64v3 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsUInt32());
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y, (uint)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int3(b64v3 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsInt32());
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y, (int)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong3(b64v3 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsUInt64());
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long3(b64v3 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsInt64());
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y, (long)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float3(b64v3 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(Vector128.ConvertToSingle(v));
        #else // NET8_0_OR_GREATER
        return new((float)self.x, (float)self.y, (float)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double3(b64v3 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector256.ConvertToDouble(self.vector));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y, (double)self.z);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator decimal3(b64v3 self)
    {
        return new((decimal)self.x, (decimal)self.y, (decimal)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half3(b64v3 self)
    {
        return new((half)self.x, (half)self.y, (half)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b16v3(b64v3 self)
    {
        return new((b16v)self.x, (b16v)self.y, (b16v)self.z);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b32v3(b64v3 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsUInt32());
        #else // NET8_0_OR_GREATER
        return new((b32v)self.x, (b32v)self.y, (b32v)self.z);
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b64v3

#region b64v4

public partial struct b64v4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint4(b64v4 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsUInt32());
        #else // NET8_0_OR_GREATER
        return new((uint)self.x, (uint)self.y, (uint)self.z, (uint)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int4(b64v4 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsInt32());
        #else // NET8_0_OR_GREATER
        return new((int)self.x, (int)self.y, (int)self.z, (int)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong4(b64v4 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsUInt64());
        #else // NET8_0_OR_GREATER
        return new((ulong)self.x, (ulong)self.y, (ulong)self.z, (ulong)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long4(b64v4 self)
    {
        #if NET8_0_OR_GREATER
        return new(self.vector.AsInt64());
        #else // NET8_0_OR_GREATER
        return new((long)self.x, (long)self.y, (long)self.z, (long)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float4(b64v4 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(Vector128.ConvertToSingle(v));
        #else // NET8_0_OR_GREATER
        return new((float)self.x, (float)self.y, (float)self.z, (float)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double4(b64v4 self)
    {
        #if NET8_0_OR_GREATER
        return new(Vector256.ConvertToDouble(self.vector));
        #else // NET8_0_OR_GREATER
        return new((double)self.x, (double)self.y, (double)self.z, (double)self.w);
        #endif // NET8_0_OR_GREATER
    }
    [MethodImpl(256 | 512)]
    public static explicit operator decimal4(b64v4 self)
    {
        return new((decimal)self.x, (decimal)self.y, (decimal)self.z, (decimal)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator half4(b64v4 self)
    {
        return new((half)self.x, (half)self.y, (half)self.z, (half)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b16v4(b64v4 self)
    {
        return new((b16v)self.x, (b16v)self.y, (b16v)self.z, (b16v)self.w);
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b32v4(b64v4 self)
    {
        #if NET8_0_OR_GREATER
        var v = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(v.AsUInt32());
        #else // NET8_0_OR_GREATER
        return new((b32v)self.x, (b32v)self.y, (b32v)self.z, (b32v)self.w);
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b64v4
