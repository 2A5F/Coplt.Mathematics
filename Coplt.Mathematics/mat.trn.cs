// generated by template, do not modify manually

namespace Coplt.Mathematics;

#region float2x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float2x2 transpose(this float2x2 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y)
        );
    }
}

#endregion // float2x2

#region float2x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float3x2 transpose(this float2x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose2x4To4x2(mat.c0.vector, mat.c1.vector, mat.c2.vector, default);
        return new(new(r.c0), new(r.c1));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // float2x3

#region float2x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float4x2 transpose(this float2x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose2x4To4x2(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // float2x4

#region float3x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float2x3 transpose(this float3x2 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x2To2x4(mat.c0.vector, mat.c1.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // float3x2

#region float3x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float3x3 transpose(this float3x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose3x3(mat.c0.vector, mat.c1.vector, mat.c2.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // float3x3

#region float3x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float4x3 transpose(this float3x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // float3x4

#region float4x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float2x4 transpose(this float4x2 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x2To2x4(mat.c0.vector, mat.c1.vector);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z),
            new(mat.c0.w, mat.c1.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // float4x2

#region float4x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float3x4 transpose(this float4x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, default);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // float4x3

#region float4x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float4x4 transpose(this float4x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w, mat.c3.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // float4x4

#region double2x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double2x2 transpose(this double2x2 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y)
        );
    }
}

#endregion // double2x2

#region double2x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double3x2 transpose(this double2x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose2x4To4x2(mat.c0.vector, mat.c1.vector, mat.c2.vector, default);
        return new(new(r.c0), new(r.c1));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // double2x3

#region double2x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double4x2 transpose(this double2x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose2x4To4x2(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // double2x4

#region double3x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double2x3 transpose(this double3x2 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x2To2x4(mat.c0.vector, mat.c1.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // double3x2

#region double3x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double3x3 transpose(this double3x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose3x3(mat.c0.vector, mat.c1.vector, mat.c2.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // double3x3

#region double3x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double4x3 transpose(this double3x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // double3x4

#region double4x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double2x4 transpose(this double4x2 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x2To2x4(mat.c0.vector, mat.c1.vector);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z),
            new(mat.c0.w, mat.c1.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // double4x2

#region double4x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double3x4 transpose(this double4x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, default);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // double4x3

#region double4x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double4x4 transpose(this double4x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w, mat.c3.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // double4x4

#region int2x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int2x2 transpose(this int2x2 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y)
        );
    }
}

#endregion // int2x2

#region int2x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int3x2 transpose(this int2x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose2x4To4x2(mat.c0.vector, mat.c1.vector, mat.c2.vector, default);
        return new(new(r.c0), new(r.c1));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // int2x3

#region int2x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int4x2 transpose(this int2x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose2x4To4x2(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // int2x4

#region int3x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int2x3 transpose(this int3x2 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x2To2x4(mat.c0.vector, mat.c1.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // int3x2

#region int3x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int3x3 transpose(this int3x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose3x3(mat.c0.vector, mat.c1.vector, mat.c2.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // int3x3

#region int3x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int4x3 transpose(this int3x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // int3x4

#region int4x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int2x4 transpose(this int4x2 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x2To2x4(mat.c0.vector, mat.c1.vector);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z),
            new(mat.c0.w, mat.c1.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // int4x2

#region int4x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int3x4 transpose(this int4x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, default);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // int4x3

#region int4x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static int4x4 transpose(this int4x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w, mat.c3.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // int4x4

#region uint2x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint2x2 transpose(this uint2x2 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y)
        );
    }
}

#endregion // uint2x2

#region uint2x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint3x2 transpose(this uint2x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose2x4To4x2(mat.c0.vector, mat.c1.vector, mat.c2.vector, default);
        return new(new(r.c0), new(r.c1));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // uint2x3

#region uint2x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint4x2 transpose(this uint2x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose2x4To4x2(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // uint2x4

#region uint3x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint2x3 transpose(this uint3x2 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x2To2x4(mat.c0.vector, mat.c1.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // uint3x2

#region uint3x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint3x3 transpose(this uint3x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose3x3(mat.c0.vector, mat.c1.vector, mat.c2.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // uint3x3

#region uint3x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint4x3 transpose(this uint3x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // uint3x4

#region uint4x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint2x4 transpose(this uint4x2 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x2To2x4(mat.c0.vector, mat.c1.vector);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z),
            new(mat.c0.w, mat.c1.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // uint4x2

#region uint4x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint3x4 transpose(this uint4x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, default);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // uint4x3

#region uint4x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static uint4x4 transpose(this uint4x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w, mat.c3.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // uint4x4

#region long2x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long2x2 transpose(this long2x2 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y)
        );
    }
}

#endregion // long2x2

#region long2x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long3x2 transpose(this long2x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose2x4To4x2(mat.c0.vector, mat.c1.vector, mat.c2.vector, default);
        return new(new(r.c0), new(r.c1));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // long2x3

#region long2x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long4x2 transpose(this long2x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose2x4To4x2(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // long2x4

#region long3x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long2x3 transpose(this long3x2 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x2To2x4(mat.c0.vector, mat.c1.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // long3x2

#region long3x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long3x3 transpose(this long3x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose3x3(mat.c0.vector, mat.c1.vector, mat.c2.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // long3x3

#region long3x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long4x3 transpose(this long3x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // long3x4

#region long4x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long2x4 transpose(this long4x2 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x2To2x4(mat.c0.vector, mat.c1.vector);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z),
            new(mat.c0.w, mat.c1.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // long4x2

#region long4x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long3x4 transpose(this long4x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, default);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // long4x3

#region long4x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static long4x4 transpose(this long4x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w, mat.c3.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // long4x4

#region ulong2x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong2x2 transpose(this ulong2x2 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y)
        );
    }
}

#endregion // ulong2x2

#region ulong2x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong3x2 transpose(this ulong2x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose2x4To4x2(mat.c0.vector, mat.c1.vector, mat.c2.vector, default);
        return new(new(r.c0), new(r.c1));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong2x3

#region ulong2x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong4x2 transpose(this ulong2x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose2x4To4x2(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong2x4

#region ulong3x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong2x3 transpose(this ulong3x2 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x2To2x4(mat.c0.vector, mat.c1.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong3x2

#region ulong3x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong3x3 transpose(this ulong3x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose3x3(mat.c0.vector, mat.c1.vector, mat.c2.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong3x3

#region ulong3x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong4x3 transpose(this ulong3x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong3x4

#region ulong4x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong2x4 transpose(this ulong4x2 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x2To2x4(mat.c0.vector, mat.c1.vector);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z),
            new(mat.c0.w, mat.c1.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong4x2

#region ulong4x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong3x4 transpose(this ulong4x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, default);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong4x3

#region ulong4x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static ulong4x4 transpose(this ulong4x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w, mat.c3.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong4x4

#region decimal2x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal2x2 transpose(this decimal2x2 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y)
        );
    }
}

#endregion // decimal2x2

#region decimal2x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal3x2 transpose(this decimal2x3 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y)
        );
    }
}

#endregion // decimal2x3

#region decimal2x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal4x2 transpose(this decimal2x4 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y)
        );
    }
}

#endregion // decimal2x4

#region decimal3x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal2x3 transpose(this decimal3x2 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z)
        );
    }
}

#endregion // decimal3x2

#region decimal3x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal3x3 transpose(this decimal3x3 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z)
        );
    }
}

#endregion // decimal3x3

#region decimal3x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal4x3 transpose(this decimal3x4 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z)
        );
    }
}

#endregion // decimal3x4

#region decimal4x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal2x4 transpose(this decimal4x2 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z),
            new(mat.c0.w, mat.c1.w)
        );
    }
}

#endregion // decimal4x2

#region decimal4x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal3x4 transpose(this decimal4x3 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w)
        );
    }
}

#endregion // decimal4x3

#region decimal4x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal4x4 transpose(this decimal4x4 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w, mat.c3.w)
        );
    }
}

#endregion // decimal4x4

#region half2x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half2x2 transpose(this half2x2 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y)
        );
    }
}

#endregion // half2x2

#region half2x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half3x2 transpose(this half2x3 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y)
        );
    }
}

#endregion // half2x3

#region half2x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half4x2 transpose(this half2x4 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y)
        );
    }
}

#endregion // half2x4

#region half3x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half2x3 transpose(this half3x2 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z)
        );
    }
}

#endregion // half3x2

#region half3x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half3x3 transpose(this half3x3 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z)
        );
    }
}

#endregion // half3x3

#region half3x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half4x3 transpose(this half3x4 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z)
        );
    }
}

#endregion // half3x4

#region half4x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half2x4 transpose(this half4x2 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z),
            new(mat.c0.w, mat.c1.w)
        );
    }
}

#endregion // half4x2

#region half4x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half3x4 transpose(this half4x3 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w)
        );
    }
}

#endregion // half4x3

#region half4x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half4x4 transpose(this half4x4 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w, mat.c3.w)
        );
    }
}

#endregion // half4x4

#region b16m2x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b16m2x2 transpose(this b16m2x2 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y)
        );
    }
}

#endregion // b16m2x2

#region b16m2x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b16m3x2 transpose(this b16m2x3 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y)
        );
    }
}

#endregion // b16m2x3

#region b16m2x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b16m4x2 transpose(this b16m2x4 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y)
        );
    }
}

#endregion // b16m2x4

#region b16m3x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b16m2x3 transpose(this b16m3x2 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z)
        );
    }
}

#endregion // b16m3x2

#region b16m3x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b16m3x3 transpose(this b16m3x3 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z)
        );
    }
}

#endregion // b16m3x3

#region b16m3x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b16m4x3 transpose(this b16m3x4 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z)
        );
    }
}

#endregion // b16m3x4

#region b16m4x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b16m2x4 transpose(this b16m4x2 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z),
            new(mat.c0.w, mat.c1.w)
        );
    }
}

#endregion // b16m4x2

#region b16m4x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b16m3x4 transpose(this b16m4x3 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w)
        );
    }
}

#endregion // b16m4x3

#region b16m4x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b16m4x4 transpose(this b16m4x4 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w, mat.c3.w)
        );
    }
}

#endregion // b16m4x4

#region b32m2x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b32m2x2 transpose(this b32m2x2 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y)
        );
    }
}

#endregion // b32m2x2

#region b32m2x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b32m3x2 transpose(this b32m2x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose2x4To4x2(mat.c0.vector, mat.c1.vector, mat.c2.vector, default);
        return new(new(r.c0), new(r.c1));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b32m2x3

#region b32m2x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b32m4x2 transpose(this b32m2x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose2x4To4x2(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b32m2x4

#region b32m3x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b32m2x3 transpose(this b32m3x2 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x2To2x4(mat.c0.vector, mat.c1.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b32m3x2

#region b32m3x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b32m3x3 transpose(this b32m3x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose3x3(mat.c0.vector, mat.c1.vector, mat.c2.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b32m3x3

#region b32m3x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b32m4x3 transpose(this b32m3x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b32m3x4

#region b32m4x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b32m2x4 transpose(this b32m4x2 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x2To2x4(mat.c0.vector, mat.c1.vector);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z),
            new(mat.c0.w, mat.c1.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b32m4x2

#region b32m4x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b32m3x4 transpose(this b32m4x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, default);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b32m4x3

#region b32m4x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b32m4x4 transpose(this b32m4x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w, mat.c3.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b32m4x4

#region b64m2x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b64m2x2 transpose(this b64m2x2 mat)
    {
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y)
        );
    }
}

#endregion // b64m2x2

#region b64m2x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b64m3x2 transpose(this b64m2x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose2x4To4x2(mat.c0.vector, mat.c1.vector, mat.c2.vector, default);
        return new(new(r.c0), new(r.c1));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b64m2x3

#region b64m2x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b64m4x2 transpose(this b64m2x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose2x4To4x2(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b64m2x4

#region b64m3x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b64m2x3 transpose(this b64m3x2 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x2To2x4(mat.c0.vector, mat.c1.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b64m3x2

#region b64m3x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b64m3x3 transpose(this b64m3x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose3x3(mat.c0.vector, mat.c1.vector, mat.c2.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b64m3x3

#region b64m3x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b64m4x3 transpose(this b64m3x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1), new(r.c2));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b64m3x4

#region b64m4x2

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b64m2x4 transpose(this b64m4x2 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x2To2x4(mat.c0.vector, mat.c1.vector);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x),
            new(mat.c0.y, mat.c1.y),
            new(mat.c0.z, mat.c1.z),
            new(mat.c0.w, mat.c1.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b64m4x2

#region b64m4x3

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b64m3x4 transpose(this b64m4x3 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, default);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b64m4x3

#region b64m4x4

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static b64m4x4 transpose(this b64m4x4 mat)
    {
        #if NET8_0_OR_GREATER
        var r = simd_matrix.Transpose4x4(mat.c0.vector, mat.c1.vector, mat.c2.vector, mat.c3.vector);
        return new(new(r.c0), new(r.c1), new(r.c2), new(r.c3));
        #else // NET8_0_OR_GREATER
        return new(
            new(mat.c0.x, mat.c1.x, mat.c2.x, mat.c3.x),
            new(mat.c0.y, mat.c1.y, mat.c2.y, mat.c3.y),
            new(mat.c0.z, mat.c1.z, mat.c2.z, mat.c3.z),
            new(mat.c0.w, mat.c1.w, mat.c2.w, mat.c3.w)
        );
        #endif // NET8_0_OR_GREATER
    }
}

#endregion // b64m4x4
