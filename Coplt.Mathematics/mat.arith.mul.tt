<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        if (!typ.arith) continue;

        for (var n = 2; n <= 4; n++)
        {
            for (var m = 2; m <= 4; m++)
            {
                var byteSize = typ.size * (n is 3 ? 4 : n);
                var bitSize = 8 * byteSize;

                var vecTypeName = $"{typ.name}{n}";
                var vecTypeNameM = $"{typ.name}{m}";
                var typeName = $"{typ.name.Replace('v', 'm')}{n}x{m}";

                var bType = $"b{typ.size * 8}v";
                var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
                var bTypeName = $"{bType.Replace('v', 'm')}{n}x{m}";
#>

#region <#= typeName #>

public static partial class math
{
<#
                for (int v = 2; v <= n; v++)
                {
                    var mulTypeName = $"{typ.name.Replace('v', 'm')}{m}x{v}";
                    var rTypeName = $"{typ.name.Replace('v', 'm')}{n}x{v}";
#>
    [MethodImpl(256 | 512)]
    public static <#= rTypeName #> mul(this <#= typeName #> a, <#= mulTypeName #> b)
        => new(
<#
                    for (var b = 0; b < v; b++)
                    {
                        var split = b + 1 < v ? "," : "";
#>
            <#= string.Join(" + ", Enumerable.Range(0, m).Select(a => $"a.c{a} * b.c{b}.{string.Join("", Enumerable.Repeat(Typ.xyzw[a], n))}")) #><#= split #>
<#
                    }
#>
    );
<#
                }
#>
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
