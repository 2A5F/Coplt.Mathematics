// generated by template, do not modify manually

using System;
#if NET8_0_OR_GREATER
using System.Numerics;
using System.Runtime.Intrinsics;
#endif
using System.Runtime.CompilerServices;

namespace Coplt.Mathematics;

#region float2

public partial struct float2 
{
    public float2 xx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector64.Shuffle(vector, Vector64.Create(0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x);
#endif // NET8_0_OR_GREATER
    }
    public float2 rr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector64.Shuffle(vector, Vector64.Create(0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x);
#endif // NET8_0_OR_GREATER
    }
    public float2 xy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => this;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value;
    }
    public float2 rg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => this;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value;
    }
    public float2 yx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector64.Shuffle(vector, Vector64.Create(1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value.yx;
    }
    public float2 gr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector64.Shuffle(vector, Vector64.Create(1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value.yx;
    }
    public float2 yy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector64.Shuffle(vector, Vector64.Create(1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y);
#endif // NET8_0_OR_GREATER
    }
    public float2 gg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector64.Shuffle(vector, Vector64.Create(1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // float2

#region double2

public partial struct double2 
{
    public double2 xx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x);
#endif // NET8_0_OR_GREATER
    }
    public double2 rr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x);
#endif // NET8_0_OR_GREATER
    }
    public double2 xy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => this;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value;
    }
    public double2 rg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => this;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value;
    }
    public double2 yx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value.yx;
    }
    public double2 gr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value.yx;
    }
    public double2 yy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y);
#endif // NET8_0_OR_GREATER
    }
    public double2 gg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // double2

#region int2

public partial struct int2 
{
    public int2 xx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector64.Shuffle(vector, Vector64.Create(0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x);
#endif // NET8_0_OR_GREATER
    }
    public int2 rr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector64.Shuffle(vector, Vector64.Create(0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x);
#endif // NET8_0_OR_GREATER
    }
    public int2 xy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => this;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value;
    }
    public int2 rg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => this;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value;
    }
    public int2 yx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector64.Shuffle(vector, Vector64.Create(1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value.yx;
    }
    public int2 gr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector64.Shuffle(vector, Vector64.Create(1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value.yx;
    }
    public int2 yy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector64.Shuffle(vector, Vector64.Create(1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y);
#endif // NET8_0_OR_GREATER
    }
    public int2 gg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector64.Shuffle(vector, Vector64.Create(1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // int2

#region uint2

public partial struct uint2 
{
    public uint2 xx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector64.Shuffle(vector, Vector64.Create((uint)0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint2 rr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector64.Shuffle(vector, Vector64.Create((uint)0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint2 xy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => this;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value;
    }
    public uint2 rg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => this;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value;
    }
    public uint2 yx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector64.Shuffle(vector, Vector64.Create((uint)1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value.yx;
    }
    public uint2 gr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector64.Shuffle(vector, Vector64.Create((uint)1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value.yx;
    }
    public uint2 yy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector64.Shuffle(vector, Vector64.Create((uint)1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint2 gg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector64.Shuffle(vector, Vector64.Create((uint)1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // uint2

#region long2

public partial struct long2 
{
    public long2 xx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x);
#endif // NET8_0_OR_GREATER
    }
    public long2 rr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x);
#endif // NET8_0_OR_GREATER
    }
    public long2 xy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => this;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value;
    }
    public long2 rg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => this;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value;
    }
    public long2 yx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value.yx;
    }
    public long2 gr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value.yx;
    }
    public long2 yy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y);
#endif // NET8_0_OR_GREATER
    }
    public long2 gg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // long2

#region ulong2

public partial struct ulong2 
{
    public ulong2 xx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((ulong)0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong2 rr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((ulong)0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong2 xy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => this;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value;
    }
    public ulong2 rg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => this;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value;
    }
    public ulong2 yx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((ulong)1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value.yx;
    }
    public ulong2 gr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((ulong)1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value.yx;
    }
    public ulong2 yy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((ulong)1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong2 gg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((ulong)1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong2

#region bool2

public partial struct bool2 
{
    public bool2 xx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x);
    }
    public bool2 rr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(x, x);
    }
    public bool2 xy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => this;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value;
    }
    public bool2 rg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => this;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value;
    }
    public bool2 yx
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value.yx;
    }
    public bool2 gr
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, x);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set => this = value.yx;
    }
    public bool2 yy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y);
    }
    public bool2 gg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new(y, y);
    }
}

#endregion // bool2
