<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="types.ttinclude" #>// generated by template, do not modify manually

using System;
#if NET8_0_OR_GREATER
using System.Numerics;
using System.Runtime.Intrinsics;
#endif
using System.Runtime.CompilerServices;
using half = System.Half;

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        var typeName = $"{typ.name}4";
        var typeName3 = $"{typ.name}3";
        var type = typ.name;

        var byteSize = typ.size * 4;
        var bitSize = 8 * byteSize;

        var byteSize3 = typ.size * 4;
        var bitSize3 = 8 * byteSize3;
#>

#region <#= typeName #>

public partial struct <#= typeName #> 
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public <#= typeName #>(<#= typeName3 #> xyz, <#= type #> w)
    {
<#
        if (typ.simd)
        {
#>
        #if NET8_0_OR_GREATER
        vector = xyz.vector.WithElement(3, w);
        #else // NET8_0_OR_GREATER
<#
        }
#>
        this.x = xyz.x;
        this.y = xyz.y;
        this.z = xyz.z;
        this.w = w;
<#
        if (typ.simd)
        {
#>
        #endif // NET8_0_OR_GREATER
<#
        }
#>
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public <#= typeName #>(<#= type #> x, <#= typeName3 #> yzw)
    {
<#
        if (typ.simd)
        {
#>
        #if NET8_0_OR_GREATER
        vector = Vector<#= bitSize #>.Shuffle(xzw.vector.WithElement(3, x), Vector<#= bitSize #>.Create(<#= typ.shuffleCast #>3, 0, 1, 2));
        #else // NET8_0_OR_GREATER
<#
        }
#>
        this.x = x;
        this.y = yzw.x;
        this.z = yzw.y;
        this.w = yzw.z;
<#
        if (typ.simd)
        {
#>
        #endif // NET8_0_OR_GREATER
<#
        }
#>
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal <#= typeName #>(<#= typeName3 #> xzw, <#= type #> y, insert_y _)
    {
<#
        if (typ.simd)
        {
#>
        #if NET8_0_OR_GREATER
        vector = Vector<#= bitSize #>.Shuffle(xzw.vector.WithElement(3, y), Vector<#= bitSize #>.Create(<#= typ.shuffleCast #>0, 3, 1, 2));
        #else // NET8_0_OR_GREATER
<#
        }
#>
        this.x = xzw.x;
        this.y = y;
        this.z = xzw.y;
        this.w = xzw.z;
<#
        if (typ.simd)
        {
#>
        #endif // NET8_0_OR_GREATER
<#
        }
#>
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal <#= typeName #>(<#= typeName3 #> xyw, <#= type #> z, insert_z _)
    {
<#
        if (typ.simd)
        {
#>
        #if NET8_0_OR_GREATER
        vector = Vector<#= bitSize #>.Shuffle(xzw.vector.WithElement(3, z), Vector<#= bitSize #>.Create(<#= typ.shuffleCast #>0, 1, 3, 2));
        #else // NET8_0_OR_GREATER
<#
        }
#>
        this.x = xyw.x;
        this.y = xyw.y;
        this.z = z;
        this.w = xyw.z;
<#
        if (typ.simd)
        {
#>
        #endif // NET8_0_OR_GREATER
<#
        }
#>
    }
}

public static partial class math
{
    /// <summary>
    /// Insert X component
    /// <code>X -> (y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= typeName #> Ix(this <#= typeName3 #> yzw, <#= type #> x) => new(x, yzw);

    /// <summary>
    /// Insert Y component
    /// <code>Y -> (x, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= typeName #> Iy(this <#= typeName3 #> xzw, <#= type #> y) => new(xzw, y, new insert_y());

    /// <summary>
    /// Insert Z component
    /// <code>Z -> (x, y, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= typeName #> Iz(this <#= typeName3 #> xyw, <#= type #> z) => new(xyw, z, new insert_z());

    /// <summary>
    /// Insert W component
    /// <code>W -> (x, y, z) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= typeName #> Iw(this <#= typeName3 #> xyz, <#= type #> w) => new(xyz, w);
}

#endregion // <#= typeName #>
<#
    }
#>
