<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        var byteSize4 = typ.size * 4;
        var bitSize4 = 8 * byteSize4;

        var typeName = $"{typ.name}4";
#>

[Ex]
public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> unpacklo([This] <#= typeName #> a, <#= typeName #> b)
    {
<#
        if (typ.simd)
        {
#>
        if (Vector<#= bitSize4 #>.IsHardwareAccelerated)
            return new(simd.UnpackLow(a.vector, b.vector));
<#
        }
#>
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> unpackhi([This] <#= typeName #> a, <#= typeName #> b)
    {
<#
        if (typ.simd)
        {
#>
        if (Vector<#= bitSize4 #>.IsHardwareAccelerated)
            return new(simd.UnpackHigh(a.vector, b.vector));
<#
        }
#>
        return new(a.z, b.z, a.w, b.w);
    }
}
<#
    }
#>
