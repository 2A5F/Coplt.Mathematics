// generated by template, do not modify manually

namespace Coplt.Mathematics;

public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 unpacklo(this float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.UnpackLow(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x, b.x, a.y, b.y);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 unpackhi(this float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.UnpackHigh(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.z, b.z, a.w, b.w);
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 unpacklo(this double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.UnpackLow(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x, b.x, a.y, b.y);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 unpackhi(this double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.UnpackHigh(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.z, b.z, a.w, b.w);
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 unpacklo(this short4 a, short4 b)
    {
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 unpackhi(this short4 a, short4 b)
    {
        return new(a.z, b.z, a.w, b.w);
    }
}

public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 unpacklo(this ushort4 a, ushort4 b)
    {
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 unpackhi(this ushort4 a, ushort4 b)
    {
        return new(a.z, b.z, a.w, b.w);
    }
}

public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 unpacklo(this int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.UnpackLow(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x, b.x, a.y, b.y);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 unpackhi(this int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.UnpackHigh(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.z, b.z, a.w, b.w);
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 unpacklo(this uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.UnpackLow(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x, b.x, a.y, b.y);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 unpackhi(this uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.UnpackHigh(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.z, b.z, a.w, b.w);
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 unpacklo(this long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.UnpackLow(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x, b.x, a.y, b.y);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 unpackhi(this long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.UnpackHigh(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.z, b.z, a.w, b.w);
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 unpacklo(this ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.UnpackLow(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x, b.x, a.y, b.y);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 unpackhi(this ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.UnpackHigh(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.z, b.z, a.w, b.w);
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 unpacklo(this decimal4 a, decimal4 b)
    {
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 unpackhi(this decimal4 a, decimal4 b)
    {
        return new(a.z, b.z, a.w, b.w);
    }
}

public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 unpacklo(this half4 a, half4 b)
    {
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 unpackhi(this half4 a, half4 b)
    {
        return new(a.z, b.z, a.w, b.w);
    }
}

public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 unpacklo(this b16v4 a, b16v4 b)
    {
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 unpackhi(this b16v4 a, b16v4 b)
    {
        return new(a.z, b.z, a.w, b.w);
    }
}

public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 unpacklo(this b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.UnpackLow(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x, b.x, a.y, b.y);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 unpackhi(this b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.UnpackHigh(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.z, b.z, a.w, b.w);
        #endif // NET8_0_OR_GREATER
    }
}

public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 unpacklo(this b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.UnpackLow(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.x, b.x, a.y, b.y);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 unpackhi(this b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd.UnpackHigh(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return new(a.z, b.z, a.w, b.w);
        #endif // NET8_0_OR_GREATER
    }
}
