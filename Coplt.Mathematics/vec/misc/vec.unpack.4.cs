// generated by template, do not modify manually

namespace Coplt.Mathematics;

[Ex]
public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 unpacklo([This] float4 a, float4 b)
    {
        if (Vector128.IsHardwareAccelerated)
            return new(simd.UnpackLow(a.vector, b.vector));
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 unpackhi([This] float4 a, float4 b)
    {
        if (Vector128.IsHardwareAccelerated)
            return new(simd.UnpackHigh(a.vector, b.vector));
        return new(a.z, b.z, a.w, b.w);
    }
}

[Ex]
public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 unpacklo([This] double4 a, double4 b)
    {
        if (Vector256.IsHardwareAccelerated)
            return new(simd.UnpackLow(a.vector, b.vector));
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 unpackhi([This] double4 a, double4 b)
    {
        if (Vector256.IsHardwareAccelerated)
            return new(simd.UnpackHigh(a.vector, b.vector));
        return new(a.z, b.z, a.w, b.w);
    }
}

[Ex]
public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 unpacklo([This] short4 a, short4 b)
    {
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 unpackhi([This] short4 a, short4 b)
    {
        return new(a.z, b.z, a.w, b.w);
    }
}

[Ex]
public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 unpacklo([This] ushort4 a, ushort4 b)
    {
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 unpackhi([This] ushort4 a, ushort4 b)
    {
        return new(a.z, b.z, a.w, b.w);
    }
}

[Ex]
public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 unpacklo([This] int4 a, int4 b)
    {
        if (Vector128.IsHardwareAccelerated)
            return new(simd.UnpackLow(a.vector, b.vector));
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 unpackhi([This] int4 a, int4 b)
    {
        if (Vector128.IsHardwareAccelerated)
            return new(simd.UnpackHigh(a.vector, b.vector));
        return new(a.z, b.z, a.w, b.w);
    }
}

[Ex]
public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 unpacklo([This] uint4 a, uint4 b)
    {
        if (Vector128.IsHardwareAccelerated)
            return new(simd.UnpackLow(a.vector, b.vector));
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 unpackhi([This] uint4 a, uint4 b)
    {
        if (Vector128.IsHardwareAccelerated)
            return new(simd.UnpackHigh(a.vector, b.vector));
        return new(a.z, b.z, a.w, b.w);
    }
}

[Ex]
public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 unpacklo([This] long4 a, long4 b)
    {
        if (Vector256.IsHardwareAccelerated)
            return new(simd.UnpackLow(a.vector, b.vector));
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 unpackhi([This] long4 a, long4 b)
    {
        if (Vector256.IsHardwareAccelerated)
            return new(simd.UnpackHigh(a.vector, b.vector));
        return new(a.z, b.z, a.w, b.w);
    }
}

[Ex]
public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 unpacklo([This] ulong4 a, ulong4 b)
    {
        if (Vector256.IsHardwareAccelerated)
            return new(simd.UnpackLow(a.vector, b.vector));
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 unpackhi([This] ulong4 a, ulong4 b)
    {
        if (Vector256.IsHardwareAccelerated)
            return new(simd.UnpackHigh(a.vector, b.vector));
        return new(a.z, b.z, a.w, b.w);
    }
}

[Ex]
public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 unpacklo([This] decimal4 a, decimal4 b)
    {
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 unpackhi([This] decimal4 a, decimal4 b)
    {
        return new(a.z, b.z, a.w, b.w);
    }
}

[Ex]
public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 unpacklo([This] half4 a, half4 b)
    {
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 unpackhi([This] half4 a, half4 b)
    {
        return new(a.z, b.z, a.w, b.w);
    }
}

[Ex]
public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 unpacklo([This] b16v4 a, b16v4 b)
    {
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 unpackhi([This] b16v4 a, b16v4 b)
    {
        return new(a.z, b.z, a.w, b.w);
    }
}

[Ex]
public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 unpacklo([This] b32v4 a, b32v4 b)
    {
        if (Vector128.IsHardwareAccelerated)
            return new(simd.UnpackLow(a.vector, b.vector));
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 unpackhi([This] b32v4 a, b32v4 b)
    {
        if (Vector128.IsHardwareAccelerated)
            return new(simd.UnpackHigh(a.vector, b.vector));
        return new(a.z, b.z, a.w, b.w);
    }
}

[Ex]
public static partial class math
{
    /// <summary>
    /// Interlace the lower part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (x0, x1, y0, y1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 unpacklo([This] b64v4 a, b64v4 b)
    {
        if (Vector256.IsHardwareAccelerated)
            return new(simd.UnpackLow(a.vector, b.vector));
        return new(a.x, b.x, a.y, b.y);
    }

    /// <summary>
    /// Interlace the high part of a b
    /// <code>
    /// a (x0, y0, z0, w0)
    /// b (x1, y1, z1, w1)
    /// r (z0, z1, w0, w1)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 unpackhi([This] b64v4 a, b64v4 b)
    {
        if (Vector256.IsHardwareAccelerated)
            return new(simd.UnpackHigh(a.vector, b.vector));
        return new(a.z, b.z, a.w, b.w);
    }
}
