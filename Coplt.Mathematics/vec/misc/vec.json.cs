// generated by template, do not modify manually

namespace Coplt.Mathematics.Json;

#region float2

[CpuOnly]
public class float2JsonConverter : JsonConverter<float2>
{
    public override float2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetSingle();
        reader.Read();
        var y = reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y);
    }
    public override void Write(Utf8JsonWriter writer, float2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteEndArray();
    }
}

#endregion // float2

#region float3

[CpuOnly]
public class float3JsonConverter : JsonConverter<float3>
{
    public override float3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetSingle();
        reader.Read();
        var y = reader.GetSingle();
        reader.Read();
        var z = reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z);
    }
    public override void Write(Utf8JsonWriter writer, float3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteNumberValue(value.z);
        writer.WriteEndArray();
    }
}

#endregion // float3

#region float4

[CpuOnly]
public class float4JsonConverter : JsonConverter<float4>
{
    public override float4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetSingle();
        reader.Read();
        var y = reader.GetSingle();
        reader.Read();
        var z = reader.GetSingle();
        reader.Read();
        var w = reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z, w);
    }
    public override void Write(Utf8JsonWriter writer, float4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteNumberValue(value.z);
        writer.WriteNumberValue(value.w);
        writer.WriteEndArray();
    }
}

#endregion // float4

#region double2

[CpuOnly]
public class double2JsonConverter : JsonConverter<double2>
{
    public override double2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetDouble();
        reader.Read();
        var y = reader.GetDouble();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y);
    }
    public override void Write(Utf8JsonWriter writer, double2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteEndArray();
    }
}

#endregion // double2

#region double3

[CpuOnly]
public class double3JsonConverter : JsonConverter<double3>
{
    public override double3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetDouble();
        reader.Read();
        var y = reader.GetDouble();
        reader.Read();
        var z = reader.GetDouble();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z);
    }
    public override void Write(Utf8JsonWriter writer, double3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteNumberValue(value.z);
        writer.WriteEndArray();
    }
}

#endregion // double3

#region double4

[CpuOnly]
public class double4JsonConverter : JsonConverter<double4>
{
    public override double4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetDouble();
        reader.Read();
        var y = reader.GetDouble();
        reader.Read();
        var z = reader.GetDouble();
        reader.Read();
        var w = reader.GetDouble();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z, w);
    }
    public override void Write(Utf8JsonWriter writer, double4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteNumberValue(value.z);
        writer.WriteNumberValue(value.w);
        writer.WriteEndArray();
    }
}

#endregion // double4

#region short2

[CpuOnly]
public class short2JsonConverter : JsonConverter<short2>
{
    public override short2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetInt16();
        reader.Read();
        var y = reader.GetInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y);
    }
    public override void Write(Utf8JsonWriter writer, short2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteEndArray();
    }
}

#endregion // short2

#region short3

[CpuOnly]
public class short3JsonConverter : JsonConverter<short3>
{
    public override short3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetInt16();
        reader.Read();
        var y = reader.GetInt16();
        reader.Read();
        var z = reader.GetInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z);
    }
    public override void Write(Utf8JsonWriter writer, short3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteNumberValue(value.z);
        writer.WriteEndArray();
    }
}

#endregion // short3

#region short4

[CpuOnly]
public class short4JsonConverter : JsonConverter<short4>
{
    public override short4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetInt16();
        reader.Read();
        var y = reader.GetInt16();
        reader.Read();
        var z = reader.GetInt16();
        reader.Read();
        var w = reader.GetInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z, w);
    }
    public override void Write(Utf8JsonWriter writer, short4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteNumberValue(value.z);
        writer.WriteNumberValue(value.w);
        writer.WriteEndArray();
    }
}

#endregion // short4

#region ushort2

[CpuOnly]
public class ushort2JsonConverter : JsonConverter<ushort2>
{
    public override ushort2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetUInt16();
        reader.Read();
        var y = reader.GetUInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y);
    }
    public override void Write(Utf8JsonWriter writer, ushort2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteEndArray();
    }
}

#endregion // ushort2

#region ushort3

[CpuOnly]
public class ushort3JsonConverter : JsonConverter<ushort3>
{
    public override ushort3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetUInt16();
        reader.Read();
        var y = reader.GetUInt16();
        reader.Read();
        var z = reader.GetUInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z);
    }
    public override void Write(Utf8JsonWriter writer, ushort3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteNumberValue(value.z);
        writer.WriteEndArray();
    }
}

#endregion // ushort3

#region ushort4

[CpuOnly]
public class ushort4JsonConverter : JsonConverter<ushort4>
{
    public override ushort4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetUInt16();
        reader.Read();
        var y = reader.GetUInt16();
        reader.Read();
        var z = reader.GetUInt16();
        reader.Read();
        var w = reader.GetUInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z, w);
    }
    public override void Write(Utf8JsonWriter writer, ushort4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteNumberValue(value.z);
        writer.WriteNumberValue(value.w);
        writer.WriteEndArray();
    }
}

#endregion // ushort4

#region int2

[CpuOnly]
public class int2JsonConverter : JsonConverter<int2>
{
    public override int2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetInt32();
        reader.Read();
        var y = reader.GetInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y);
    }
    public override void Write(Utf8JsonWriter writer, int2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteEndArray();
    }
}

#endregion // int2

#region int3

[CpuOnly]
public class int3JsonConverter : JsonConverter<int3>
{
    public override int3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetInt32();
        reader.Read();
        var y = reader.GetInt32();
        reader.Read();
        var z = reader.GetInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z);
    }
    public override void Write(Utf8JsonWriter writer, int3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteNumberValue(value.z);
        writer.WriteEndArray();
    }
}

#endregion // int3

#region int4

[CpuOnly]
public class int4JsonConverter : JsonConverter<int4>
{
    public override int4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetInt32();
        reader.Read();
        var y = reader.GetInt32();
        reader.Read();
        var z = reader.GetInt32();
        reader.Read();
        var w = reader.GetInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z, w);
    }
    public override void Write(Utf8JsonWriter writer, int4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteNumberValue(value.z);
        writer.WriteNumberValue(value.w);
        writer.WriteEndArray();
    }
}

#endregion // int4

#region uint2

[CpuOnly]
public class uint2JsonConverter : JsonConverter<uint2>
{
    public override uint2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetUInt32();
        reader.Read();
        var y = reader.GetUInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y);
    }
    public override void Write(Utf8JsonWriter writer, uint2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteEndArray();
    }
}

#endregion // uint2

#region uint3

[CpuOnly]
public class uint3JsonConverter : JsonConverter<uint3>
{
    public override uint3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetUInt32();
        reader.Read();
        var y = reader.GetUInt32();
        reader.Read();
        var z = reader.GetUInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z);
    }
    public override void Write(Utf8JsonWriter writer, uint3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteNumberValue(value.z);
        writer.WriteEndArray();
    }
}

#endregion // uint3

#region uint4

[CpuOnly]
public class uint4JsonConverter : JsonConverter<uint4>
{
    public override uint4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetUInt32();
        reader.Read();
        var y = reader.GetUInt32();
        reader.Read();
        var z = reader.GetUInt32();
        reader.Read();
        var w = reader.GetUInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z, w);
    }
    public override void Write(Utf8JsonWriter writer, uint4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteNumberValue(value.z);
        writer.WriteNumberValue(value.w);
        writer.WriteEndArray();
    }
}

#endregion // uint4

#region long2

[CpuOnly]
public class long2JsonConverter : JsonConverter<long2>
{
    public override long2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetInt64();
        reader.Read();
        var y = reader.GetInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y);
    }
    public override void Write(Utf8JsonWriter writer, long2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteEndArray();
    }
}

#endregion // long2

#region long3

[CpuOnly]
public class long3JsonConverter : JsonConverter<long3>
{
    public override long3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetInt64();
        reader.Read();
        var y = reader.GetInt64();
        reader.Read();
        var z = reader.GetInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z);
    }
    public override void Write(Utf8JsonWriter writer, long3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteNumberValue(value.z);
        writer.WriteEndArray();
    }
}

#endregion // long3

#region long4

[CpuOnly]
public class long4JsonConverter : JsonConverter<long4>
{
    public override long4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetInt64();
        reader.Read();
        var y = reader.GetInt64();
        reader.Read();
        var z = reader.GetInt64();
        reader.Read();
        var w = reader.GetInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z, w);
    }
    public override void Write(Utf8JsonWriter writer, long4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteNumberValue(value.z);
        writer.WriteNumberValue(value.w);
        writer.WriteEndArray();
    }
}

#endregion // long4

#region ulong2

[CpuOnly]
public class ulong2JsonConverter : JsonConverter<ulong2>
{
    public override ulong2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetUInt64();
        reader.Read();
        var y = reader.GetUInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y);
    }
    public override void Write(Utf8JsonWriter writer, ulong2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteEndArray();
    }
}

#endregion // ulong2

#region ulong3

[CpuOnly]
public class ulong3JsonConverter : JsonConverter<ulong3>
{
    public override ulong3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetUInt64();
        reader.Read();
        var y = reader.GetUInt64();
        reader.Read();
        var z = reader.GetUInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z);
    }
    public override void Write(Utf8JsonWriter writer, ulong3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteNumberValue(value.z);
        writer.WriteEndArray();
    }
}

#endregion // ulong3

#region ulong4

[CpuOnly]
public class ulong4JsonConverter : JsonConverter<ulong4>
{
    public override ulong4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetUInt64();
        reader.Read();
        var y = reader.GetUInt64();
        reader.Read();
        var z = reader.GetUInt64();
        reader.Read();
        var w = reader.GetUInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z, w);
    }
    public override void Write(Utf8JsonWriter writer, ulong4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteNumberValue(value.z);
        writer.WriteNumberValue(value.w);
        writer.WriteEndArray();
    }
}

#endregion // ulong4

#region decimal2

[CpuOnly]
public class decimal2JsonConverter : JsonConverter<decimal2>
{
    public override decimal2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetDecimal();
        reader.Read();
        var y = reader.GetDecimal();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y);
    }
    public override void Write(Utf8JsonWriter writer, decimal2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteEndArray();
    }
}

#endregion // decimal2

#region decimal3

[CpuOnly]
public class decimal3JsonConverter : JsonConverter<decimal3>
{
    public override decimal3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetDecimal();
        reader.Read();
        var y = reader.GetDecimal();
        reader.Read();
        var z = reader.GetDecimal();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z);
    }
    public override void Write(Utf8JsonWriter writer, decimal3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteNumberValue(value.z);
        writer.WriteEndArray();
    }
}

#endregion // decimal3

#region decimal4

[CpuOnly]
public class decimal4JsonConverter : JsonConverter<decimal4>
{
    public override decimal4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetDecimal();
        reader.Read();
        var y = reader.GetDecimal();
        reader.Read();
        var z = reader.GetDecimal();
        reader.Read();
        var w = reader.GetDecimal();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z, w);
    }
    public override void Write(Utf8JsonWriter writer, decimal4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.x);
        writer.WriteNumberValue(value.y);
        writer.WriteNumberValue(value.z);
        writer.WriteNumberValue(value.w);
        writer.WriteEndArray();
    }
}

#endregion // decimal4

#region half2

[CpuOnly]
public class half2JsonConverter : JsonConverter<half2>
{
    public override half2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = (half)reader.GetSingle();
        reader.Read();
        var y = (half)reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y);
    }
    public override void Write(Utf8JsonWriter writer, half2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue((float)value.x);
        writer.WriteNumberValue((float)value.y);
        writer.WriteEndArray();
    }
}

#endregion // half2

#region half3

[CpuOnly]
public class half3JsonConverter : JsonConverter<half3>
{
    public override half3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = (half)reader.GetSingle();
        reader.Read();
        var y = (half)reader.GetSingle();
        reader.Read();
        var z = (half)reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z);
    }
    public override void Write(Utf8JsonWriter writer, half3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue((float)value.x);
        writer.WriteNumberValue((float)value.y);
        writer.WriteNumberValue((float)value.z);
        writer.WriteEndArray();
    }
}

#endregion // half3

#region half4

[CpuOnly]
public class half4JsonConverter : JsonConverter<half4>
{
    public override half4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = (half)reader.GetSingle();
        reader.Read();
        var y = (half)reader.GetSingle();
        reader.Read();
        var z = (half)reader.GetSingle();
        reader.Read();
        var w = (half)reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z, w);
    }
    public override void Write(Utf8JsonWriter writer, half4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue((float)value.x);
        writer.WriteNumberValue((float)value.y);
        writer.WriteNumberValue((float)value.z);
        writer.WriteNumberValue((float)value.w);
        writer.WriteEndArray();
    }
}

#endregion // half4

#region b16v2

[CpuOnly]
public class b16v2JsonConverter : JsonConverter<b16v2>
{
    public override b16v2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetBoolean();
        reader.Read();
        var y = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y);
    }
    public override void Write(Utf8JsonWriter writer, b16v2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.x);
        writer.WriteBooleanValue(value.y);
        writer.WriteEndArray();
    }
}

#endregion // b16v2

#region b16v3

[CpuOnly]
public class b16v3JsonConverter : JsonConverter<b16v3>
{
    public override b16v3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetBoolean();
        reader.Read();
        var y = reader.GetBoolean();
        reader.Read();
        var z = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z);
    }
    public override void Write(Utf8JsonWriter writer, b16v3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.x);
        writer.WriteBooleanValue(value.y);
        writer.WriteBooleanValue(value.z);
        writer.WriteEndArray();
    }
}

#endregion // b16v3

#region b16v4

[CpuOnly]
public class b16v4JsonConverter : JsonConverter<b16v4>
{
    public override b16v4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetBoolean();
        reader.Read();
        var y = reader.GetBoolean();
        reader.Read();
        var z = reader.GetBoolean();
        reader.Read();
        var w = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z, w);
    }
    public override void Write(Utf8JsonWriter writer, b16v4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.x);
        writer.WriteBooleanValue(value.y);
        writer.WriteBooleanValue(value.z);
        writer.WriteBooleanValue(value.w);
        writer.WriteEndArray();
    }
}

#endregion // b16v4

#region b32v2

[CpuOnly]
public class b32v2JsonConverter : JsonConverter<b32v2>
{
    public override b32v2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetBoolean();
        reader.Read();
        var y = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y);
    }
    public override void Write(Utf8JsonWriter writer, b32v2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.x);
        writer.WriteBooleanValue(value.y);
        writer.WriteEndArray();
    }
}

#endregion // b32v2

#region b32v3

[CpuOnly]
public class b32v3JsonConverter : JsonConverter<b32v3>
{
    public override b32v3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetBoolean();
        reader.Read();
        var y = reader.GetBoolean();
        reader.Read();
        var z = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z);
    }
    public override void Write(Utf8JsonWriter writer, b32v3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.x);
        writer.WriteBooleanValue(value.y);
        writer.WriteBooleanValue(value.z);
        writer.WriteEndArray();
    }
}

#endregion // b32v3

#region b32v4

[CpuOnly]
public class b32v4JsonConverter : JsonConverter<b32v4>
{
    public override b32v4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetBoolean();
        reader.Read();
        var y = reader.GetBoolean();
        reader.Read();
        var z = reader.GetBoolean();
        reader.Read();
        var w = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z, w);
    }
    public override void Write(Utf8JsonWriter writer, b32v4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.x);
        writer.WriteBooleanValue(value.y);
        writer.WriteBooleanValue(value.z);
        writer.WriteBooleanValue(value.w);
        writer.WriteEndArray();
    }
}

#endregion // b32v4

#region b64v2

[CpuOnly]
public class b64v2JsonConverter : JsonConverter<b64v2>
{
    public override b64v2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetBoolean();
        reader.Read();
        var y = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y);
    }
    public override void Write(Utf8JsonWriter writer, b64v2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.x);
        writer.WriteBooleanValue(value.y);
        writer.WriteEndArray();
    }
}

#endregion // b64v2

#region b64v3

[CpuOnly]
public class b64v3JsonConverter : JsonConverter<b64v3>
{
    public override b64v3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetBoolean();
        reader.Read();
        var y = reader.GetBoolean();
        reader.Read();
        var z = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z);
    }
    public override void Write(Utf8JsonWriter writer, b64v3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.x);
        writer.WriteBooleanValue(value.y);
        writer.WriteBooleanValue(value.z);
        writer.WriteEndArray();
    }
}

#endregion // b64v3

#region b64v4

[CpuOnly]
public class b64v4JsonConverter : JsonConverter<b64v4>
{
    public override b64v4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var x = reader.GetBoolean();
        reader.Read();
        var y = reader.GetBoolean();
        reader.Read();
        var z = reader.GetBoolean();
        reader.Read();
        var w = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(x, y, z, w);
    }
    public override void Write(Utf8JsonWriter writer, b64v4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.x);
        writer.WriteBooleanValue(value.y);
        writer.WriteBooleanValue(value.z);
        writer.WriteBooleanValue(value.w);
        writer.WriteEndArray();
    }
}

#endregion // b64v4
