<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;

public static partial class math
{
<#
    foreach (var typ in Typ.Typs)
    {
        var byteSize4 = typ.size * 4;
        var bitSize4 = 8 * byteSize4;

        var typeName = $"{typ.name}4";

        int[] a0123 = [0,1,2,3];
        var car_pd_3 = (
            from a in a0123.AsParallel().AsOrdered()
            from b in a0123.AsParallel().AsOrdered()
            select (a, b)
            ).ToList();
#>
    #region <#= typeName #>
<#
        foreach (var tuple1 in car_pd_3)
        {
            foreach (var tuple2 in car_pd_3)
            {
                var (a, b) = tuple1;
                var (c,d) = tuple2;

                var xyzw = $"{Typ.xyzw[a]}{Typ.xyzw[b]}_{Typ.xyzw[c]}{Typ.xyzw[d]}";
#>

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.<#= Typ.xyzw[a] #>, a.<#= Typ.xyzw[b] #>, b.<#= Typ.xyzw[c] #>, b.<#= Typ.xyzw[d] #>)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> shuffle_<#= xyzw #>(<#= typeName #> a, <#= typeName #> b)
    {
<#
        if (typ.simd)
        {
#>
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_<#= xyzw #>(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
<#
        }
#>
        return soft_shuffle.Shuffle<<#= typ.compType #>, <#= typeName #>>(a, b, Shuffle42.<#= xyzw #>);
<#
        if (typ.simd)
        {
#>
        #endif // NET8_0_OR_GREATER
<#
        }
#>
    }
<#
            }
        }
#>
    #endregion // <#= typeName #>
<#
    }
#>
}