// generated by template, do not modify manually

namespace Coplt.Mathematics;

public static partial class math
{
    #region float4

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xx_xx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xx_xy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xx_xz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xx_xw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xx_yx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xx_yy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xx_yz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xx_yw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xx_zx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xx_zy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xx_zz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xx_zw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xx_wx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xx_wy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xx_wz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xx_ww(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xy_xx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xy_xy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xy_xz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xy_xw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xy_yx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xy_yy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xy_yz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xy_yw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xy_zx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xy_zy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xy_zz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xy_zw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xy_wx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xy_wy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xy_wz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xy_ww(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xz_xx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xz_xy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xz_xz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xz_xw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xz_yx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xz_yy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xz_yz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xz_yw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xz_zx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xz_zy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xz_zz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xz_zw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xz_wx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xz_wy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xz_wz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xz_ww(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xw_xx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xw_xy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xw_xz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xw_xw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xw_yx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xw_yy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xw_yz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xw_yw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xw_zx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xw_zy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xw_zz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xw_zw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xw_wx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xw_wy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xw_wz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_xw_ww(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.xw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yx_xx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yx_xy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yx_xz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yx_xw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yx_yx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yx_yy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yx_yz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yx_yw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yx_zx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yx_zy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yx_zz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yx_zw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yx_wx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yx_wy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yx_wz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yx_ww(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yy_xx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yy_xy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yy_xz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yy_xw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yy_yx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yy_yy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yy_yz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yy_yw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yy_zx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yy_zy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yy_zz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yy_zw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yy_wx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yy_wy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yy_wz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yy_ww(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yz_xx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yz_xy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yz_xz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yz_xw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yz_yx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yz_yy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yz_yz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yz_yw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yz_zx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yz_zy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yz_zz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yz_zw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yz_wx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yz_wy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yz_wz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yz_ww(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yw_xx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yw_xy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yw_xz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yw_xw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yw_yx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yw_yy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yw_yz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yw_yw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yw_zx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yw_zy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yw_zz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yw_zw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yw_wx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yw_wy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yw_wz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_yw_ww(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.yw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zx_xx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zx_xy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zx_xz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zx_xw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zx_yx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zx_yy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zx_yz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zx_yw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zx_zx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zx_zy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zx_zz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zx_zw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zx_wx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zx_wy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zx_wz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zx_ww(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zy_xx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zy_xy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zy_xz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zy_xw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zy_yx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zy_yy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zy_yz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zy_yw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zy_zx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zy_zy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zy_zz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zy_zw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zy_wx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zy_wy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zy_wz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zy_ww(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zz_xx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zz_xy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zz_xz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zz_xw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zz_yx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zz_yy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zz_yz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zz_yw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zz_zx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zz_zy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zz_zz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zz_zw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zz_wx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zz_wy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zz_wz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zz_ww(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zw_xx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zw_xy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zw_xz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zw_xw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zw_yx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zw_yy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zw_yz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zw_yw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zw_zx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zw_zy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zw_zz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zw_zw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zw_wx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zw_wy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zw_wz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_zw_ww(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.zw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wx_xx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wx_xy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wx_xz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wx_xw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wx_yx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wx_yy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wx_yz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wx_yw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wx_zx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wx_zy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wx_zz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wx_zw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wx_wx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wx_wy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wx_wz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wx_ww(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wy_xx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wy_xy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wy_xz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wy_xw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wy_yx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wy_yy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wy_yz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wy_yw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wy_zx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wy_zy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wy_zz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wy_zw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wy_wx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wy_wy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wy_wz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wy_ww(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wz_xx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wz_xy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wz_xz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wz_xw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wz_yx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wz_yy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wz_yz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wz_yw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wz_zx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wz_zy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wz_zz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wz_zw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wz_wx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wz_wy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wz_wz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_wz_ww(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.wz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_ww_xx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.ww_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_ww_xy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.ww_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_ww_xz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.ww_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_ww_xw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.ww_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_ww_yx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.ww_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_ww_yy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.ww_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_ww_yz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.ww_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_ww_yw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.ww_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_ww_zx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.ww_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_ww_zy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.ww_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_ww_zz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.ww_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_ww_zw(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.ww_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_ww_wx(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.ww_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_ww_wy(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.ww_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_ww_wz(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.ww_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 shuffle_ww_ww(float4 a, float4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<float, float4>(a, b, Shuffle42.ww_ww);
        #endif // NET8_0_OR_GREATER
    }
    #endregion // float4
    #region double4

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xx_xx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xx_xy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xx_xz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xx_xw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xx_yx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xx_yy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xx_yz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xx_yw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xx_zx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xx_zy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xx_zz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xx_zw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xx_wx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xx_wy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xx_wz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xx_ww(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xy_xx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xy_xy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xy_xz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xy_xw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xy_yx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xy_yy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xy_yz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xy_yw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xy_zx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xy_zy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xy_zz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xy_zw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xy_wx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xy_wy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xy_wz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xy_ww(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xz_xx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xz_xy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xz_xz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xz_xw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xz_yx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xz_yy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xz_yz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xz_yw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xz_zx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xz_zy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xz_zz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xz_zw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xz_wx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xz_wy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xz_wz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xz_ww(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xw_xx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xw_xy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xw_xz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xw_xw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xw_yx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xw_yy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xw_yz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xw_yw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xw_zx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xw_zy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xw_zz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xw_zw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xw_wx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xw_wy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xw_wz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_xw_ww(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.xw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yx_xx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yx_xy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yx_xz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yx_xw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yx_yx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yx_yy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yx_yz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yx_yw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yx_zx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yx_zy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yx_zz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yx_zw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yx_wx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yx_wy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yx_wz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yx_ww(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yy_xx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yy_xy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yy_xz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yy_xw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yy_yx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yy_yy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yy_yz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yy_yw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yy_zx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yy_zy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yy_zz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yy_zw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yy_wx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yy_wy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yy_wz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yy_ww(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yz_xx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yz_xy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yz_xz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yz_xw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yz_yx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yz_yy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yz_yz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yz_yw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yz_zx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yz_zy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yz_zz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yz_zw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yz_wx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yz_wy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yz_wz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yz_ww(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yw_xx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yw_xy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yw_xz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yw_xw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yw_yx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yw_yy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yw_yz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yw_yw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yw_zx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yw_zy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yw_zz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yw_zw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yw_wx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yw_wy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yw_wz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_yw_ww(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.yw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zx_xx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zx_xy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zx_xz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zx_xw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zx_yx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zx_yy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zx_yz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zx_yw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zx_zx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zx_zy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zx_zz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zx_zw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zx_wx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zx_wy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zx_wz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zx_ww(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zy_xx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zy_xy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zy_xz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zy_xw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zy_yx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zy_yy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zy_yz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zy_yw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zy_zx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zy_zy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zy_zz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zy_zw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zy_wx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zy_wy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zy_wz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zy_ww(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zz_xx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zz_xy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zz_xz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zz_xw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zz_yx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zz_yy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zz_yz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zz_yw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zz_zx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zz_zy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zz_zz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zz_zw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zz_wx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zz_wy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zz_wz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zz_ww(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zw_xx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zw_xy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zw_xz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zw_xw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zw_yx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zw_yy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zw_yz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zw_yw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zw_zx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zw_zy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zw_zz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zw_zw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zw_wx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zw_wy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zw_wz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_zw_ww(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.zw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wx_xx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wx_xy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wx_xz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wx_xw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wx_yx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wx_yy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wx_yz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wx_yw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wx_zx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wx_zy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wx_zz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wx_zw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wx_wx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wx_wy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wx_wz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wx_ww(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wy_xx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wy_xy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wy_xz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wy_xw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wy_yx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wy_yy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wy_yz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wy_yw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wy_zx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wy_zy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wy_zz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wy_zw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wy_wx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wy_wy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wy_wz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wy_ww(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wz_xx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wz_xy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wz_xz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wz_xw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wz_yx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wz_yy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wz_yz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wz_yw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wz_zx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wz_zy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wz_zz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wz_zw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wz_wx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wz_wy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wz_wz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_wz_ww(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.wz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_ww_xx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.ww_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_ww_xy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.ww_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_ww_xz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.ww_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_ww_xw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.ww_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_ww_yx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.ww_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_ww_yy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.ww_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_ww_yz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.ww_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_ww_yw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.ww_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_ww_zx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.ww_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_ww_zy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.ww_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_ww_zz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.ww_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_ww_zw(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.ww_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_ww_wx(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.ww_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_ww_wy(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.ww_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_ww_wz(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.ww_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 shuffle_ww_ww(double4 a, double4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<double, double4>(a, b, Shuffle42.ww_ww);
        #endif // NET8_0_OR_GREATER
    }
    #endregion // double4
    #region short4

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xx_xx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xx_xy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xx_xz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xx_xw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xx_yx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xx_yy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xx_yz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xx_yw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xx_zx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xx_zy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xx_zz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xx_zw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xx_wx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xx_wy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xx_wz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xx_ww(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xy_xx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xy_xy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xy_xz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xy_xw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xy_yx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xy_yy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xy_yz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xy_yw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xy_zx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xy_zy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xy_zz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xy_zw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xy_wx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xy_wy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xy_wz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xy_ww(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xz_xx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xz_xy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xz_xz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xz_xw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xz_yx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xz_yy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xz_yz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xz_yw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xz_zx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xz_zy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xz_zz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xz_zw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xz_wx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xz_wy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xz_wz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xz_ww(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xw_xx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xw_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xw_xy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xw_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xw_xz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xw_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xw_xw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xw_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xw_yx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xw_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xw_yy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xw_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xw_yz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xw_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xw_yw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xw_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xw_zx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xw_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xw_zy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xw_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xw_zz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xw_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xw_zw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xw_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xw_wx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xw_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xw_wy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xw_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xw_wz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xw_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_xw_ww(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.xw_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yx_xx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yx_xy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yx_xz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yx_xw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yx_yx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yx_yy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yx_yz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yx_yw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yx_zx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yx_zy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yx_zz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yx_zw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yx_wx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yx_wy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yx_wz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yx_ww(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yy_xx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yy_xy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yy_xz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yy_xw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yy_yx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yy_yy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yy_yz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yy_yw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yy_zx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yy_zy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yy_zz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yy_zw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yy_wx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yy_wy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yy_wz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yy_ww(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yz_xx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yz_xy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yz_xz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yz_xw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yz_yx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yz_yy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yz_yz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yz_yw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yz_zx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yz_zy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yz_zz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yz_zw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yz_wx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yz_wy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yz_wz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yz_ww(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yw_xx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yw_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yw_xy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yw_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yw_xz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yw_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yw_xw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yw_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yw_yx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yw_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yw_yy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yw_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yw_yz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yw_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yw_yw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yw_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yw_zx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yw_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yw_zy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yw_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yw_zz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yw_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yw_zw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yw_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yw_wx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yw_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yw_wy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yw_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yw_wz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yw_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_yw_ww(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.yw_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zx_xx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zx_xy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zx_xz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zx_xw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zx_yx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zx_yy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zx_yz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zx_yw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zx_zx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zx_zy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zx_zz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zx_zw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zx_wx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zx_wy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zx_wz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zx_ww(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zy_xx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zy_xy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zy_xz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zy_xw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zy_yx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zy_yy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zy_yz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zy_yw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zy_zx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zy_zy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zy_zz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zy_zw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zy_wx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zy_wy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zy_wz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zy_ww(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zz_xx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zz_xy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zz_xz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zz_xw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zz_yx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zz_yy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zz_yz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zz_yw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zz_zx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zz_zy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zz_zz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zz_zw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zz_wx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zz_wy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zz_wz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zz_ww(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zw_xx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zw_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zw_xy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zw_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zw_xz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zw_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zw_xw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zw_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zw_yx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zw_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zw_yy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zw_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zw_yz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zw_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zw_yw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zw_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zw_zx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zw_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zw_zy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zw_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zw_zz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zw_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zw_zw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zw_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zw_wx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zw_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zw_wy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zw_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zw_wz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zw_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_zw_ww(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.zw_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wx_xx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wx_xy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wx_xz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wx_xw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wx_yx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wx_yy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wx_yz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wx_yw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wx_zx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wx_zy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wx_zz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wx_zw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wx_wx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wx_wy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wx_wz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wx_ww(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wy_xx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wy_xy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wy_xz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wy_xw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wy_yx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wy_yy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wy_yz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wy_yw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wy_zx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wy_zy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wy_zz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wy_zw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wy_wx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wy_wy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wy_wz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wy_ww(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wz_xx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wz_xy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wz_xz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wz_xw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wz_yx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wz_yy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wz_yz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wz_yw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wz_zx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wz_zy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wz_zz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wz_zw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wz_wx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wz_wy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wz_wz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_wz_ww(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.wz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_ww_xx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.ww_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_ww_xy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.ww_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_ww_xz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.ww_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_ww_xw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.ww_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_ww_yx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.ww_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_ww_yy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.ww_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_ww_yz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.ww_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_ww_yw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.ww_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_ww_zx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.ww_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_ww_zy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.ww_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_ww_zz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.ww_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_ww_zw(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.ww_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_ww_wx(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.ww_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_ww_wy(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.ww_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_ww_wz(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.ww_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 shuffle_ww_ww(short4 a, short4 b)
    {
        return soft_shuffle.Shuffle<short, short4>(a, b, Shuffle42.ww_ww);
    }
    #endregion // short4
    #region ushort4

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xx_xx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xx_xy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xx_xz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xx_xw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xx_yx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xx_yy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xx_yz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xx_yw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xx_zx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xx_zy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xx_zz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xx_zw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xx_wx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xx_wy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xx_wz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xx_ww(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xy_xx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xy_xy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xy_xz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xy_xw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xy_yx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xy_yy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xy_yz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xy_yw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xy_zx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xy_zy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xy_zz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xy_zw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xy_wx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xy_wy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xy_wz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xy_ww(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xz_xx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xz_xy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xz_xz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xz_xw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xz_yx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xz_yy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xz_yz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xz_yw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xz_zx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xz_zy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xz_zz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xz_zw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xz_wx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xz_wy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xz_wz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xz_ww(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xw_xx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xw_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xw_xy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xw_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xw_xz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xw_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xw_xw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xw_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xw_yx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xw_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xw_yy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xw_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xw_yz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xw_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xw_yw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xw_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xw_zx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xw_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xw_zy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xw_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xw_zz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xw_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xw_zw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xw_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xw_wx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xw_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xw_wy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xw_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xw_wz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xw_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_xw_ww(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.xw_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yx_xx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yx_xy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yx_xz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yx_xw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yx_yx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yx_yy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yx_yz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yx_yw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yx_zx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yx_zy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yx_zz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yx_zw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yx_wx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yx_wy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yx_wz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yx_ww(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yy_xx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yy_xy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yy_xz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yy_xw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yy_yx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yy_yy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yy_yz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yy_yw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yy_zx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yy_zy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yy_zz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yy_zw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yy_wx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yy_wy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yy_wz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yy_ww(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yz_xx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yz_xy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yz_xz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yz_xw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yz_yx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yz_yy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yz_yz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yz_yw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yz_zx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yz_zy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yz_zz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yz_zw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yz_wx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yz_wy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yz_wz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yz_ww(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yw_xx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yw_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yw_xy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yw_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yw_xz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yw_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yw_xw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yw_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yw_yx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yw_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yw_yy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yw_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yw_yz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yw_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yw_yw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yw_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yw_zx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yw_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yw_zy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yw_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yw_zz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yw_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yw_zw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yw_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yw_wx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yw_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yw_wy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yw_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yw_wz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yw_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_yw_ww(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.yw_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zx_xx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zx_xy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zx_xz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zx_xw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zx_yx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zx_yy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zx_yz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zx_yw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zx_zx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zx_zy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zx_zz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zx_zw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zx_wx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zx_wy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zx_wz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zx_ww(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zy_xx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zy_xy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zy_xz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zy_xw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zy_yx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zy_yy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zy_yz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zy_yw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zy_zx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zy_zy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zy_zz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zy_zw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zy_wx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zy_wy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zy_wz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zy_ww(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zz_xx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zz_xy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zz_xz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zz_xw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zz_yx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zz_yy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zz_yz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zz_yw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zz_zx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zz_zy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zz_zz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zz_zw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zz_wx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zz_wy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zz_wz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zz_ww(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zw_xx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zw_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zw_xy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zw_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zw_xz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zw_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zw_xw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zw_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zw_yx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zw_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zw_yy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zw_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zw_yz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zw_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zw_yw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zw_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zw_zx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zw_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zw_zy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zw_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zw_zz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zw_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zw_zw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zw_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zw_wx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zw_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zw_wy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zw_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zw_wz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zw_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_zw_ww(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.zw_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wx_xx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wx_xy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wx_xz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wx_xw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wx_yx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wx_yy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wx_yz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wx_yw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wx_zx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wx_zy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wx_zz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wx_zw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wx_wx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wx_wy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wx_wz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wx_ww(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wy_xx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wy_xy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wy_xz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wy_xw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wy_yx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wy_yy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wy_yz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wy_yw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wy_zx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wy_zy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wy_zz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wy_zw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wy_wx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wy_wy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wy_wz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wy_ww(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wz_xx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wz_xy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wz_xz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wz_xw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wz_yx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wz_yy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wz_yz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wz_yw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wz_zx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wz_zy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wz_zz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wz_zw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wz_wx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wz_wy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wz_wz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_wz_ww(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.wz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_ww_xx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.ww_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_ww_xy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.ww_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_ww_xz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.ww_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_ww_xw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.ww_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_ww_yx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.ww_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_ww_yy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.ww_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_ww_yz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.ww_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_ww_yw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.ww_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_ww_zx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.ww_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_ww_zy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.ww_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_ww_zz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.ww_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_ww_zw(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.ww_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_ww_wx(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.ww_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_ww_wy(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.ww_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_ww_wz(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.ww_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 shuffle_ww_ww(ushort4 a, ushort4 b)
    {
        return soft_shuffle.Shuffle<ushort, ushort4>(a, b, Shuffle42.ww_ww);
    }
    #endregion // ushort4
    #region int4

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xx_xx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xx_xy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xx_xz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xx_xw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xx_yx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xx_yy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xx_yz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xx_yw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xx_zx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xx_zy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xx_zz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xx_zw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xx_wx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xx_wy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xx_wz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xx_ww(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xy_xx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xy_xy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xy_xz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xy_xw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xy_yx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xy_yy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xy_yz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xy_yw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xy_zx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xy_zy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xy_zz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xy_zw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xy_wx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xy_wy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xy_wz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xy_ww(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xz_xx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xz_xy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xz_xz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xz_xw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xz_yx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xz_yy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xz_yz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xz_yw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xz_zx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xz_zy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xz_zz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xz_zw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xz_wx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xz_wy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xz_wz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xz_ww(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xw_xx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xw_xy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xw_xz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xw_xw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xw_yx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xw_yy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xw_yz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xw_yw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xw_zx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xw_zy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xw_zz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xw_zw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xw_wx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xw_wy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xw_wz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_xw_ww(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.xw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yx_xx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yx_xy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yx_xz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yx_xw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yx_yx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yx_yy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yx_yz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yx_yw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yx_zx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yx_zy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yx_zz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yx_zw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yx_wx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yx_wy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yx_wz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yx_ww(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yy_xx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yy_xy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yy_xz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yy_xw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yy_yx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yy_yy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yy_yz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yy_yw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yy_zx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yy_zy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yy_zz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yy_zw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yy_wx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yy_wy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yy_wz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yy_ww(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yz_xx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yz_xy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yz_xz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yz_xw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yz_yx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yz_yy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yz_yz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yz_yw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yz_zx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yz_zy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yz_zz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yz_zw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yz_wx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yz_wy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yz_wz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yz_ww(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yw_xx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yw_xy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yw_xz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yw_xw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yw_yx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yw_yy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yw_yz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yw_yw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yw_zx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yw_zy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yw_zz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yw_zw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yw_wx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yw_wy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yw_wz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_yw_ww(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.yw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zx_xx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zx_xy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zx_xz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zx_xw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zx_yx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zx_yy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zx_yz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zx_yw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zx_zx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zx_zy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zx_zz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zx_zw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zx_wx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zx_wy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zx_wz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zx_ww(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zy_xx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zy_xy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zy_xz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zy_xw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zy_yx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zy_yy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zy_yz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zy_yw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zy_zx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zy_zy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zy_zz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zy_zw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zy_wx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zy_wy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zy_wz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zy_ww(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zz_xx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zz_xy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zz_xz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zz_xw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zz_yx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zz_yy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zz_yz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zz_yw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zz_zx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zz_zy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zz_zz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zz_zw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zz_wx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zz_wy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zz_wz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zz_ww(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zw_xx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zw_xy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zw_xz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zw_xw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zw_yx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zw_yy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zw_yz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zw_yw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zw_zx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zw_zy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zw_zz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zw_zw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zw_wx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zw_wy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zw_wz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_zw_ww(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.zw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wx_xx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wx_xy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wx_xz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wx_xw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wx_yx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wx_yy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wx_yz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wx_yw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wx_zx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wx_zy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wx_zz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wx_zw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wx_wx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wx_wy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wx_wz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wx_ww(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wy_xx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wy_xy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wy_xz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wy_xw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wy_yx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wy_yy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wy_yz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wy_yw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wy_zx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wy_zy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wy_zz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wy_zw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wy_wx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wy_wy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wy_wz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wy_ww(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wz_xx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wz_xy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wz_xz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wz_xw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wz_yx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wz_yy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wz_yz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wz_yw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wz_zx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wz_zy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wz_zz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wz_zw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wz_wx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wz_wy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wz_wz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_wz_ww(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.wz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_ww_xx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.ww_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_ww_xy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.ww_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_ww_xz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.ww_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_ww_xw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.ww_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_ww_yx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.ww_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_ww_yy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.ww_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_ww_yz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.ww_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_ww_yw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.ww_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_ww_zx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.ww_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_ww_zy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.ww_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_ww_zz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.ww_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_ww_zw(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.ww_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_ww_wx(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.ww_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_ww_wy(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.ww_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_ww_wz(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.ww_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 shuffle_ww_ww(int4 a, int4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<int, int4>(a, b, Shuffle42.ww_ww);
        #endif // NET8_0_OR_GREATER
    }
    #endregion // int4
    #region uint4

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xx_xx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xx_xy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xx_xz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xx_xw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xx_yx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xx_yy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xx_yz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xx_yw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xx_zx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xx_zy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xx_zz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xx_zw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xx_wx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xx_wy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xx_wz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xx_ww(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xy_xx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xy_xy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xy_xz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xy_xw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xy_yx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xy_yy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xy_yz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xy_yw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xy_zx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xy_zy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xy_zz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xy_zw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xy_wx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xy_wy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xy_wz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xy_ww(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xz_xx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xz_xy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xz_xz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xz_xw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xz_yx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xz_yy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xz_yz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xz_yw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xz_zx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xz_zy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xz_zz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xz_zw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xz_wx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xz_wy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xz_wz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xz_ww(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xw_xx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xw_xy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xw_xz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xw_xw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xw_yx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xw_yy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xw_yz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xw_yw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xw_zx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xw_zy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xw_zz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xw_zw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xw_wx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xw_wy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xw_wz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_xw_ww(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.xw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yx_xx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yx_xy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yx_xz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yx_xw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yx_yx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yx_yy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yx_yz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yx_yw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yx_zx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yx_zy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yx_zz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yx_zw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yx_wx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yx_wy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yx_wz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yx_ww(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yy_xx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yy_xy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yy_xz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yy_xw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yy_yx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yy_yy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yy_yz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yy_yw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yy_zx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yy_zy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yy_zz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yy_zw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yy_wx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yy_wy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yy_wz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yy_ww(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yz_xx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yz_xy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yz_xz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yz_xw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yz_yx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yz_yy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yz_yz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yz_yw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yz_zx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yz_zy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yz_zz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yz_zw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yz_wx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yz_wy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yz_wz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yz_ww(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yw_xx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yw_xy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yw_xz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yw_xw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yw_yx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yw_yy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yw_yz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yw_yw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yw_zx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yw_zy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yw_zz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yw_zw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yw_wx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yw_wy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yw_wz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_yw_ww(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.yw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zx_xx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zx_xy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zx_xz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zx_xw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zx_yx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zx_yy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zx_yz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zx_yw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zx_zx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zx_zy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zx_zz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zx_zw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zx_wx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zx_wy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zx_wz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zx_ww(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zy_xx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zy_xy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zy_xz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zy_xw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zy_yx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zy_yy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zy_yz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zy_yw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zy_zx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zy_zy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zy_zz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zy_zw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zy_wx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zy_wy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zy_wz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zy_ww(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zz_xx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zz_xy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zz_xz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zz_xw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zz_yx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zz_yy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zz_yz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zz_yw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zz_zx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zz_zy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zz_zz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zz_zw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zz_wx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zz_wy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zz_wz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zz_ww(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zw_xx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zw_xy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zw_xz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zw_xw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zw_yx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zw_yy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zw_yz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zw_yw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zw_zx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zw_zy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zw_zz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zw_zw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zw_wx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zw_wy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zw_wz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_zw_ww(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.zw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wx_xx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wx_xy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wx_xz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wx_xw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wx_yx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wx_yy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wx_yz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wx_yw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wx_zx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wx_zy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wx_zz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wx_zw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wx_wx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wx_wy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wx_wz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wx_ww(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wy_xx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wy_xy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wy_xz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wy_xw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wy_yx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wy_yy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wy_yz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wy_yw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wy_zx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wy_zy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wy_zz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wy_zw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wy_wx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wy_wy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wy_wz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wy_ww(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wz_xx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wz_xy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wz_xz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wz_xw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wz_yx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wz_yy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wz_yz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wz_yw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wz_zx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wz_zy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wz_zz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wz_zw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wz_wx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wz_wy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wz_wz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_wz_ww(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.wz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_ww_xx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.ww_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_ww_xy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.ww_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_ww_xz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.ww_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_ww_xw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.ww_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_ww_yx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.ww_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_ww_yy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.ww_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_ww_yz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.ww_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_ww_yw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.ww_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_ww_zx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.ww_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_ww_zy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.ww_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_ww_zz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.ww_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_ww_zw(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.ww_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_ww_wx(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.ww_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_ww_wy(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.ww_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_ww_wz(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.ww_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 shuffle_ww_ww(uint4 a, uint4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<uint, uint4>(a, b, Shuffle42.ww_ww);
        #endif // NET8_0_OR_GREATER
    }
    #endregion // uint4
    #region long4

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xx_xx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xx_xy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xx_xz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xx_xw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xx_yx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xx_yy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xx_yz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xx_yw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xx_zx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xx_zy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xx_zz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xx_zw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xx_wx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xx_wy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xx_wz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xx_ww(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xy_xx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xy_xy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xy_xz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xy_xw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xy_yx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xy_yy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xy_yz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xy_yw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xy_zx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xy_zy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xy_zz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xy_zw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xy_wx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xy_wy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xy_wz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xy_ww(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xz_xx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xz_xy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xz_xz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xz_xw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xz_yx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xz_yy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xz_yz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xz_yw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xz_zx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xz_zy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xz_zz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xz_zw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xz_wx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xz_wy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xz_wz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xz_ww(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xw_xx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xw_xy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xw_xz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xw_xw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xw_yx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xw_yy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xw_yz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xw_yw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xw_zx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xw_zy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xw_zz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xw_zw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xw_wx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xw_wy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xw_wz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_xw_ww(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.xw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yx_xx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yx_xy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yx_xz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yx_xw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yx_yx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yx_yy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yx_yz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yx_yw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yx_zx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yx_zy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yx_zz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yx_zw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yx_wx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yx_wy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yx_wz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yx_ww(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yy_xx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yy_xy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yy_xz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yy_xw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yy_yx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yy_yy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yy_yz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yy_yw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yy_zx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yy_zy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yy_zz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yy_zw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yy_wx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yy_wy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yy_wz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yy_ww(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yz_xx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yz_xy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yz_xz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yz_xw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yz_yx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yz_yy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yz_yz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yz_yw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yz_zx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yz_zy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yz_zz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yz_zw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yz_wx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yz_wy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yz_wz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yz_ww(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yw_xx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yw_xy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yw_xz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yw_xw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yw_yx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yw_yy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yw_yz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yw_yw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yw_zx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yw_zy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yw_zz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yw_zw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yw_wx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yw_wy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yw_wz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_yw_ww(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.yw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zx_xx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zx_xy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zx_xz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zx_xw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zx_yx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zx_yy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zx_yz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zx_yw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zx_zx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zx_zy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zx_zz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zx_zw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zx_wx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zx_wy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zx_wz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zx_ww(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zy_xx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zy_xy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zy_xz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zy_xw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zy_yx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zy_yy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zy_yz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zy_yw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zy_zx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zy_zy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zy_zz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zy_zw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zy_wx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zy_wy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zy_wz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zy_ww(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zz_xx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zz_xy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zz_xz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zz_xw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zz_yx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zz_yy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zz_yz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zz_yw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zz_zx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zz_zy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zz_zz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zz_zw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zz_wx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zz_wy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zz_wz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zz_ww(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zw_xx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zw_xy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zw_xz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zw_xw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zw_yx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zw_yy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zw_yz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zw_yw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zw_zx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zw_zy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zw_zz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zw_zw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zw_wx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zw_wy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zw_wz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_zw_ww(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.zw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wx_xx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wx_xy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wx_xz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wx_xw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wx_yx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wx_yy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wx_yz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wx_yw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wx_zx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wx_zy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wx_zz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wx_zw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wx_wx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wx_wy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wx_wz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wx_ww(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wy_xx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wy_xy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wy_xz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wy_xw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wy_yx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wy_yy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wy_yz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wy_yw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wy_zx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wy_zy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wy_zz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wy_zw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wy_wx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wy_wy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wy_wz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wy_ww(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wz_xx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wz_xy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wz_xz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wz_xw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wz_yx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wz_yy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wz_yz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wz_yw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wz_zx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wz_zy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wz_zz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wz_zw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wz_wx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wz_wy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wz_wz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_wz_ww(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.wz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_ww_xx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.ww_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_ww_xy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.ww_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_ww_xz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.ww_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_ww_xw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.ww_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_ww_yx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.ww_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_ww_yy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.ww_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_ww_yz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.ww_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_ww_yw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.ww_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_ww_zx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.ww_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_ww_zy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.ww_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_ww_zz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.ww_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_ww_zw(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.ww_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_ww_wx(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.ww_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_ww_wy(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.ww_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_ww_wz(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.ww_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 shuffle_ww_ww(long4 a, long4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<long, long4>(a, b, Shuffle42.ww_ww);
        #endif // NET8_0_OR_GREATER
    }
    #endregion // long4
    #region ulong4

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xx_xx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xx_xy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xx_xz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xx_xw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xx_yx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xx_yy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xx_yz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xx_yw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xx_zx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xx_zy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xx_zz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xx_zw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xx_wx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xx_wy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xx_wz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xx_ww(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xy_xx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xy_xy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xy_xz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xy_xw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xy_yx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xy_yy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xy_yz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xy_yw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xy_zx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xy_zy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xy_zz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xy_zw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xy_wx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xy_wy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xy_wz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xy_ww(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xz_xx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xz_xy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xz_xz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xz_xw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xz_yx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xz_yy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xz_yz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xz_yw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xz_zx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xz_zy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xz_zz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xz_zw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xz_wx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xz_wy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xz_wz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xz_ww(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xw_xx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xw_xy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xw_xz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xw_xw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xw_yx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xw_yy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xw_yz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xw_yw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xw_zx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xw_zy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xw_zz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xw_zw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xw_wx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xw_wy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xw_wz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_xw_ww(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.xw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yx_xx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yx_xy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yx_xz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yx_xw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yx_yx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yx_yy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yx_yz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yx_yw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yx_zx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yx_zy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yx_zz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yx_zw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yx_wx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yx_wy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yx_wz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yx_ww(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yy_xx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yy_xy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yy_xz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yy_xw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yy_yx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yy_yy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yy_yz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yy_yw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yy_zx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yy_zy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yy_zz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yy_zw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yy_wx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yy_wy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yy_wz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yy_ww(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yz_xx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yz_xy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yz_xz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yz_xw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yz_yx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yz_yy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yz_yz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yz_yw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yz_zx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yz_zy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yz_zz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yz_zw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yz_wx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yz_wy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yz_wz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yz_ww(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yw_xx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yw_xy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yw_xz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yw_xw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yw_yx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yw_yy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yw_yz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yw_yw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yw_zx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yw_zy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yw_zz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yw_zw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yw_wx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yw_wy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yw_wz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_yw_ww(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.yw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zx_xx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zx_xy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zx_xz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zx_xw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zx_yx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zx_yy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zx_yz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zx_yw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zx_zx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zx_zy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zx_zz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zx_zw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zx_wx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zx_wy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zx_wz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zx_ww(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zy_xx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zy_xy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zy_xz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zy_xw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zy_yx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zy_yy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zy_yz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zy_yw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zy_zx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zy_zy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zy_zz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zy_zw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zy_wx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zy_wy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zy_wz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zy_ww(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zz_xx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zz_xy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zz_xz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zz_xw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zz_yx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zz_yy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zz_yz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zz_yw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zz_zx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zz_zy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zz_zz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zz_zw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zz_wx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zz_wy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zz_wz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zz_ww(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zw_xx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zw_xy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zw_xz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zw_xw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zw_yx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zw_yy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zw_yz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zw_yw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zw_zx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zw_zy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zw_zz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zw_zw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zw_wx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zw_wy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zw_wz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_zw_ww(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.zw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wx_xx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wx_xy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wx_xz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wx_xw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wx_yx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wx_yy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wx_yz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wx_yw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wx_zx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wx_zy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wx_zz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wx_zw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wx_wx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wx_wy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wx_wz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wx_ww(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wy_xx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wy_xy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wy_xz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wy_xw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wy_yx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wy_yy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wy_yz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wy_yw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wy_zx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wy_zy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wy_zz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wy_zw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wy_wx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wy_wy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wy_wz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wy_ww(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wz_xx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wz_xy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wz_xz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wz_xw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wz_yx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wz_yy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wz_yz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wz_yw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wz_zx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wz_zy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wz_zz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wz_zw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wz_wx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wz_wy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wz_wz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_wz_ww(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.wz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_ww_xx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.ww_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_ww_xy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.ww_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_ww_xz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.ww_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_ww_xw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.ww_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_ww_yx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.ww_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_ww_yy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.ww_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_ww_yz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.ww_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_ww_yw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.ww_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_ww_zx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.ww_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_ww_zy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.ww_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_ww_zz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.ww_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_ww_zw(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.ww_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_ww_wx(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.ww_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_ww_wy(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.ww_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_ww_wz(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.ww_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 shuffle_ww_ww(ulong4 a, ulong4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<ulong, ulong4>(a, b, Shuffle42.ww_ww);
        #endif // NET8_0_OR_GREATER
    }
    #endregion // ulong4
    #region decimal4

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xx_xx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xx_xy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xx_xz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xx_xw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xx_yx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xx_yy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xx_yz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xx_yw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xx_zx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xx_zy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xx_zz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xx_zw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xx_wx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xx_wy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xx_wz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xx_ww(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xy_xx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xy_xy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xy_xz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xy_xw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xy_yx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xy_yy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xy_yz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xy_yw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xy_zx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xy_zy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xy_zz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xy_zw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xy_wx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xy_wy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xy_wz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xy_ww(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xz_xx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xz_xy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xz_xz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xz_xw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xz_yx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xz_yy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xz_yz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xz_yw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xz_zx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xz_zy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xz_zz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xz_zw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xz_wx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xz_wy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xz_wz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xz_ww(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xw_xx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xw_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xw_xy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xw_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xw_xz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xw_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xw_xw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xw_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xw_yx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xw_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xw_yy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xw_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xw_yz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xw_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xw_yw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xw_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xw_zx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xw_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xw_zy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xw_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xw_zz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xw_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xw_zw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xw_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xw_wx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xw_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xw_wy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xw_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xw_wz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xw_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_xw_ww(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.xw_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yx_xx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yx_xy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yx_xz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yx_xw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yx_yx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yx_yy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yx_yz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yx_yw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yx_zx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yx_zy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yx_zz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yx_zw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yx_wx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yx_wy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yx_wz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yx_ww(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yy_xx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yy_xy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yy_xz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yy_xw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yy_yx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yy_yy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yy_yz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yy_yw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yy_zx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yy_zy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yy_zz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yy_zw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yy_wx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yy_wy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yy_wz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yy_ww(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yz_xx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yz_xy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yz_xz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yz_xw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yz_yx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yz_yy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yz_yz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yz_yw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yz_zx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yz_zy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yz_zz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yz_zw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yz_wx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yz_wy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yz_wz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yz_ww(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yw_xx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yw_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yw_xy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yw_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yw_xz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yw_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yw_xw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yw_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yw_yx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yw_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yw_yy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yw_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yw_yz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yw_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yw_yw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yw_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yw_zx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yw_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yw_zy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yw_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yw_zz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yw_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yw_zw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yw_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yw_wx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yw_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yw_wy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yw_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yw_wz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yw_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_yw_ww(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.yw_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zx_xx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zx_xy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zx_xz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zx_xw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zx_yx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zx_yy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zx_yz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zx_yw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zx_zx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zx_zy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zx_zz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zx_zw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zx_wx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zx_wy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zx_wz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zx_ww(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zy_xx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zy_xy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zy_xz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zy_xw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zy_yx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zy_yy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zy_yz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zy_yw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zy_zx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zy_zy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zy_zz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zy_zw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zy_wx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zy_wy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zy_wz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zy_ww(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zz_xx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zz_xy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zz_xz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zz_xw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zz_yx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zz_yy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zz_yz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zz_yw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zz_zx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zz_zy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zz_zz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zz_zw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zz_wx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zz_wy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zz_wz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zz_ww(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zw_xx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zw_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zw_xy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zw_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zw_xz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zw_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zw_xw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zw_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zw_yx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zw_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zw_yy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zw_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zw_yz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zw_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zw_yw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zw_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zw_zx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zw_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zw_zy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zw_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zw_zz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zw_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zw_zw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zw_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zw_wx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zw_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zw_wy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zw_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zw_wz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zw_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_zw_ww(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.zw_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wx_xx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wx_xy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wx_xz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wx_xw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wx_yx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wx_yy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wx_yz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wx_yw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wx_zx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wx_zy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wx_zz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wx_zw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wx_wx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wx_wy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wx_wz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wx_ww(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wy_xx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wy_xy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wy_xz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wy_xw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wy_yx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wy_yy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wy_yz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wy_yw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wy_zx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wy_zy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wy_zz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wy_zw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wy_wx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wy_wy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wy_wz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wy_ww(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wz_xx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wz_xy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wz_xz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wz_xw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wz_yx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wz_yy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wz_yz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wz_yw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wz_zx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wz_zy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wz_zz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wz_zw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wz_wx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wz_wy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wz_wz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_wz_ww(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.wz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_ww_xx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.ww_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_ww_xy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.ww_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_ww_xz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.ww_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_ww_xw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.ww_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_ww_yx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.ww_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_ww_yy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.ww_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_ww_yz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.ww_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_ww_yw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.ww_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_ww_zx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.ww_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_ww_zy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.ww_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_ww_zz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.ww_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_ww_zw(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.ww_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_ww_wx(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.ww_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_ww_wy(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.ww_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_ww_wz(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.ww_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 shuffle_ww_ww(decimal4 a, decimal4 b)
    {
        return soft_shuffle.Shuffle<decimal, decimal4>(a, b, Shuffle42.ww_ww);
    }
    #endregion // decimal4
    #region half4

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xx_xx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xx_xy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xx_xz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xx_xw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xx_yx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xx_yy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xx_yz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xx_yw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xx_zx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xx_zy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xx_zz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xx_zw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xx_wx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xx_wy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xx_wz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xx_ww(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xy_xx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xy_xy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xy_xz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xy_xw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xy_yx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xy_yy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xy_yz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xy_yw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xy_zx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xy_zy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xy_zz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xy_zw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xy_wx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xy_wy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xy_wz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xy_ww(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xz_xx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xz_xy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xz_xz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xz_xw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xz_yx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xz_yy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xz_yz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xz_yw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xz_zx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xz_zy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xz_zz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xz_zw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xz_wx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xz_wy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xz_wz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xz_ww(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xw_xx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xw_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xw_xy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xw_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xw_xz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xw_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xw_xw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xw_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xw_yx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xw_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xw_yy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xw_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xw_yz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xw_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xw_yw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xw_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xw_zx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xw_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xw_zy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xw_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xw_zz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xw_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xw_zw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xw_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xw_wx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xw_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xw_wy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xw_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xw_wz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xw_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_xw_ww(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.xw_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yx_xx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yx_xy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yx_xz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yx_xw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yx_yx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yx_yy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yx_yz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yx_yw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yx_zx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yx_zy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yx_zz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yx_zw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yx_wx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yx_wy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yx_wz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yx_ww(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yy_xx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yy_xy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yy_xz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yy_xw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yy_yx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yy_yy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yy_yz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yy_yw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yy_zx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yy_zy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yy_zz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yy_zw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yy_wx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yy_wy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yy_wz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yy_ww(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yz_xx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yz_xy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yz_xz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yz_xw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yz_yx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yz_yy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yz_yz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yz_yw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yz_zx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yz_zy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yz_zz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yz_zw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yz_wx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yz_wy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yz_wz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yz_ww(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yw_xx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yw_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yw_xy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yw_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yw_xz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yw_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yw_xw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yw_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yw_yx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yw_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yw_yy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yw_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yw_yz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yw_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yw_yw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yw_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yw_zx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yw_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yw_zy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yw_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yw_zz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yw_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yw_zw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yw_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yw_wx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yw_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yw_wy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yw_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yw_wz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yw_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_yw_ww(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.yw_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zx_xx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zx_xy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zx_xz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zx_xw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zx_yx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zx_yy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zx_yz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zx_yw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zx_zx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zx_zy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zx_zz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zx_zw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zx_wx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zx_wy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zx_wz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zx_ww(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zy_xx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zy_xy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zy_xz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zy_xw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zy_yx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zy_yy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zy_yz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zy_yw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zy_zx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zy_zy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zy_zz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zy_zw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zy_wx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zy_wy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zy_wz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zy_ww(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zz_xx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zz_xy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zz_xz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zz_xw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zz_yx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zz_yy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zz_yz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zz_yw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zz_zx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zz_zy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zz_zz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zz_zw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zz_wx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zz_wy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zz_wz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zz_ww(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zw_xx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zw_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zw_xy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zw_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zw_xz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zw_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zw_xw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zw_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zw_yx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zw_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zw_yy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zw_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zw_yz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zw_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zw_yw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zw_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zw_zx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zw_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zw_zy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zw_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zw_zz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zw_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zw_zw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zw_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zw_wx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zw_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zw_wy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zw_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zw_wz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zw_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_zw_ww(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.zw_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wx_xx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wx_xy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wx_xz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wx_xw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wx_yx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wx_yy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wx_yz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wx_yw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wx_zx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wx_zy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wx_zz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wx_zw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wx_wx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wx_wy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wx_wz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wx_ww(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wy_xx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wy_xy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wy_xz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wy_xw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wy_yx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wy_yy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wy_yz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wy_yw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wy_zx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wy_zy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wy_zz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wy_zw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wy_wx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wy_wy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wy_wz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wy_ww(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wz_xx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wz_xy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wz_xz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wz_xw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wz_yx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wz_yy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wz_yz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wz_yw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wz_zx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wz_zy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wz_zz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wz_zw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wz_wx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wz_wy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wz_wz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_wz_ww(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.wz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_ww_xx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.ww_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_ww_xy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.ww_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_ww_xz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.ww_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_ww_xw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.ww_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_ww_yx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.ww_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_ww_yy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.ww_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_ww_yz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.ww_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_ww_yw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.ww_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_ww_zx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.ww_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_ww_zy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.ww_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_ww_zz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.ww_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_ww_zw(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.ww_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_ww_wx(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.ww_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_ww_wy(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.ww_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_ww_wz(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.ww_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 shuffle_ww_ww(half4 a, half4 b)
    {
        return soft_shuffle.Shuffle<half, half4>(a, b, Shuffle42.ww_ww);
    }
    #endregion // half4
    #region b16v4

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xx_xx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xx_xy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xx_xz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xx_xw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xx_yx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xx_yy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xx_yz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xx_yw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xx_zx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xx_zy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xx_zz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xx_zw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xx_wx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xx_wy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xx_wz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xx_ww(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xy_xx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xy_xy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xy_xz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xy_xw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xy_yx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xy_yy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xy_yz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xy_yw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xy_zx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xy_zy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xy_zz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xy_zw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xy_wx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xy_wy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xy_wz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xy_ww(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xz_xx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xz_xy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xz_xz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xz_xw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xz_yx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xz_yy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xz_yz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xz_yw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xz_zx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xz_zy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xz_zz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xz_zw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xz_wx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xz_wy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xz_wz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xz_ww(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xw_xx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xw_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xw_xy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xw_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xw_xz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xw_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xw_xw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xw_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xw_yx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xw_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xw_yy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xw_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xw_yz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xw_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xw_yw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xw_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xw_zx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xw_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xw_zy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xw_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xw_zz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xw_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xw_zw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xw_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xw_wx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xw_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xw_wy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xw_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xw_wz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xw_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_xw_ww(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.xw_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yx_xx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yx_xy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yx_xz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yx_xw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yx_yx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yx_yy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yx_yz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yx_yw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yx_zx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yx_zy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yx_zz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yx_zw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yx_wx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yx_wy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yx_wz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yx_ww(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yy_xx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yy_xy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yy_xz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yy_xw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yy_yx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yy_yy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yy_yz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yy_yw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yy_zx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yy_zy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yy_zz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yy_zw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yy_wx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yy_wy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yy_wz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yy_ww(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yz_xx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yz_xy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yz_xz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yz_xw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yz_yx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yz_yy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yz_yz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yz_yw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yz_zx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yz_zy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yz_zz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yz_zw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yz_wx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yz_wy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yz_wz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yz_ww(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yw_xx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yw_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yw_xy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yw_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yw_xz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yw_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yw_xw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yw_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yw_yx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yw_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yw_yy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yw_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yw_yz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yw_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yw_yw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yw_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yw_zx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yw_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yw_zy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yw_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yw_zz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yw_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yw_zw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yw_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yw_wx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yw_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yw_wy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yw_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yw_wz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yw_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_yw_ww(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.yw_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zx_xx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zx_xy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zx_xz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zx_xw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zx_yx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zx_yy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zx_yz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zx_yw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zx_zx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zx_zy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zx_zz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zx_zw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zx_wx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zx_wy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zx_wz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zx_ww(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zy_xx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zy_xy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zy_xz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zy_xw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zy_yx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zy_yy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zy_yz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zy_yw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zy_zx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zy_zy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zy_zz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zy_zw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zy_wx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zy_wy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zy_wz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zy_ww(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zz_xx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zz_xy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zz_xz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zz_xw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zz_yx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zz_yy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zz_yz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zz_yw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zz_zx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zz_zy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zz_zz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zz_zw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zz_wx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zz_wy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zz_wz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zz_ww(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zw_xx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zw_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zw_xy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zw_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zw_xz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zw_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zw_xw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zw_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zw_yx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zw_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zw_yy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zw_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zw_yz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zw_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zw_yw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zw_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zw_zx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zw_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zw_zy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zw_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zw_zz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zw_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zw_zw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zw_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zw_wx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zw_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zw_wy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zw_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zw_wz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zw_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_zw_ww(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.zw_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wx_xx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wx_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wx_xy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wx_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wx_xz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wx_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wx_xw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wx_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wx_yx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wx_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wx_yy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wx_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wx_yz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wx_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wx_yw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wx_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wx_zx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wx_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wx_zy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wx_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wx_zz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wx_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wx_zw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wx_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wx_wx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wx_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wx_wy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wx_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wx_wz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wx_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wx_ww(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wx_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wy_xx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wy_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wy_xy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wy_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wy_xz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wy_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wy_xw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wy_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wy_yx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wy_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wy_yy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wy_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wy_yz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wy_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wy_yw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wy_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wy_zx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wy_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wy_zy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wy_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wy_zz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wy_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wy_zw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wy_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wy_wx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wy_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wy_wy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wy_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wy_wz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wy_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wy_ww(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wy_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wz_xx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wz_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wz_xy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wz_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wz_xz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wz_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wz_xw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wz_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wz_yx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wz_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wz_yy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wz_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wz_yz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wz_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wz_yw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wz_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wz_zx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wz_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wz_zy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wz_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wz_zz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wz_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wz_zw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wz_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wz_wx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wz_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wz_wy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wz_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wz_wz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wz_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_wz_ww(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.wz_ww);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_ww_xx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.ww_xx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_ww_xy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.ww_xy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_ww_xz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.ww_xz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_ww_xw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.ww_xw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_ww_yx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.ww_yx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_ww_yy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.ww_yy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_ww_yz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.ww_yz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_ww_yw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.ww_yw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_ww_zx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.ww_zx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_ww_zy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.ww_zy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_ww_zz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.ww_zz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_ww_zw(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.ww_zw);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_ww_wx(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.ww_wx);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_ww_wy(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.ww_wy);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_ww_wz(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.ww_wz);
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 shuffle_ww_ww(b16v4 a, b16v4 b)
    {
        return soft_shuffle.Shuffle<b16, b16v4>(a, b, Shuffle42.ww_ww);
    }
    #endregion // b16v4
    #region b32v4

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xx_xx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xx_xy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xx_xz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xx_xw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xx_yx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xx_yy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xx_yz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xx_yw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xx_zx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xx_zy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xx_zz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xx_zw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xx_wx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xx_wy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xx_wz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xx_ww(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xy_xx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xy_xy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xy_xz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xy_xw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xy_yx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xy_yy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xy_yz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xy_yw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xy_zx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xy_zy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xy_zz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xy_zw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xy_wx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xy_wy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xy_wz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xy_ww(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xz_xx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xz_xy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xz_xz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xz_xw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xz_yx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xz_yy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xz_yz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xz_yw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xz_zx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xz_zy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xz_zz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xz_zw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xz_wx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xz_wy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xz_wz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xz_ww(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xw_xx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xw_xy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xw_xz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xw_xw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xw_yx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xw_yy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xw_yz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xw_yw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xw_zx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xw_zy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xw_zz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xw_zw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xw_wx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xw_wy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xw_wz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_xw_ww(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.xw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yx_xx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yx_xy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yx_xz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yx_xw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yx_yx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yx_yy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yx_yz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yx_yw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yx_zx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yx_zy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yx_zz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yx_zw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yx_wx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yx_wy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yx_wz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yx_ww(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yy_xx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yy_xy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yy_xz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yy_xw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yy_yx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yy_yy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yy_yz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yy_yw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yy_zx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yy_zy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yy_zz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yy_zw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yy_wx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yy_wy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yy_wz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yy_ww(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yz_xx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yz_xy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yz_xz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yz_xw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yz_yx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yz_yy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yz_yz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yz_yw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yz_zx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yz_zy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yz_zz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yz_zw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yz_wx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yz_wy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yz_wz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yz_ww(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yw_xx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yw_xy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yw_xz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yw_xw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yw_yx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yw_yy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yw_yz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yw_yw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yw_zx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yw_zy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yw_zz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yw_zw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yw_wx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yw_wy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yw_wz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_yw_ww(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.yw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zx_xx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zx_xy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zx_xz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zx_xw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zx_yx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zx_yy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zx_yz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zx_yw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zx_zx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zx_zy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zx_zz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zx_zw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zx_wx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zx_wy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zx_wz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zx_ww(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zy_xx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zy_xy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zy_xz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zy_xw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zy_yx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zy_yy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zy_yz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zy_yw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zy_zx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zy_zy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zy_zz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zy_zw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zy_wx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zy_wy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zy_wz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zy_ww(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zz_xx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zz_xy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zz_xz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zz_xw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zz_yx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zz_yy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zz_yz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zz_yw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zz_zx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zz_zy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zz_zz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zz_zw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zz_wx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zz_wy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zz_wz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zz_ww(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zw_xx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zw_xy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zw_xz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zw_xw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zw_yx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zw_yy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zw_yz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zw_yw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zw_zx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zw_zy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zw_zz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zw_zw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zw_wx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zw_wy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zw_wz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_zw_ww(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.zw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wx_xx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wx_xy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wx_xz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wx_xw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wx_yx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wx_yy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wx_yz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wx_yw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wx_zx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wx_zy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wx_zz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wx_zw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wx_wx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wx_wy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wx_wz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wx_ww(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wy_xx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wy_xy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wy_xz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wy_xw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wy_yx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wy_yy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wy_yz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wy_yw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wy_zx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wy_zy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wy_zz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wy_zw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wy_wx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wy_wy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wy_wz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wy_ww(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wz_xx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wz_xy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wz_xz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wz_xw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wz_yx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wz_yy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wz_yz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wz_yw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wz_zx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wz_zy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wz_zz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wz_zw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wz_wx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wz_wy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wz_wz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_wz_ww(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.wz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_ww_xx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.ww_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_ww_xy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.ww_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_ww_xz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.ww_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_ww_xw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.ww_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_ww_yx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.ww_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_ww_yy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.ww_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_ww_yz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.ww_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_ww_yw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.ww_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_ww_zx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.ww_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_ww_zy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.ww_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_ww_zz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.ww_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_ww_zw(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.ww_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_ww_wx(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.ww_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_ww_wy(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.ww_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_ww_wz(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.ww_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 shuffle_ww_ww(b32v4 a, b32v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b32, b32v4>(a, b, Shuffle42.ww_ww);
        #endif // NET8_0_OR_GREATER
    }
    #endregion // b32v4
    #region b64v4

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xx_xx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xx_xy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xx_xz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xx_xw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xx_yx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xx_yy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xx_yz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xx_yw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xx_zx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xx_zy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xx_zz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xx_zw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xx_wx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xx_wy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xx_wz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xx_ww(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xy_xx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xy_xy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xy_xz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xy_xw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xy_yx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xy_yy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xy_yz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xy_yw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xy_zx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xy_zy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xy_zz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xy_zw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xy_wx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xy_wy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xy_wz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xy_ww(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xz_xx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xz_xy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xz_xz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xz_xw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xz_yx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xz_yy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xz_yz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xz_yw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xz_zx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xz_zy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xz_zz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xz_zw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xz_wx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xz_wy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xz_wz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xz_ww(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xw_xx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xw_xy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xw_xz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xw_xw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xw_yx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xw_yy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xw_yz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xw_yw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xw_zx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xw_zy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xw_zz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xw_zw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xw_wx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xw_wy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xw_wz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.x, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_xw_ww(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_xw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.xw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yx_xx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yx_xy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yx_xz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yx_xw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yx_yx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yx_yy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yx_yz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yx_yw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yx_zx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yx_zy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yx_zz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yx_zw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yx_wx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yx_wy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yx_wz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yx_ww(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yy_xx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yy_xy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yy_xz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yy_xw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yy_yx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yy_yy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yy_yz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yy_yw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yy_zx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yy_zy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yy_zz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yy_zw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yy_wx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yy_wy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yy_wz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yy_ww(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yz_xx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yz_xy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yz_xz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yz_xw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yz_yx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yz_yy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yz_yz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yz_yw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yz_zx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yz_zy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yz_zz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yz_zw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yz_wx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yz_wy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yz_wz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yz_ww(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yw_xx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yw_xy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yw_xz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yw_xw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yw_yx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yw_yy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yw_yz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yw_yw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yw_zx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yw_zy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yw_zz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yw_zw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yw_wx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yw_wy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yw_wz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.y, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_yw_ww(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_yw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.yw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zx_xx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zx_xy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zx_xz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zx_xw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zx_yx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zx_yy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zx_yz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zx_yw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zx_zx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zx_zy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zx_zz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zx_zw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zx_wx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zx_wy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zx_wz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zx_ww(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zy_xx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zy_xy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zy_xz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zy_xw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zy_yx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zy_yy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zy_yz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zy_yw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zy_zx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zy_zy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zy_zz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zy_zw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zy_wx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zy_wy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zy_wz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zy_ww(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zz_xx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zz_xy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zz_xz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zz_xw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zz_yx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zz_yy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zz_yz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zz_yw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zz_zx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zz_zy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zz_zz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zz_zw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zz_wx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zz_wy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zz_wz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zz_ww(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zw_xx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zw_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zw_xy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zw_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zw_xz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zw_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zw_xw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zw_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zw_yx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zw_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zw_yy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zw_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zw_yz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zw_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zw_yw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zw_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zw_zx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zw_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zw_zy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zw_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zw_zz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zw_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zw_zw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zw_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zw_wx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zw_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zw_wy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zw_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zw_wz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zw_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.z, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_zw_ww(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_zw_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.zw_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wx_xx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wx_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wx_xy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wx_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wx_xz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wx_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wx_xw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wx_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wx_yx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wx_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wx_yy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wx_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wx_yz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wx_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wx_yw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wx_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wx_zx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wx_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wx_zy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wx_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wx_zz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wx_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wx_zw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wx_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wx_wx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wx_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wx_wy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wx_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wx_wz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wx_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.x, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wx_ww(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wx_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wx_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wy_xx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wy_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wy_xy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wy_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wy_xz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wy_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wy_xw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wy_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wy_yx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wy_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wy_yy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wy_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wy_yz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wy_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wy_yw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wy_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wy_zx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wy_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wy_zy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wy_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wy_zz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wy_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wy_zw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wy_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wy_wx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wy_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wy_wy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wy_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wy_wz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wy_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.y, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wy_ww(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wy_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wy_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wz_xx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wz_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wz_xy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wz_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wz_xz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wz_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wz_xw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wz_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wz_yx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wz_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wz_yy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wz_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wz_yz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wz_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wz_yw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wz_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wz_zx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wz_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wz_zy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wz_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wz_zz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wz_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wz_zw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wz_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wz_wx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wz_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wz_wy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wz_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wz_wz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wz_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.z, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_wz_ww(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_wz_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.wz_ww);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_ww_xx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.ww_xx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_ww_xy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.ww_xy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_ww_xz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.ww_xz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.x, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_ww_xw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_xw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.ww_xw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_ww_yx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.ww_yx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_ww_yy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.ww_yy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_ww_yz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.ww_yz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.y, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_ww_yw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_yw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.ww_yw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_ww_zx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.ww_zx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_ww_zy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.ww_zy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_ww_zz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.ww_zz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.z, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_ww_zw(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_zw(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.ww_zw);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.x)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_ww_wx(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wx(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.ww_wx);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.y)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_ww_wy(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wy(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.ww_wy);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.z)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_ww_wz(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_wz(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.ww_wz);
        #endif // NET8_0_OR_GREATER
    }

    /// <summary>
    /// Shuffle 2 vectors, a to low, b to high
    /// <code>
    /// a (a.x, a.y, a.z, a.x)
    /// b (b.x, b.y, b.z, b.x)
    /// r (a.w, a.w, b.w, b.w)
    /// </code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 shuffle_ww_ww(b64v4 a, b64v4 b)
    {
        #if NET8_0_OR_GREATER
        return new(simd_shuffle.Shuffle_ww_ww(a.vector, b.vector));
        #else // NET8_0_OR_GREATER
        return soft_shuffle.Shuffle<b64, b64v4>(a, b, Shuffle42.ww_ww);
        #endif // NET8_0_OR_GREATER
    }
    #endregion // b64v4
}