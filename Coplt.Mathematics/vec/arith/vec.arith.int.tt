<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        if (!typ.i) continue;
        if (!typ.arith) continue;

        for (var i = 2; i <= 4; i++)
        {
            var typeName = $"{typ.name}{i}";

            var byteSize = typ.size * (i is 3 ? 4 : i);
            var bitSize = 8 * byteSize;

            var bType = $"b{typ.size * 8}v";
            var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
            var bTypeName = $"{bType}{i}";
#>

#region <#= typeName #>

public partial struct <#= typeName #>
{
}

[Ex]
public static partial class math
{
    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isPow2([This] <#= typeName #> a)
    {
<#
            if (typ.sig)
            {
#>
        return ((a & (a - <#= typeName #>.One)) == default) & (a > default(<#= typeName #>));
<#
            }
            else
            {
#>
        return ((a & (a - <#= typeName #>.One)) == default) & (a != default);
<#
            }
#>
    }
<#
            if (!typ.sig)
            {
#>

    [MethodImpl(256 | 512)]
    public static <#= typeName #> up2pow2([This] <#= typeName #> a)
    {
        --a;
        a |= a >> 1;
        a |= a >> 2;
        a |= a >> 4;
        a |= a >> 8;
<#
                if (typ.size >= 4)
                {
#>
        a |= a >> 16;
<#
                }
#>
<#
                if (typ.size >= 8)
                {
#>
        a |= a >> 32;
<#
                }
#>
        return a + <#= typeName #>.One;
    }
<#
            }
#>
}

#endregion // <#= typeName #>
<#
        }
    }
#>
