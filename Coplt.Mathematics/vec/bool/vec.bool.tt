<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    for (int s = 2; s <= 8; s *= 2)
    {
        for (int i = 2; i <= 4; i++)
        {
            var size = s * 8;
            var bTypeName = $"b{size}v";
            var typeName = $"{bTypeName}{i}";

            var typ = Typ.Typs.FirstOrDefault(a => a.name == bTypeName);
            if (typ.name == null) continue;

            var byteSize = typ.size * (i is 3 ? 4 : i);
            var bitSize = 8 * byteSize;

            var rmw = i == 3 ? $" & Vector{bitSize}.Create(-1, -1, -1, 0).As{typ.Type}()" : "";
#>

#region <#= typeName #>

public partial struct <#= typeName #>
{
    public static <#= typeName #> True
    {
        [MethodImpl(256 | 512)]
        get => new(<#= bTypeName #>.True);
    }
    public static <#= typeName #> False
    {
        [MethodImpl(256 | 512)]
        get => new(<#= bTypeName #>.False);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator !(<#= typeName #> self)
    {
<#
            if (typ.simd)
            {
#>
        #if NET8_0_OR_GREATER
        return new((~self.vector)<#= rmw #>);
        #else // NET8_0_OR_GREATER
<#
            }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"!self.{Typ.xyzw[n]}")) #>);
<#
            if (typ.simd)
            {
#>
        #endif // NET8_0_OR_GREATER
<#
            }
#>
    }
}

public static partial class math
{

    [MethodImpl(256 | 512)]
    public static bool all(this <#= typeName #> v)
    {
<#
            if (typ.simd)
            {
#>
        #if NET8_0_OR_GREATER
        return v.vector.ExtractMostSignificantBits() >= 0x<#= i == 3 ? "7" : "F" #>;
        #else // NET8_0_OR_GREATER
<#
            }
#>
        return <#= string.Join(" && ", Enumerable.Range(0, i).Select(n => $"v.{Typ.xyzw[n]}")) #>;
<#
            if (typ.simd)
            {
#>
        #endif // NET8_0_OR_GREATER
<#
            }
#>
    }

    [MethodImpl(256 | 512)]
    public static bool any(this <#= typeName #> v)
    {
<#
            if (typ.simd)
            {
#>
        #if NET8_0_OR_GREATER
        return v.vector.ExtractMostSignificantBits() != 0;
        #else // NET8_0_OR_GREATER
<#
            }
#>
        return <#= string.Join(" || ", Enumerable.Range(0, i).Select(n => $"v.{Typ.xyzw[n]}")) #>;
<#
            if (typ.simd)
            {
#>
        #endif // NET8_0_OR_GREATER
<#
            }
#>
    }

    [MethodImpl(256 | 512)]
    public static bool allFalse(this <#= typeName #> v)
    {
<#
            if (typ.simd)
            {
#>
        #if NET8_0_OR_GREATER
        return v.vector.ExtractMostSignificantBits() == 0;
        #else // NET8_0_OR_GREATER
<#
            }
#>
        return <#= string.Join(" && ", Enumerable.Range(0, i).Select(n => $"!v.{Typ.xyzw[n]}")) #>;
<#
            if (typ.simd)
            {
#>
        #endif // NET8_0_OR_GREATER
<#
            }
#>
    }
}

#endregion // <#= typeName #>
<#
        }
    }
#>
