<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
            
        if (typ.size * 8 >= 128) continue;

        for (var i = 2; i <= 4; i++)
        {
            var typeName = $"{typ.name}{i}";

            var byteSize = typ.size * (i is 3 ? 4 : i);
            var bitSize = 8 * byteSize;
            
            var bType = $"b{typ.size * 8}v";
            var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
            var bTypeName = $"{bType}{i}";
#>

#region <#= typeName #>

[Ex]
public static partial class math
{
    [MethodImpl(256 | 512)]
    public static <#= typeName #> select([This] <#= bTypeName #> c, <#= typeName #> t, <#= typeName #> f) 
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return new(Vector<#= bitSize #>.ConditionalSelect(c.vector.As<#=typ.Type#>(), t.vector, f.vector));
<#
            }
#>
        return new(<#=
                string.Join(", ", Enumerable.Range(0, i).Select(n => $"c.{Typ.xyzw[n]} ? t.{Typ.xyzw[n]} : f.{Typ.xyzw[n]}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> select([This] bool c, <#= typeName #> t, <#= typeName #> f) => c ? t : f;
}

#endregion // <#= typeName #>
<#
        }
    }
#>

