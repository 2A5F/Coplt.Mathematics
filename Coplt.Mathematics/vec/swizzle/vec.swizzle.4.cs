// generated by template, do not modify manually

namespace Coplt.Mathematics;

#region float4

public partial struct float4 
{
    public readonly float4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
    }
    public readonly float4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
    }
    public readonly float4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
    }
    public readonly float4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
    }
    public readonly float4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
    }
    public readonly float4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
    }
    public readonly float4 xxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 3)));
    }
    public readonly float4 rrra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 3)));
    }
    public readonly float4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
    }
    public readonly float4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
    }
    public readonly float4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
    }
    public readonly float4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
    }
    public readonly float4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
    }
    public readonly float4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
    }
    public readonly float4 xxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 3)));
    }
    public readonly float4 rrga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 3)));
    }
    public readonly float4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
    }
    public readonly float4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
    }
    public readonly float4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
    }
    public readonly float4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
    }
    public readonly float4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
    }
    public readonly float4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
    }
    public readonly float4 xxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 3)));
    }
    public readonly float4 rrba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 3)));
    }
    public readonly float4 xxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 0)));
    }
    public readonly float4 rrar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 0)));
    }
    public readonly float4 xxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 1)));
    }
    public readonly float4 rrag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 1)));
    }
    public readonly float4 xxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 2)));
    }
    public readonly float4 rrab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 2)));
    }
    public readonly float4 xxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 3)));
    }
    public readonly float4 rraa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 3)));
    }
    public readonly float4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
    }
    public readonly float4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
    }
    public readonly float4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
    }
    public readonly float4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
    }
    public readonly float4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
    }
    public readonly float4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
    }
    public readonly float4 xyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 3)));
    }
    public readonly float4 rgra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 3)));
    }
    public readonly float4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
    }
    public readonly float4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
    }
    public readonly float4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
    }
    public readonly float4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
    }
    public readonly float4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
    }
    public readonly float4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
    }
    public readonly float4 xyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 3)));
    }
    public readonly float4 rgga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 3)));
    }
    public readonly float4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
    }
    public readonly float4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
    }
    public readonly float4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
    }
    public readonly float4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
    }
    public readonly float4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
    }
    public readonly float4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
    }
    public float4 xyzw
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public float4 rgba
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly float4 xywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 0)));
    }
    public readonly float4 rgar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 0)));
    }
    public readonly float4 xywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 1)));
    }
    public readonly float4 rgag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 1)));
    }
    public float4 xywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public float4 rgab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public readonly float4 xyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 3)));
    }
    public readonly float4 rgaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 3)));
    }
    public readonly float4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
    }
    public readonly float4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
    }
    public readonly float4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
    }
    public readonly float4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
    }
    public readonly float4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
    }
    public readonly float4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
    }
    public readonly float4 xzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 3)));
    }
    public readonly float4 rbra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 3)));
    }
    public readonly float4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
    }
    public readonly float4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
    }
    public readonly float4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
    }
    public readonly float4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
    }
    public readonly float4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
    }
    public readonly float4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
    }
    public float4 xzyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public float4 rbga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public readonly float4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
    }
    public readonly float4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
    }
    public readonly float4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
    }
    public readonly float4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
    }
    public readonly float4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
    }
    public readonly float4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
    }
    public readonly float4 xzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 3)));
    }
    public readonly float4 rbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 3)));
    }
    public readonly float4 xzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 0)));
    }
    public readonly float4 rbar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 0)));
    }
    public float4 xzwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public float4 rbag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public readonly float4 xzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 2)));
    }
    public readonly float4 rbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 2)));
    }
    public readonly float4 xzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 3)));
    }
    public readonly float4 rbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 3)));
    }
    public readonly float4 xwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 0)));
    }
    public readonly float4 rarr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 0)));
    }
    public readonly float4 xwxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 1)));
    }
    public readonly float4 rarg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 1)));
    }
    public readonly float4 xwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 2)));
    }
    public readonly float4 rarb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 2)));
    }
    public readonly float4 xwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 3)));
    }
    public readonly float4 rara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 3)));
    }
    public readonly float4 xwyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 0)));
    }
    public readonly float4 ragr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 0)));
    }
    public readonly float4 xwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 1)));
    }
    public readonly float4 ragg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 1)));
    }
    public float4 xwyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public float4 ragb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public readonly float4 xwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 3)));
    }
    public readonly float4 raga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 3)));
    }
    public readonly float4 xwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 0)));
    }
    public readonly float4 rabr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 0)));
    }
    public float4 xwzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public float4 rabg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public readonly float4 xwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 2)));
    }
    public readonly float4 rabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 2)));
    }
    public readonly float4 xwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 3)));
    }
    public readonly float4 raba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 3)));
    }
    public readonly float4 xwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 0)));
    }
    public readonly float4 raar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 0)));
    }
    public readonly float4 xwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 1)));
    }
    public readonly float4 raag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 1)));
    }
    public readonly float4 xwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 2)));
    }
    public readonly float4 raab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 2)));
    }
    public readonly float4 xwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 3)));
    }
    public readonly float4 raaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 3)));
    }
    public readonly float4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
    }
    public readonly float4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
    }
    public readonly float4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
    }
    public readonly float4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
    }
    public readonly float4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
    }
    public readonly float4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
    }
    public readonly float4 yxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 3)));
    }
    public readonly float4 grra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 3)));
    }
    public readonly float4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
    }
    public readonly float4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
    }
    public readonly float4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
    }
    public readonly float4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
    }
    public readonly float4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
    }
    public readonly float4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
    }
    public readonly float4 yxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 3)));
    }
    public readonly float4 grga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 3)));
    }
    public readonly float4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
    }
    public readonly float4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
    }
    public readonly float4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
    }
    public readonly float4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
    }
    public readonly float4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
    }
    public readonly float4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
    }
    public float4 yxzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public float4 grba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public readonly float4 yxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 0)));
    }
    public readonly float4 grar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 0)));
    }
    public readonly float4 yxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 1)));
    }
    public readonly float4 grag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 1)));
    }
    public float4 yxwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public float4 grab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public readonly float4 yxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 3)));
    }
    public readonly float4 graa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 3)));
    }
    public readonly float4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
    }
    public readonly float4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
    }
    public readonly float4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
    }
    public readonly float4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
    }
    public readonly float4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
    }
    public readonly float4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
    }
    public readonly float4 yyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 3)));
    }
    public readonly float4 ggra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 3)));
    }
    public readonly float4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
    }
    public readonly float4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
    }
    public readonly float4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
    }
    public readonly float4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
    }
    public readonly float4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
    }
    public readonly float4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
    }
    public readonly float4 yyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 3)));
    }
    public readonly float4 ggga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 3)));
    }
    public readonly float4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
    }
    public readonly float4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
    }
    public readonly float4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
    }
    public readonly float4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
    }
    public readonly float4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
    }
    public readonly float4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
    }
    public readonly float4 yyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 3)));
    }
    public readonly float4 ggba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 3)));
    }
    public readonly float4 yywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 0)));
    }
    public readonly float4 ggar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 0)));
    }
    public readonly float4 yywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 1)));
    }
    public readonly float4 ggag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 1)));
    }
    public readonly float4 yywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 2)));
    }
    public readonly float4 ggab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 2)));
    }
    public readonly float4 yyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 3)));
    }
    public readonly float4 ggaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 3)));
    }
    public readonly float4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
    }
    public readonly float4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
    }
    public readonly float4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
    }
    public readonly float4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
    }
    public readonly float4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
    }
    public readonly float4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
    }
    public float4 yzxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public float4 gbra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public readonly float4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
    }
    public readonly float4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
    }
    public readonly float4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
    }
    public readonly float4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
    }
    public readonly float4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
    }
    public readonly float4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
    }
    public readonly float4 yzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 3)));
    }
    public readonly float4 gbga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 3)));
    }
    public readonly float4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
    }
    public readonly float4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
    }
    public readonly float4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
    }
    public readonly float4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
    }
    public readonly float4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
    }
    public readonly float4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
    }
    public readonly float4 yzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 3)));
    }
    public readonly float4 gbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 3)));
    }
    public float4 yzwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public float4 gbar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public readonly float4 yzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 1)));
    }
    public readonly float4 gbag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 1)));
    }
    public readonly float4 yzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 2)));
    }
    public readonly float4 gbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 2)));
    }
    public readonly float4 yzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 3)));
    }
    public readonly float4 gbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 3)));
    }
    public readonly float4 ywxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 0)));
    }
    public readonly float4 garr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 0)));
    }
    public readonly float4 ywxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 1)));
    }
    public readonly float4 garg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 1)));
    }
    public float4 ywxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public float4 garb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public readonly float4 ywxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 3)));
    }
    public readonly float4 gara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 3)));
    }
    public readonly float4 ywyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 0)));
    }
    public readonly float4 gagr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 0)));
    }
    public readonly float4 ywyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 1)));
    }
    public readonly float4 gagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 1)));
    }
    public readonly float4 ywyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 2)));
    }
    public readonly float4 gagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 2)));
    }
    public readonly float4 ywyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 3)));
    }
    public readonly float4 gaga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 3)));
    }
    public float4 ywzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public float4 gabr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public readonly float4 ywzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 1)));
    }
    public readonly float4 gabg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 1)));
    }
    public readonly float4 ywzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 2)));
    }
    public readonly float4 gabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 2)));
    }
    public readonly float4 ywzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 3)));
    }
    public readonly float4 gaba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 3)));
    }
    public readonly float4 ywwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 0)));
    }
    public readonly float4 gaar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 0)));
    }
    public readonly float4 ywwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 1)));
    }
    public readonly float4 gaag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 1)));
    }
    public readonly float4 ywwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 2)));
    }
    public readonly float4 gaab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 2)));
    }
    public readonly float4 ywww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 3)));
    }
    public readonly float4 gaaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 3)));
    }
    public readonly float4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
    }
    public readonly float4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
    }
    public readonly float4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
    }
    public readonly float4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
    }
    public readonly float4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
    }
    public readonly float4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
    }
    public readonly float4 zxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 3)));
    }
    public readonly float4 brra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 3)));
    }
    public readonly float4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
    }
    public readonly float4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
    }
    public readonly float4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
    }
    public readonly float4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
    }
    public readonly float4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
    }
    public readonly float4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
    }
    public float4 zxyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public float4 brga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public readonly float4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
    }
    public readonly float4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
    }
    public readonly float4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
    }
    public readonly float4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
    }
    public readonly float4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
    }
    public readonly float4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
    }
    public readonly float4 zxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 3)));
    }
    public readonly float4 brba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 3)));
    }
    public readonly float4 zxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 0)));
    }
    public readonly float4 brar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 0)));
    }
    public float4 zxwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public float4 brag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public readonly float4 zxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 2)));
    }
    public readonly float4 brab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 2)));
    }
    public readonly float4 zxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 3)));
    }
    public readonly float4 braa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 3)));
    }
    public readonly float4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
    }
    public readonly float4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
    }
    public readonly float4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
    }
    public readonly float4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
    }
    public readonly float4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
    }
    public readonly float4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
    }
    public float4 zyxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public float4 bgra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public readonly float4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
    }
    public readonly float4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
    }
    public readonly float4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
    }
    public readonly float4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
    }
    public readonly float4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
    }
    public readonly float4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
    }
    public readonly float4 zyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 3)));
    }
    public readonly float4 bgga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 3)));
    }
    public readonly float4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
    }
    public readonly float4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
    }
    public readonly float4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
    }
    public readonly float4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
    }
    public readonly float4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
    }
    public readonly float4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
    }
    public readonly float4 zyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 3)));
    }
    public readonly float4 bgba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 3)));
    }
    public float4 zywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public float4 bgar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public readonly float4 zywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 1)));
    }
    public readonly float4 bgag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 1)));
    }
    public readonly float4 zywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 2)));
    }
    public readonly float4 bgab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 2)));
    }
    public readonly float4 zyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 3)));
    }
    public readonly float4 bgaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 3)));
    }
    public readonly float4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
    }
    public readonly float4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
    }
    public readonly float4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
    }
    public readonly float4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
    }
    public readonly float4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
    }
    public readonly float4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
    }
    public readonly float4 zzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 3)));
    }
    public readonly float4 bbra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 3)));
    }
    public readonly float4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
    }
    public readonly float4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
    }
    public readonly float4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
    }
    public readonly float4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
    }
    public readonly float4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
    }
    public readonly float4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
    }
    public readonly float4 zzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 3)));
    }
    public readonly float4 bbga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 3)));
    }
    public readonly float4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
    }
    public readonly float4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
    }
    public readonly float4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
    }
    public readonly float4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
    }
    public readonly float4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
    }
    public readonly float4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
    }
    public readonly float4 zzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 3)));
    }
    public readonly float4 bbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 3)));
    }
    public readonly float4 zzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 0)));
    }
    public readonly float4 bbar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 0)));
    }
    public readonly float4 zzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 1)));
    }
    public readonly float4 bbag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 1)));
    }
    public readonly float4 zzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 2)));
    }
    public readonly float4 bbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 2)));
    }
    public readonly float4 zzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 3)));
    }
    public readonly float4 bbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 3)));
    }
    public readonly float4 zwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 0)));
    }
    public readonly float4 barr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 0)));
    }
    public float4 zwxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public float4 barg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public readonly float4 zwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 2)));
    }
    public readonly float4 barb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 2)));
    }
    public readonly float4 zwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 3)));
    }
    public readonly float4 bara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 3)));
    }
    public float4 zwyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public float4 bagr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public readonly float4 zwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 1)));
    }
    public readonly float4 bagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 1)));
    }
    public readonly float4 zwyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 2)));
    }
    public readonly float4 bagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 2)));
    }
    public readonly float4 zwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 3)));
    }
    public readonly float4 baga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 3)));
    }
    public readonly float4 zwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 0)));
    }
    public readonly float4 babr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 0)));
    }
    public readonly float4 zwzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 1)));
    }
    public readonly float4 babg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 1)));
    }
    public readonly float4 zwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 2)));
    }
    public readonly float4 babb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 2)));
    }
    public readonly float4 zwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 3)));
    }
    public readonly float4 baba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 3)));
    }
    public readonly float4 zwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 0)));
    }
    public readonly float4 baar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 0)));
    }
    public readonly float4 zwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 1)));
    }
    public readonly float4 baag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 1)));
    }
    public readonly float4 zwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 2)));
    }
    public readonly float4 baab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 2)));
    }
    public readonly float4 zwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 3)));
    }
    public readonly float4 baaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 3)));
    }
    public readonly float4 wxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 0)));
    }
    public readonly float4 arrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 0)));
    }
    public readonly float4 wxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 1)));
    }
    public readonly float4 arrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 1)));
    }
    public readonly float4 wxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 2)));
    }
    public readonly float4 arrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 2)));
    }
    public readonly float4 wxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 3)));
    }
    public readonly float4 arra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 3)));
    }
    public readonly float4 wxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 0)));
    }
    public readonly float4 argr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 0)));
    }
    public readonly float4 wxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 1)));
    }
    public readonly float4 argg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 1)));
    }
    public float4 wxyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public float4 argb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public readonly float4 wxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 3)));
    }
    public readonly float4 arga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 3)));
    }
    public readonly float4 wxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 0)));
    }
    public readonly float4 arbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 0)));
    }
    public float4 wxzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public float4 arbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public readonly float4 wxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 2)));
    }
    public readonly float4 arbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 2)));
    }
    public readonly float4 wxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 3)));
    }
    public readonly float4 arba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 3)));
    }
    public readonly float4 wxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 0)));
    }
    public readonly float4 arar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 0)));
    }
    public readonly float4 wxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 1)));
    }
    public readonly float4 arag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 1)));
    }
    public readonly float4 wxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 2)));
    }
    public readonly float4 arab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 2)));
    }
    public readonly float4 wxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 3)));
    }
    public readonly float4 araa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 3)));
    }
    public readonly float4 wyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 0)));
    }
    public readonly float4 agrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 0)));
    }
    public readonly float4 wyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 1)));
    }
    public readonly float4 agrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 1)));
    }
    public float4 wyxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public float4 agrb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public readonly float4 wyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 3)));
    }
    public readonly float4 agra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 3)));
    }
    public readonly float4 wyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 0)));
    }
    public readonly float4 aggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 0)));
    }
    public readonly float4 wyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 1)));
    }
    public readonly float4 aggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 1)));
    }
    public readonly float4 wyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 2)));
    }
    public readonly float4 aggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 2)));
    }
    public readonly float4 wyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 3)));
    }
    public readonly float4 agga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 3)));
    }
    public float4 wyzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public float4 agbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public readonly float4 wyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 1)));
    }
    public readonly float4 agbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 1)));
    }
    public readonly float4 wyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 2)));
    }
    public readonly float4 agbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 2)));
    }
    public readonly float4 wyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 3)));
    }
    public readonly float4 agba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 3)));
    }
    public readonly float4 wywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 0)));
    }
    public readonly float4 agar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 0)));
    }
    public readonly float4 wywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 1)));
    }
    public readonly float4 agag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 1)));
    }
    public readonly float4 wywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 2)));
    }
    public readonly float4 agab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 2)));
    }
    public readonly float4 wyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 3)));
    }
    public readonly float4 agaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 3)));
    }
    public readonly float4 wzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 0)));
    }
    public readonly float4 abrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 0)));
    }
    public float4 wzxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public float4 abrg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public readonly float4 wzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 2)));
    }
    public readonly float4 abrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 2)));
    }
    public readonly float4 wzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 3)));
    }
    public readonly float4 abra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 3)));
    }
    public float4 wzyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public float4 abgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public readonly float4 wzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 1)));
    }
    public readonly float4 abgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 1)));
    }
    public readonly float4 wzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 2)));
    }
    public readonly float4 abgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 2)));
    }
    public readonly float4 wzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 3)));
    }
    public readonly float4 abga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 3)));
    }
    public readonly float4 wzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 0)));
    }
    public readonly float4 abbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 0)));
    }
    public readonly float4 wzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 1)));
    }
    public readonly float4 abbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 1)));
    }
    public readonly float4 wzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 2)));
    }
    public readonly float4 abbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 2)));
    }
    public readonly float4 wzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 3)));
    }
    public readonly float4 abba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 3)));
    }
    public readonly float4 wzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 0)));
    }
    public readonly float4 abar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 0)));
    }
    public readonly float4 wzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 1)));
    }
    public readonly float4 abag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 1)));
    }
    public readonly float4 wzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 2)));
    }
    public readonly float4 abab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 2)));
    }
    public readonly float4 wzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 3)));
    }
    public readonly float4 abaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 3)));
    }
    public readonly float4 wwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 0)));
    }
    public readonly float4 aarr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 0)));
    }
    public readonly float4 wwxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 1)));
    }
    public readonly float4 aarg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 1)));
    }
    public readonly float4 wwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 2)));
    }
    public readonly float4 aarb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 2)));
    }
    public readonly float4 wwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 3)));
    }
    public readonly float4 aara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 3)));
    }
    public readonly float4 wwyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 0)));
    }
    public readonly float4 aagr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 0)));
    }
    public readonly float4 wwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 1)));
    }
    public readonly float4 aagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 1)));
    }
    public readonly float4 wwyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 2)));
    }
    public readonly float4 aagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 2)));
    }
    public readonly float4 wwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 3)));
    }
    public readonly float4 aaga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 3)));
    }
    public readonly float4 wwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 0)));
    }
    public readonly float4 aabr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 0)));
    }
    public readonly float4 wwzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 1)));
    }
    public readonly float4 aabg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 1)));
    }
    public readonly float4 wwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 2)));
    }
    public readonly float4 aabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 2)));
    }
    public readonly float4 wwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 3)));
    }
    public readonly float4 aaba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 3)));
    }
    public readonly float4 wwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 0)));
    }
    public readonly float4 aaar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 0)));
    }
    public readonly float4 wwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 1)));
    }
    public readonly float4 aaag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 1)));
    }
    public readonly float4 wwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 2)));
    }
    public readonly float4 aaab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 2)));
    }
    public readonly float4 wwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 3)));
    }
    public readonly float4 aaaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 3)));
    }
}

#endregion // float4

#region double4

public partial struct double4 
{
    public readonly double4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
    }
    public readonly double4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
    }
    public readonly double4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
    }
    public readonly double4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
    }
    public readonly double4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
    }
    public readonly double4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
    }
    public readonly double4 xxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 3)));
    }
    public readonly double4 rrra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 3)));
    }
    public readonly double4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
    }
    public readonly double4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
    }
    public readonly double4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
    }
    public readonly double4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
    }
    public readonly double4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
    }
    public readonly double4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
    }
    public readonly double4 xxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 3)));
    }
    public readonly double4 rrga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 3)));
    }
    public readonly double4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
    }
    public readonly double4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
    }
    public readonly double4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
    }
    public readonly double4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
    }
    public readonly double4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
    }
    public readonly double4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
    }
    public readonly double4 xxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 3)));
    }
    public readonly double4 rrba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 3)));
    }
    public readonly double4 xxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 0)));
    }
    public readonly double4 rrar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 0)));
    }
    public readonly double4 xxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 1)));
    }
    public readonly double4 rrag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 1)));
    }
    public readonly double4 xxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 2)));
    }
    public readonly double4 rrab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 2)));
    }
    public readonly double4 xxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 3)));
    }
    public readonly double4 rraa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 3)));
    }
    public readonly double4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
    }
    public readonly double4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
    }
    public readonly double4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
    }
    public readonly double4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
    }
    public readonly double4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
    }
    public readonly double4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
    }
    public readonly double4 xyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 3)));
    }
    public readonly double4 rgra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 3)));
    }
    public readonly double4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
    }
    public readonly double4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
    }
    public readonly double4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
    }
    public readonly double4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
    }
    public readonly double4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
    }
    public readonly double4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
    }
    public readonly double4 xyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 3)));
    }
    public readonly double4 rgga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 3)));
    }
    public readonly double4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
    }
    public readonly double4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
    }
    public readonly double4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
    }
    public readonly double4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
    }
    public readonly double4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
    }
    public readonly double4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
    }
    public double4 xyzw
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public double4 rgba
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly double4 xywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 0)));
    }
    public readonly double4 rgar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 0)));
    }
    public readonly double4 xywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 1)));
    }
    public readonly double4 rgag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 1)));
    }
    public double4 xywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public double4 rgab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public readonly double4 xyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 3)));
    }
    public readonly double4 rgaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 3)));
    }
    public readonly double4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
    }
    public readonly double4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
    }
    public readonly double4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
    }
    public readonly double4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
    }
    public readonly double4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
    }
    public readonly double4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
    }
    public readonly double4 xzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 3)));
    }
    public readonly double4 rbra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 3)));
    }
    public readonly double4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
    }
    public readonly double4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
    }
    public readonly double4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
    }
    public readonly double4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
    }
    public readonly double4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
    }
    public readonly double4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
    }
    public double4 xzyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public double4 rbga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public readonly double4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
    }
    public readonly double4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
    }
    public readonly double4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
    }
    public readonly double4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
    }
    public readonly double4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
    }
    public readonly double4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
    }
    public readonly double4 xzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 3)));
    }
    public readonly double4 rbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 3)));
    }
    public readonly double4 xzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 0)));
    }
    public readonly double4 rbar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 0)));
    }
    public double4 xzwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public double4 rbag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public readonly double4 xzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 2)));
    }
    public readonly double4 rbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 2)));
    }
    public readonly double4 xzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 3)));
    }
    public readonly double4 rbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 3)));
    }
    public readonly double4 xwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 0)));
    }
    public readonly double4 rarr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 0)));
    }
    public readonly double4 xwxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 1)));
    }
    public readonly double4 rarg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 1)));
    }
    public readonly double4 xwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 2)));
    }
    public readonly double4 rarb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 2)));
    }
    public readonly double4 xwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 3)));
    }
    public readonly double4 rara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 3)));
    }
    public readonly double4 xwyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 0)));
    }
    public readonly double4 ragr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 0)));
    }
    public readonly double4 xwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 1)));
    }
    public readonly double4 ragg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 1)));
    }
    public double4 xwyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public double4 ragb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public readonly double4 xwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 3)));
    }
    public readonly double4 raga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 3)));
    }
    public readonly double4 xwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 0)));
    }
    public readonly double4 rabr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 0)));
    }
    public double4 xwzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public double4 rabg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public readonly double4 xwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 2)));
    }
    public readonly double4 rabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 2)));
    }
    public readonly double4 xwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 3)));
    }
    public readonly double4 raba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 3)));
    }
    public readonly double4 xwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 0)));
    }
    public readonly double4 raar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 0)));
    }
    public readonly double4 xwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 1)));
    }
    public readonly double4 raag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 1)));
    }
    public readonly double4 xwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 2)));
    }
    public readonly double4 raab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 2)));
    }
    public readonly double4 xwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 3)));
    }
    public readonly double4 raaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 3)));
    }
    public readonly double4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
    }
    public readonly double4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
    }
    public readonly double4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
    }
    public readonly double4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
    }
    public readonly double4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
    }
    public readonly double4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
    }
    public readonly double4 yxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 3)));
    }
    public readonly double4 grra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 3)));
    }
    public readonly double4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
    }
    public readonly double4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
    }
    public readonly double4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
    }
    public readonly double4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
    }
    public readonly double4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
    }
    public readonly double4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
    }
    public readonly double4 yxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 3)));
    }
    public readonly double4 grga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 3)));
    }
    public readonly double4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
    }
    public readonly double4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
    }
    public readonly double4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
    }
    public readonly double4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
    }
    public readonly double4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
    }
    public readonly double4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
    }
    public double4 yxzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public double4 grba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public readonly double4 yxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 0)));
    }
    public readonly double4 grar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 0)));
    }
    public readonly double4 yxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 1)));
    }
    public readonly double4 grag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 1)));
    }
    public double4 yxwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public double4 grab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public readonly double4 yxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 3)));
    }
    public readonly double4 graa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 3)));
    }
    public readonly double4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
    }
    public readonly double4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
    }
    public readonly double4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
    }
    public readonly double4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
    }
    public readonly double4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
    }
    public readonly double4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
    }
    public readonly double4 yyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 3)));
    }
    public readonly double4 ggra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 3)));
    }
    public readonly double4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
    }
    public readonly double4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
    }
    public readonly double4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
    }
    public readonly double4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
    }
    public readonly double4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
    }
    public readonly double4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
    }
    public readonly double4 yyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 3)));
    }
    public readonly double4 ggga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 3)));
    }
    public readonly double4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
    }
    public readonly double4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
    }
    public readonly double4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
    }
    public readonly double4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
    }
    public readonly double4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
    }
    public readonly double4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
    }
    public readonly double4 yyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 3)));
    }
    public readonly double4 ggba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 3)));
    }
    public readonly double4 yywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 0)));
    }
    public readonly double4 ggar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 0)));
    }
    public readonly double4 yywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 1)));
    }
    public readonly double4 ggag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 1)));
    }
    public readonly double4 yywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 2)));
    }
    public readonly double4 ggab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 2)));
    }
    public readonly double4 yyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 3)));
    }
    public readonly double4 ggaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 3)));
    }
    public readonly double4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
    }
    public readonly double4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
    }
    public readonly double4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
    }
    public readonly double4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
    }
    public readonly double4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
    }
    public readonly double4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
    }
    public double4 yzxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public double4 gbra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public readonly double4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
    }
    public readonly double4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
    }
    public readonly double4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
    }
    public readonly double4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
    }
    public readonly double4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
    }
    public readonly double4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
    }
    public readonly double4 yzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 3)));
    }
    public readonly double4 gbga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 3)));
    }
    public readonly double4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
    }
    public readonly double4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
    }
    public readonly double4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
    }
    public readonly double4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
    }
    public readonly double4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
    }
    public readonly double4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
    }
    public readonly double4 yzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 3)));
    }
    public readonly double4 gbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 3)));
    }
    public double4 yzwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public double4 gbar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public readonly double4 yzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 1)));
    }
    public readonly double4 gbag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 1)));
    }
    public readonly double4 yzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 2)));
    }
    public readonly double4 gbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 2)));
    }
    public readonly double4 yzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 3)));
    }
    public readonly double4 gbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 3)));
    }
    public readonly double4 ywxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 0)));
    }
    public readonly double4 garr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 0)));
    }
    public readonly double4 ywxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 1)));
    }
    public readonly double4 garg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 1)));
    }
    public double4 ywxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public double4 garb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public readonly double4 ywxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 3)));
    }
    public readonly double4 gara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 3)));
    }
    public readonly double4 ywyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 0)));
    }
    public readonly double4 gagr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 0)));
    }
    public readonly double4 ywyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 1)));
    }
    public readonly double4 gagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 1)));
    }
    public readonly double4 ywyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 2)));
    }
    public readonly double4 gagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 2)));
    }
    public readonly double4 ywyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 3)));
    }
    public readonly double4 gaga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 3)));
    }
    public double4 ywzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public double4 gabr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public readonly double4 ywzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 1)));
    }
    public readonly double4 gabg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 1)));
    }
    public readonly double4 ywzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 2)));
    }
    public readonly double4 gabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 2)));
    }
    public readonly double4 ywzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 3)));
    }
    public readonly double4 gaba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 3)));
    }
    public readonly double4 ywwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 0)));
    }
    public readonly double4 gaar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 0)));
    }
    public readonly double4 ywwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 1)));
    }
    public readonly double4 gaag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 1)));
    }
    public readonly double4 ywwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 2)));
    }
    public readonly double4 gaab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 2)));
    }
    public readonly double4 ywww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 3)));
    }
    public readonly double4 gaaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 3)));
    }
    public readonly double4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
    }
    public readonly double4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
    }
    public readonly double4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
    }
    public readonly double4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
    }
    public readonly double4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
    }
    public readonly double4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
    }
    public readonly double4 zxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 3)));
    }
    public readonly double4 brra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 3)));
    }
    public readonly double4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
    }
    public readonly double4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
    }
    public readonly double4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
    }
    public readonly double4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
    }
    public readonly double4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
    }
    public readonly double4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
    }
    public double4 zxyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public double4 brga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public readonly double4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
    }
    public readonly double4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
    }
    public readonly double4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
    }
    public readonly double4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
    }
    public readonly double4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
    }
    public readonly double4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
    }
    public readonly double4 zxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 3)));
    }
    public readonly double4 brba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 3)));
    }
    public readonly double4 zxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 0)));
    }
    public readonly double4 brar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 0)));
    }
    public double4 zxwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public double4 brag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public readonly double4 zxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 2)));
    }
    public readonly double4 brab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 2)));
    }
    public readonly double4 zxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 3)));
    }
    public readonly double4 braa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 3)));
    }
    public readonly double4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
    }
    public readonly double4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
    }
    public readonly double4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
    }
    public readonly double4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
    }
    public readonly double4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
    }
    public readonly double4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
    }
    public double4 zyxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public double4 bgra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public readonly double4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
    }
    public readonly double4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
    }
    public readonly double4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
    }
    public readonly double4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
    }
    public readonly double4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
    }
    public readonly double4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
    }
    public readonly double4 zyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 3)));
    }
    public readonly double4 bgga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 3)));
    }
    public readonly double4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
    }
    public readonly double4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
    }
    public readonly double4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
    }
    public readonly double4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
    }
    public readonly double4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
    }
    public readonly double4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
    }
    public readonly double4 zyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 3)));
    }
    public readonly double4 bgba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 3)));
    }
    public double4 zywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public double4 bgar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public readonly double4 zywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 1)));
    }
    public readonly double4 bgag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 1)));
    }
    public readonly double4 zywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 2)));
    }
    public readonly double4 bgab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 2)));
    }
    public readonly double4 zyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 3)));
    }
    public readonly double4 bgaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 3)));
    }
    public readonly double4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
    }
    public readonly double4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
    }
    public readonly double4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
    }
    public readonly double4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
    }
    public readonly double4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
    }
    public readonly double4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
    }
    public readonly double4 zzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 3)));
    }
    public readonly double4 bbra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 3)));
    }
    public readonly double4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
    }
    public readonly double4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
    }
    public readonly double4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
    }
    public readonly double4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
    }
    public readonly double4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
    }
    public readonly double4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
    }
    public readonly double4 zzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 3)));
    }
    public readonly double4 bbga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 3)));
    }
    public readonly double4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
    }
    public readonly double4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
    }
    public readonly double4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
    }
    public readonly double4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
    }
    public readonly double4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
    }
    public readonly double4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
    }
    public readonly double4 zzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 3)));
    }
    public readonly double4 bbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 3)));
    }
    public readonly double4 zzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 0)));
    }
    public readonly double4 bbar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 0)));
    }
    public readonly double4 zzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 1)));
    }
    public readonly double4 bbag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 1)));
    }
    public readonly double4 zzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 2)));
    }
    public readonly double4 bbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 2)));
    }
    public readonly double4 zzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 3)));
    }
    public readonly double4 bbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 3)));
    }
    public readonly double4 zwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 0)));
    }
    public readonly double4 barr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 0)));
    }
    public double4 zwxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public double4 barg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public readonly double4 zwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 2)));
    }
    public readonly double4 barb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 2)));
    }
    public readonly double4 zwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 3)));
    }
    public readonly double4 bara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 3)));
    }
    public double4 zwyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public double4 bagr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public readonly double4 zwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 1)));
    }
    public readonly double4 bagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 1)));
    }
    public readonly double4 zwyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 2)));
    }
    public readonly double4 bagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 2)));
    }
    public readonly double4 zwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 3)));
    }
    public readonly double4 baga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 3)));
    }
    public readonly double4 zwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 0)));
    }
    public readonly double4 babr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 0)));
    }
    public readonly double4 zwzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 1)));
    }
    public readonly double4 babg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 1)));
    }
    public readonly double4 zwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 2)));
    }
    public readonly double4 babb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 2)));
    }
    public readonly double4 zwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 3)));
    }
    public readonly double4 baba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 3)));
    }
    public readonly double4 zwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 0)));
    }
    public readonly double4 baar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 0)));
    }
    public readonly double4 zwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 1)));
    }
    public readonly double4 baag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 1)));
    }
    public readonly double4 zwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 2)));
    }
    public readonly double4 baab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 2)));
    }
    public readonly double4 zwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 3)));
    }
    public readonly double4 baaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 3)));
    }
    public readonly double4 wxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 0)));
    }
    public readonly double4 arrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 0)));
    }
    public readonly double4 wxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 1)));
    }
    public readonly double4 arrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 1)));
    }
    public readonly double4 wxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 2)));
    }
    public readonly double4 arrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 2)));
    }
    public readonly double4 wxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 3)));
    }
    public readonly double4 arra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 3)));
    }
    public readonly double4 wxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 0)));
    }
    public readonly double4 argr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 0)));
    }
    public readonly double4 wxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 1)));
    }
    public readonly double4 argg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 1)));
    }
    public double4 wxyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public double4 argb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public readonly double4 wxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 3)));
    }
    public readonly double4 arga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 3)));
    }
    public readonly double4 wxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 0)));
    }
    public readonly double4 arbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 0)));
    }
    public double4 wxzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public double4 arbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public readonly double4 wxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 2)));
    }
    public readonly double4 arbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 2)));
    }
    public readonly double4 wxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 3)));
    }
    public readonly double4 arba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 3)));
    }
    public readonly double4 wxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 0)));
    }
    public readonly double4 arar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 0)));
    }
    public readonly double4 wxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 1)));
    }
    public readonly double4 arag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 1)));
    }
    public readonly double4 wxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 2)));
    }
    public readonly double4 arab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 2)));
    }
    public readonly double4 wxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 3)));
    }
    public readonly double4 araa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 3)));
    }
    public readonly double4 wyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 0)));
    }
    public readonly double4 agrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 0)));
    }
    public readonly double4 wyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 1)));
    }
    public readonly double4 agrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 1)));
    }
    public double4 wyxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public double4 agrb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public readonly double4 wyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 3)));
    }
    public readonly double4 agra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 3)));
    }
    public readonly double4 wyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 0)));
    }
    public readonly double4 aggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 0)));
    }
    public readonly double4 wyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 1)));
    }
    public readonly double4 aggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 1)));
    }
    public readonly double4 wyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 2)));
    }
    public readonly double4 aggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 2)));
    }
    public readonly double4 wyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 3)));
    }
    public readonly double4 agga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 3)));
    }
    public double4 wyzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public double4 agbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public readonly double4 wyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 1)));
    }
    public readonly double4 agbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 1)));
    }
    public readonly double4 wyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 2)));
    }
    public readonly double4 agbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 2)));
    }
    public readonly double4 wyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 3)));
    }
    public readonly double4 agba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 3)));
    }
    public readonly double4 wywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 0)));
    }
    public readonly double4 agar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 0)));
    }
    public readonly double4 wywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 1)));
    }
    public readonly double4 agag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 1)));
    }
    public readonly double4 wywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 2)));
    }
    public readonly double4 agab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 2)));
    }
    public readonly double4 wyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 3)));
    }
    public readonly double4 agaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 3)));
    }
    public readonly double4 wzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 0)));
    }
    public readonly double4 abrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 0)));
    }
    public double4 wzxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public double4 abrg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public readonly double4 wzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 2)));
    }
    public readonly double4 abrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 2)));
    }
    public readonly double4 wzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 3)));
    }
    public readonly double4 abra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 3)));
    }
    public double4 wzyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public double4 abgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public readonly double4 wzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 1)));
    }
    public readonly double4 abgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 1)));
    }
    public readonly double4 wzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 2)));
    }
    public readonly double4 abgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 2)));
    }
    public readonly double4 wzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 3)));
    }
    public readonly double4 abga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 3)));
    }
    public readonly double4 wzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 0)));
    }
    public readonly double4 abbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 0)));
    }
    public readonly double4 wzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 1)));
    }
    public readonly double4 abbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 1)));
    }
    public readonly double4 wzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 2)));
    }
    public readonly double4 abbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 2)));
    }
    public readonly double4 wzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 3)));
    }
    public readonly double4 abba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 3)));
    }
    public readonly double4 wzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 0)));
    }
    public readonly double4 abar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 0)));
    }
    public readonly double4 wzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 1)));
    }
    public readonly double4 abag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 1)));
    }
    public readonly double4 wzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 2)));
    }
    public readonly double4 abab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 2)));
    }
    public readonly double4 wzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 3)));
    }
    public readonly double4 abaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 3)));
    }
    public readonly double4 wwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 0)));
    }
    public readonly double4 aarr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 0)));
    }
    public readonly double4 wwxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 1)));
    }
    public readonly double4 aarg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 1)));
    }
    public readonly double4 wwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 2)));
    }
    public readonly double4 aarb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 2)));
    }
    public readonly double4 wwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 3)));
    }
    public readonly double4 aara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 3)));
    }
    public readonly double4 wwyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 0)));
    }
    public readonly double4 aagr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 0)));
    }
    public readonly double4 wwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 1)));
    }
    public readonly double4 aagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 1)));
    }
    public readonly double4 wwyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 2)));
    }
    public readonly double4 aagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 2)));
    }
    public readonly double4 wwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 3)));
    }
    public readonly double4 aaga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 3)));
    }
    public readonly double4 wwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 0)));
    }
    public readonly double4 aabr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 0)));
    }
    public readonly double4 wwzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 1)));
    }
    public readonly double4 aabg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 1)));
    }
    public readonly double4 wwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 2)));
    }
    public readonly double4 aabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 2)));
    }
    public readonly double4 wwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 3)));
    }
    public readonly double4 aaba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 3)));
    }
    public readonly double4 wwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 0)));
    }
    public readonly double4 aaar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 0)));
    }
    public readonly double4 wwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 1)));
    }
    public readonly double4 aaag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 1)));
    }
    public readonly double4 wwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 2)));
    }
    public readonly double4 aaab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 2)));
    }
    public readonly double4 wwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 3)));
    }
    public readonly double4 aaaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 3)));
    }
}

#endregion // double4

#region short4

public partial struct short4 
{
    public readonly short4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly short4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly short4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly short4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly short4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly short4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly short4 xxxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public readonly short4 rrra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public readonly short4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly short4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly short4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly short4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly short4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly short4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly short4 xxyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public readonly short4 rrga
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public readonly short4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly short4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly short4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly short4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly short4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly short4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly short4 xxzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public readonly short4 rrba
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public readonly short4 xxwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public readonly short4 rrar
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public readonly short4 xxwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public readonly short4 rrag
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public readonly short4 xxwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public readonly short4 rrab
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public readonly short4 xxww
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public readonly short4 rraa
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public readonly short4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly short4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly short4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly short4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly short4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly short4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly short4 xyxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public readonly short4 rgra
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public readonly short4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly short4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly short4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly short4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly short4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly short4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly short4 xyyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public readonly short4 rgga
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public readonly short4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly short4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly short4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly short4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly short4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly short4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public short4 xyzw
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public short4 rgba
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly short4 xywx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public readonly short4 rgar
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public readonly short4 xywy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public readonly short4 rgag
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public short4 xywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public short4 rgab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public readonly short4 xyww
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public readonly short4 rgaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public readonly short4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly short4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly short4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly short4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly short4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly short4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly short4 xzxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public readonly short4 rbra
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public readonly short4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly short4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly short4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly short4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly short4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly short4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public short4 xzyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public short4 rbga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public readonly short4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly short4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly short4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly short4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly short4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly short4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly short4 xzzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public readonly short4 rbba
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public readonly short4 xzwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public readonly short4 rbar
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public short4 xzwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public short4 rbag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public readonly short4 xzwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public readonly short4 rbab
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public readonly short4 xzww
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public readonly short4 rbaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public readonly short4 xwxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public readonly short4 rarr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public readonly short4 xwxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public readonly short4 rarg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public readonly short4 xwxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public readonly short4 rarb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public readonly short4 xwxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public readonly short4 rara
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public readonly short4 xwyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public readonly short4 ragr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public readonly short4 xwyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public readonly short4 ragg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public short4 xwyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public short4 ragb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public readonly short4 xwyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public readonly short4 raga
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public readonly short4 xwzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public readonly short4 rabr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public short4 xwzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public short4 rabg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public readonly short4 xwzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public readonly short4 rabb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public readonly short4 xwzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public readonly short4 raba
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public readonly short4 xwwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public readonly short4 raar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public readonly short4 xwwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public readonly short4 raag
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public readonly short4 xwwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public readonly short4 raab
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public readonly short4 xwww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public readonly short4 raaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public readonly short4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly short4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly short4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly short4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly short4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly short4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly short4 yxxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public readonly short4 grra
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public readonly short4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly short4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly short4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly short4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly short4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly short4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly short4 yxyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public readonly short4 grga
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public readonly short4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly short4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly short4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly short4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly short4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly short4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public short4 yxzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public short4 grba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public readonly short4 yxwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public readonly short4 grar
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public readonly short4 yxwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public readonly short4 grag
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public short4 yxwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public short4 grab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public readonly short4 yxww
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public readonly short4 graa
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public readonly short4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly short4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly short4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly short4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly short4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly short4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly short4 yyxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public readonly short4 ggra
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public readonly short4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly short4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly short4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly short4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly short4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly short4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly short4 yyyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public readonly short4 ggga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public readonly short4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly short4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly short4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly short4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly short4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly short4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly short4 yyzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public readonly short4 ggba
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public readonly short4 yywx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public readonly short4 ggar
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public readonly short4 yywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public readonly short4 ggag
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public readonly short4 yywz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public readonly short4 ggab
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public readonly short4 yyww
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public readonly short4 ggaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public readonly short4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly short4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly short4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly short4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly short4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly short4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public short4 yzxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public short4 gbra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public readonly short4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly short4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly short4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly short4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly short4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly short4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly short4 yzyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public readonly short4 gbga
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public readonly short4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly short4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly short4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly short4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly short4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly short4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly short4 yzzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public readonly short4 gbba
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public short4 yzwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public short4 gbar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public readonly short4 yzwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public readonly short4 gbag
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public readonly short4 yzwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public readonly short4 gbab
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public readonly short4 yzww
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public readonly short4 gbaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public readonly short4 ywxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public readonly short4 garr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public readonly short4 ywxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public readonly short4 garg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public short4 ywxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public short4 garb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public readonly short4 ywxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public readonly short4 gara
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public readonly short4 ywyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public readonly short4 gagr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public readonly short4 ywyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public readonly short4 gagg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public readonly short4 ywyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public readonly short4 gagb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public readonly short4 ywyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public readonly short4 gaga
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public short4 ywzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public short4 gabr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public readonly short4 ywzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public readonly short4 gabg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public readonly short4 ywzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public readonly short4 gabb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public readonly short4 ywzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public readonly short4 gaba
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public readonly short4 ywwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public readonly short4 gaar
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public readonly short4 ywwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public readonly short4 gaag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public readonly short4 ywwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public readonly short4 gaab
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public readonly short4 ywww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public readonly short4 gaaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public readonly short4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly short4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly short4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly short4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly short4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly short4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly short4 zxxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public readonly short4 brra
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public readonly short4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly short4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly short4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly short4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly short4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly short4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public short4 zxyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public short4 brga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public readonly short4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly short4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly short4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly short4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly short4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly short4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly short4 zxzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public readonly short4 brba
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public readonly short4 zxwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public readonly short4 brar
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public short4 zxwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public short4 brag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public readonly short4 zxwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public readonly short4 brab
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public readonly short4 zxww
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public readonly short4 braa
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public readonly short4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly short4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly short4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly short4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly short4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly short4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public short4 zyxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public short4 bgra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public readonly short4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly short4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly short4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly short4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly short4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly short4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly short4 zyyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public readonly short4 bgga
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public readonly short4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly short4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly short4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly short4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly short4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly short4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly short4 zyzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public readonly short4 bgba
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public short4 zywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public short4 bgar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public readonly short4 zywy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public readonly short4 bgag
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public readonly short4 zywz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public readonly short4 bgab
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public readonly short4 zyww
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public readonly short4 bgaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public readonly short4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly short4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly short4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly short4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly short4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly short4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly short4 zzxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public readonly short4 bbra
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public readonly short4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly short4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly short4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly short4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly short4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly short4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly short4 zzyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public readonly short4 bbga
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public readonly short4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly short4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly short4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly short4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly short4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly short4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly short4 zzzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public readonly short4 bbba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public readonly short4 zzwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public readonly short4 bbar
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public readonly short4 zzwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public readonly short4 bbag
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public readonly short4 zzwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public readonly short4 bbab
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public readonly short4 zzww
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public readonly short4 bbaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public readonly short4 zwxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public readonly short4 barr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public short4 zwxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public short4 barg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public readonly short4 zwxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public readonly short4 barb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public readonly short4 zwxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public readonly short4 bara
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public short4 zwyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public short4 bagr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public readonly short4 zwyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public readonly short4 bagg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public readonly short4 zwyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public readonly short4 bagb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public readonly short4 zwyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public readonly short4 baga
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public readonly short4 zwzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public readonly short4 babr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public readonly short4 zwzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public readonly short4 babg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public readonly short4 zwzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public readonly short4 babb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public readonly short4 zwzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public readonly short4 baba
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public readonly short4 zwwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public readonly short4 baar
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public readonly short4 zwwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public readonly short4 baag
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public readonly short4 zwwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public readonly short4 baab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public readonly short4 zwww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public readonly short4 baaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public readonly short4 wxxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public readonly short4 arrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public readonly short4 wxxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public readonly short4 arrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public readonly short4 wxxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public readonly short4 arrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public readonly short4 wxxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public readonly short4 arra
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public readonly short4 wxyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public readonly short4 argr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public readonly short4 wxyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public readonly short4 argg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public short4 wxyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public short4 argb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public readonly short4 wxyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public readonly short4 arga
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public readonly short4 wxzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public readonly short4 arbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public short4 wxzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public short4 arbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public readonly short4 wxzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public readonly short4 arbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public readonly short4 wxzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public readonly short4 arba
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public readonly short4 wxwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public readonly short4 arar
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public readonly short4 wxwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public readonly short4 arag
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public readonly short4 wxwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public readonly short4 arab
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public readonly short4 wxww
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public readonly short4 araa
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public readonly short4 wyxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public readonly short4 agrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public readonly short4 wyxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public readonly short4 agrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public short4 wyxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public short4 agrb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public readonly short4 wyxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public readonly short4 agra
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public readonly short4 wyyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public readonly short4 aggr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public readonly short4 wyyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public readonly short4 aggg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public readonly short4 wyyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public readonly short4 aggb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public readonly short4 wyyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public readonly short4 agga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public short4 wyzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public short4 agbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public readonly short4 wyzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public readonly short4 agbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public readonly short4 wyzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public readonly short4 agbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public readonly short4 wyzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public readonly short4 agba
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public readonly short4 wywx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public readonly short4 agar
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public readonly short4 wywy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public readonly short4 agag
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public readonly short4 wywz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public readonly short4 agab
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public readonly short4 wyww
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public readonly short4 agaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public readonly short4 wzxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public readonly short4 abrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public short4 wzxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public short4 abrg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public readonly short4 wzxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public readonly short4 abrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public readonly short4 wzxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public readonly short4 abra
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public short4 wzyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public short4 abgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public readonly short4 wzyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public readonly short4 abgg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public readonly short4 wzyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public readonly short4 abgb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public readonly short4 wzyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public readonly short4 abga
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public readonly short4 wzzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public readonly short4 abbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public readonly short4 wzzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public readonly short4 abbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public readonly short4 wzzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public readonly short4 abbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public readonly short4 wzzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public readonly short4 abba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public readonly short4 wzwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public readonly short4 abar
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public readonly short4 wzwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public readonly short4 abag
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public readonly short4 wzwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public readonly short4 abab
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public readonly short4 wzww
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public readonly short4 abaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public readonly short4 wwxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public readonly short4 aarr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public readonly short4 wwxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public readonly short4 aarg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public readonly short4 wwxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public readonly short4 aarb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public readonly short4 wwxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public readonly short4 aara
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public readonly short4 wwyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public readonly short4 aagr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public readonly short4 wwyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public readonly short4 aagg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public readonly short4 wwyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public readonly short4 aagb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public readonly short4 wwyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public readonly short4 aaga
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public readonly short4 wwzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public readonly short4 aabr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public readonly short4 wwzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public readonly short4 aabg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public readonly short4 wwzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public readonly short4 aabb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public readonly short4 wwzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public readonly short4 aaba
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public readonly short4 wwwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public readonly short4 aaar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public readonly short4 wwwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public readonly short4 aaag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public readonly short4 wwwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public readonly short4 aaab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public readonly short4 wwww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
    public readonly short4 aaaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
}

#endregion // short4

#region ushort4

public partial struct ushort4 
{
    public readonly ushort4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly ushort4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly ushort4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly ushort4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly ushort4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly ushort4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly ushort4 xxxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public readonly ushort4 rrra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public readonly ushort4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly ushort4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly ushort4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly ushort4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly ushort4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly ushort4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly ushort4 xxyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public readonly ushort4 rrga
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public readonly ushort4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly ushort4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly ushort4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly ushort4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly ushort4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly ushort4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly ushort4 xxzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public readonly ushort4 rrba
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public readonly ushort4 xxwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public readonly ushort4 rrar
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public readonly ushort4 xxwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public readonly ushort4 rrag
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public readonly ushort4 xxwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public readonly ushort4 rrab
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public readonly ushort4 xxww
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public readonly ushort4 rraa
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public readonly ushort4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly ushort4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly ushort4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly ushort4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly ushort4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly ushort4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly ushort4 xyxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public readonly ushort4 rgra
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public readonly ushort4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly ushort4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly ushort4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly ushort4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly ushort4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly ushort4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly ushort4 xyyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public readonly ushort4 rgga
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public readonly ushort4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly ushort4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly ushort4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly ushort4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly ushort4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly ushort4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public ushort4 xyzw
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public ushort4 rgba
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly ushort4 xywx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public readonly ushort4 rgar
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public readonly ushort4 xywy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public readonly ushort4 rgag
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public ushort4 xywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public ushort4 rgab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public readonly ushort4 xyww
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public readonly ushort4 rgaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public readonly ushort4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly ushort4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly ushort4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly ushort4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly ushort4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly ushort4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly ushort4 xzxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public readonly ushort4 rbra
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public readonly ushort4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly ushort4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly ushort4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly ushort4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly ushort4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly ushort4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public ushort4 xzyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public ushort4 rbga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public readonly ushort4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly ushort4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly ushort4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly ushort4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly ushort4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly ushort4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly ushort4 xzzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public readonly ushort4 rbba
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public readonly ushort4 xzwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public readonly ushort4 rbar
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public ushort4 xzwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public ushort4 rbag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public readonly ushort4 xzwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public readonly ushort4 rbab
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public readonly ushort4 xzww
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public readonly ushort4 rbaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public readonly ushort4 xwxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public readonly ushort4 rarr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public readonly ushort4 xwxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public readonly ushort4 rarg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public readonly ushort4 xwxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public readonly ushort4 rarb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public readonly ushort4 xwxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public readonly ushort4 rara
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public readonly ushort4 xwyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public readonly ushort4 ragr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public readonly ushort4 xwyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public readonly ushort4 ragg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public ushort4 xwyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public ushort4 ragb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public readonly ushort4 xwyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public readonly ushort4 raga
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public readonly ushort4 xwzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public readonly ushort4 rabr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public ushort4 xwzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public ushort4 rabg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public readonly ushort4 xwzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public readonly ushort4 rabb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public readonly ushort4 xwzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public readonly ushort4 raba
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public readonly ushort4 xwwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public readonly ushort4 raar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public readonly ushort4 xwwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public readonly ushort4 raag
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public readonly ushort4 xwwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public readonly ushort4 raab
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public readonly ushort4 xwww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public readonly ushort4 raaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public readonly ushort4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly ushort4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly ushort4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly ushort4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly ushort4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly ushort4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly ushort4 yxxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public readonly ushort4 grra
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public readonly ushort4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly ushort4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly ushort4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly ushort4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly ushort4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly ushort4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly ushort4 yxyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public readonly ushort4 grga
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public readonly ushort4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly ushort4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly ushort4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly ushort4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly ushort4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly ushort4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public ushort4 yxzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public ushort4 grba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public readonly ushort4 yxwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public readonly ushort4 grar
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public readonly ushort4 yxwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public readonly ushort4 grag
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public ushort4 yxwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public ushort4 grab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public readonly ushort4 yxww
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public readonly ushort4 graa
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public readonly ushort4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly ushort4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly ushort4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly ushort4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly ushort4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly ushort4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly ushort4 yyxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public readonly ushort4 ggra
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public readonly ushort4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly ushort4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly ushort4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly ushort4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly ushort4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly ushort4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly ushort4 yyyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public readonly ushort4 ggga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public readonly ushort4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly ushort4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly ushort4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly ushort4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly ushort4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly ushort4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly ushort4 yyzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public readonly ushort4 ggba
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public readonly ushort4 yywx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public readonly ushort4 ggar
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public readonly ushort4 yywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public readonly ushort4 ggag
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public readonly ushort4 yywz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public readonly ushort4 ggab
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public readonly ushort4 yyww
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public readonly ushort4 ggaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public readonly ushort4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly ushort4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly ushort4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly ushort4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly ushort4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly ushort4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public ushort4 yzxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public ushort4 gbra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public readonly ushort4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly ushort4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly ushort4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly ushort4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly ushort4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly ushort4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly ushort4 yzyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public readonly ushort4 gbga
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public readonly ushort4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly ushort4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly ushort4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly ushort4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly ushort4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly ushort4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly ushort4 yzzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public readonly ushort4 gbba
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public ushort4 yzwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public ushort4 gbar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public readonly ushort4 yzwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public readonly ushort4 gbag
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public readonly ushort4 yzwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public readonly ushort4 gbab
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public readonly ushort4 yzww
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public readonly ushort4 gbaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public readonly ushort4 ywxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public readonly ushort4 garr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public readonly ushort4 ywxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public readonly ushort4 garg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public ushort4 ywxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public ushort4 garb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public readonly ushort4 ywxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public readonly ushort4 gara
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public readonly ushort4 ywyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public readonly ushort4 gagr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public readonly ushort4 ywyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public readonly ushort4 gagg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public readonly ushort4 ywyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public readonly ushort4 gagb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public readonly ushort4 ywyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public readonly ushort4 gaga
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public ushort4 ywzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public ushort4 gabr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public readonly ushort4 ywzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public readonly ushort4 gabg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public readonly ushort4 ywzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public readonly ushort4 gabb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public readonly ushort4 ywzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public readonly ushort4 gaba
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public readonly ushort4 ywwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public readonly ushort4 gaar
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public readonly ushort4 ywwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public readonly ushort4 gaag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public readonly ushort4 ywwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public readonly ushort4 gaab
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public readonly ushort4 ywww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public readonly ushort4 gaaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public readonly ushort4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly ushort4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly ushort4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly ushort4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly ushort4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly ushort4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly ushort4 zxxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public readonly ushort4 brra
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public readonly ushort4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly ushort4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly ushort4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly ushort4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly ushort4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly ushort4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public ushort4 zxyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public ushort4 brga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public readonly ushort4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly ushort4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly ushort4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly ushort4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly ushort4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly ushort4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly ushort4 zxzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public readonly ushort4 brba
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public readonly ushort4 zxwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public readonly ushort4 brar
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public ushort4 zxwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public ushort4 brag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public readonly ushort4 zxwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public readonly ushort4 brab
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public readonly ushort4 zxww
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public readonly ushort4 braa
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public readonly ushort4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly ushort4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly ushort4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly ushort4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly ushort4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly ushort4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public ushort4 zyxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public ushort4 bgra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public readonly ushort4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly ushort4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly ushort4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly ushort4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly ushort4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly ushort4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly ushort4 zyyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public readonly ushort4 bgga
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public readonly ushort4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly ushort4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly ushort4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly ushort4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly ushort4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly ushort4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly ushort4 zyzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public readonly ushort4 bgba
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public ushort4 zywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public ushort4 bgar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public readonly ushort4 zywy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public readonly ushort4 bgag
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public readonly ushort4 zywz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public readonly ushort4 bgab
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public readonly ushort4 zyww
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public readonly ushort4 bgaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public readonly ushort4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly ushort4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly ushort4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly ushort4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly ushort4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly ushort4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly ushort4 zzxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public readonly ushort4 bbra
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public readonly ushort4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly ushort4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly ushort4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly ushort4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly ushort4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly ushort4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly ushort4 zzyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public readonly ushort4 bbga
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public readonly ushort4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly ushort4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly ushort4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly ushort4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly ushort4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly ushort4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly ushort4 zzzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public readonly ushort4 bbba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public readonly ushort4 zzwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public readonly ushort4 bbar
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public readonly ushort4 zzwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public readonly ushort4 bbag
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public readonly ushort4 zzwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public readonly ushort4 bbab
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public readonly ushort4 zzww
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public readonly ushort4 bbaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public readonly ushort4 zwxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public readonly ushort4 barr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public ushort4 zwxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public ushort4 barg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public readonly ushort4 zwxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public readonly ushort4 barb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public readonly ushort4 zwxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public readonly ushort4 bara
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public ushort4 zwyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public ushort4 bagr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public readonly ushort4 zwyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public readonly ushort4 bagg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public readonly ushort4 zwyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public readonly ushort4 bagb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public readonly ushort4 zwyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public readonly ushort4 baga
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public readonly ushort4 zwzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public readonly ushort4 babr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public readonly ushort4 zwzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public readonly ushort4 babg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public readonly ushort4 zwzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public readonly ushort4 babb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public readonly ushort4 zwzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public readonly ushort4 baba
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public readonly ushort4 zwwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public readonly ushort4 baar
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public readonly ushort4 zwwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public readonly ushort4 baag
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public readonly ushort4 zwwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public readonly ushort4 baab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public readonly ushort4 zwww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public readonly ushort4 baaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public readonly ushort4 wxxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public readonly ushort4 arrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public readonly ushort4 wxxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public readonly ushort4 arrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public readonly ushort4 wxxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public readonly ushort4 arrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public readonly ushort4 wxxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public readonly ushort4 arra
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public readonly ushort4 wxyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public readonly ushort4 argr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public readonly ushort4 wxyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public readonly ushort4 argg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public ushort4 wxyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public ushort4 argb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public readonly ushort4 wxyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public readonly ushort4 arga
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public readonly ushort4 wxzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public readonly ushort4 arbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public ushort4 wxzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public ushort4 arbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public readonly ushort4 wxzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public readonly ushort4 arbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public readonly ushort4 wxzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public readonly ushort4 arba
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public readonly ushort4 wxwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public readonly ushort4 arar
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public readonly ushort4 wxwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public readonly ushort4 arag
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public readonly ushort4 wxwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public readonly ushort4 arab
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public readonly ushort4 wxww
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public readonly ushort4 araa
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public readonly ushort4 wyxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public readonly ushort4 agrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public readonly ushort4 wyxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public readonly ushort4 agrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public ushort4 wyxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public ushort4 agrb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public readonly ushort4 wyxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public readonly ushort4 agra
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public readonly ushort4 wyyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public readonly ushort4 aggr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public readonly ushort4 wyyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public readonly ushort4 aggg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public readonly ushort4 wyyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public readonly ushort4 aggb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public readonly ushort4 wyyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public readonly ushort4 agga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public ushort4 wyzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public ushort4 agbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public readonly ushort4 wyzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public readonly ushort4 agbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public readonly ushort4 wyzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public readonly ushort4 agbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public readonly ushort4 wyzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public readonly ushort4 agba
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public readonly ushort4 wywx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public readonly ushort4 agar
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public readonly ushort4 wywy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public readonly ushort4 agag
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public readonly ushort4 wywz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public readonly ushort4 agab
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public readonly ushort4 wyww
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public readonly ushort4 agaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public readonly ushort4 wzxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public readonly ushort4 abrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public ushort4 wzxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public ushort4 abrg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public readonly ushort4 wzxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public readonly ushort4 abrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public readonly ushort4 wzxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public readonly ushort4 abra
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public ushort4 wzyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public ushort4 abgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public readonly ushort4 wzyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public readonly ushort4 abgg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public readonly ushort4 wzyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public readonly ushort4 abgb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public readonly ushort4 wzyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public readonly ushort4 abga
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public readonly ushort4 wzzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public readonly ushort4 abbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public readonly ushort4 wzzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public readonly ushort4 abbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public readonly ushort4 wzzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public readonly ushort4 abbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public readonly ushort4 wzzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public readonly ushort4 abba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public readonly ushort4 wzwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public readonly ushort4 abar
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public readonly ushort4 wzwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public readonly ushort4 abag
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public readonly ushort4 wzwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public readonly ushort4 abab
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public readonly ushort4 wzww
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public readonly ushort4 abaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public readonly ushort4 wwxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public readonly ushort4 aarr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public readonly ushort4 wwxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public readonly ushort4 aarg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public readonly ushort4 wwxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public readonly ushort4 aarb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public readonly ushort4 wwxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public readonly ushort4 aara
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public readonly ushort4 wwyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public readonly ushort4 aagr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public readonly ushort4 wwyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public readonly ushort4 aagg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public readonly ushort4 wwyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public readonly ushort4 aagb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public readonly ushort4 wwyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public readonly ushort4 aaga
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public readonly ushort4 wwzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public readonly ushort4 aabr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public readonly ushort4 wwzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public readonly ushort4 aabg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public readonly ushort4 wwzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public readonly ushort4 aabb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public readonly ushort4 wwzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public readonly ushort4 aaba
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public readonly ushort4 wwwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public readonly ushort4 aaar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public readonly ushort4 wwwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public readonly ushort4 aaag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public readonly ushort4 wwwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public readonly ushort4 aaab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public readonly ushort4 wwww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
    public readonly ushort4 aaaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
}

#endregion // ushort4

#region int4

public partial struct int4 
{
    public readonly int4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
    }
    public readonly int4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
    }
    public readonly int4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
    }
    public readonly int4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
    }
    public readonly int4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
    }
    public readonly int4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
    }
    public readonly int4 xxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 3)));
    }
    public readonly int4 rrra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 3)));
    }
    public readonly int4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
    }
    public readonly int4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
    }
    public readonly int4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
    }
    public readonly int4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
    }
    public readonly int4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
    }
    public readonly int4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
    }
    public readonly int4 xxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 3)));
    }
    public readonly int4 rrga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 3)));
    }
    public readonly int4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
    }
    public readonly int4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
    }
    public readonly int4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
    }
    public readonly int4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
    }
    public readonly int4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
    }
    public readonly int4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
    }
    public readonly int4 xxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 3)));
    }
    public readonly int4 rrba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 3)));
    }
    public readonly int4 xxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 0)));
    }
    public readonly int4 rrar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 0)));
    }
    public readonly int4 xxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 1)));
    }
    public readonly int4 rrag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 1)));
    }
    public readonly int4 xxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 2)));
    }
    public readonly int4 rrab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 2)));
    }
    public readonly int4 xxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 3)));
    }
    public readonly int4 rraa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 3)));
    }
    public readonly int4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
    }
    public readonly int4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
    }
    public readonly int4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
    }
    public readonly int4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
    }
    public readonly int4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
    }
    public readonly int4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
    }
    public readonly int4 xyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 3)));
    }
    public readonly int4 rgra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 3)));
    }
    public readonly int4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
    }
    public readonly int4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
    }
    public readonly int4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
    }
    public readonly int4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
    }
    public readonly int4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
    }
    public readonly int4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
    }
    public readonly int4 xyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 3)));
    }
    public readonly int4 rgga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 3)));
    }
    public readonly int4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
    }
    public readonly int4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
    }
    public readonly int4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
    }
    public readonly int4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
    }
    public readonly int4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
    }
    public readonly int4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
    }
    public int4 xyzw
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public int4 rgba
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly int4 xywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 0)));
    }
    public readonly int4 rgar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 0)));
    }
    public readonly int4 xywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 1)));
    }
    public readonly int4 rgag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 1)));
    }
    public int4 xywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public int4 rgab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public readonly int4 xyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 3)));
    }
    public readonly int4 rgaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 3)));
    }
    public readonly int4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
    }
    public readonly int4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
    }
    public readonly int4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
    }
    public readonly int4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
    }
    public readonly int4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
    }
    public readonly int4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
    }
    public readonly int4 xzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 3)));
    }
    public readonly int4 rbra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 3)));
    }
    public readonly int4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
    }
    public readonly int4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
    }
    public readonly int4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
    }
    public readonly int4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
    }
    public readonly int4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
    }
    public readonly int4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
    }
    public int4 xzyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public int4 rbga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public readonly int4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
    }
    public readonly int4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
    }
    public readonly int4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
    }
    public readonly int4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
    }
    public readonly int4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
    }
    public readonly int4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
    }
    public readonly int4 xzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 3)));
    }
    public readonly int4 rbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 3)));
    }
    public readonly int4 xzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 0)));
    }
    public readonly int4 rbar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 0)));
    }
    public int4 xzwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public int4 rbag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public readonly int4 xzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 2)));
    }
    public readonly int4 rbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 2)));
    }
    public readonly int4 xzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 3)));
    }
    public readonly int4 rbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 3)));
    }
    public readonly int4 xwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 0)));
    }
    public readonly int4 rarr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 0)));
    }
    public readonly int4 xwxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 1)));
    }
    public readonly int4 rarg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 1)));
    }
    public readonly int4 xwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 2)));
    }
    public readonly int4 rarb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 2)));
    }
    public readonly int4 xwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 3)));
    }
    public readonly int4 rara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 3)));
    }
    public readonly int4 xwyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 0)));
    }
    public readonly int4 ragr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 0)));
    }
    public readonly int4 xwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 1)));
    }
    public readonly int4 ragg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 1)));
    }
    public int4 xwyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public int4 ragb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public readonly int4 xwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 3)));
    }
    public readonly int4 raga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 3)));
    }
    public readonly int4 xwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 0)));
    }
    public readonly int4 rabr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 0)));
    }
    public int4 xwzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public int4 rabg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public readonly int4 xwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 2)));
    }
    public readonly int4 rabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 2)));
    }
    public readonly int4 xwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 3)));
    }
    public readonly int4 raba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 3)));
    }
    public readonly int4 xwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 0)));
    }
    public readonly int4 raar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 0)));
    }
    public readonly int4 xwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 1)));
    }
    public readonly int4 raag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 1)));
    }
    public readonly int4 xwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 2)));
    }
    public readonly int4 raab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 2)));
    }
    public readonly int4 xwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 3)));
    }
    public readonly int4 raaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 3)));
    }
    public readonly int4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
    }
    public readonly int4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
    }
    public readonly int4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
    }
    public readonly int4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
    }
    public readonly int4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
    }
    public readonly int4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
    }
    public readonly int4 yxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 3)));
    }
    public readonly int4 grra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 3)));
    }
    public readonly int4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
    }
    public readonly int4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
    }
    public readonly int4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
    }
    public readonly int4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
    }
    public readonly int4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
    }
    public readonly int4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
    }
    public readonly int4 yxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 3)));
    }
    public readonly int4 grga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 3)));
    }
    public readonly int4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
    }
    public readonly int4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
    }
    public readonly int4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
    }
    public readonly int4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
    }
    public readonly int4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
    }
    public readonly int4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
    }
    public int4 yxzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public int4 grba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public readonly int4 yxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 0)));
    }
    public readonly int4 grar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 0)));
    }
    public readonly int4 yxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 1)));
    }
    public readonly int4 grag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 1)));
    }
    public int4 yxwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public int4 grab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public readonly int4 yxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 3)));
    }
    public readonly int4 graa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 3)));
    }
    public readonly int4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
    }
    public readonly int4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
    }
    public readonly int4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
    }
    public readonly int4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
    }
    public readonly int4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
    }
    public readonly int4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
    }
    public readonly int4 yyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 3)));
    }
    public readonly int4 ggra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 3)));
    }
    public readonly int4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
    }
    public readonly int4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
    }
    public readonly int4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
    }
    public readonly int4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
    }
    public readonly int4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
    }
    public readonly int4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
    }
    public readonly int4 yyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 3)));
    }
    public readonly int4 ggga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 3)));
    }
    public readonly int4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
    }
    public readonly int4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
    }
    public readonly int4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
    }
    public readonly int4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
    }
    public readonly int4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
    }
    public readonly int4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
    }
    public readonly int4 yyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 3)));
    }
    public readonly int4 ggba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 3)));
    }
    public readonly int4 yywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 0)));
    }
    public readonly int4 ggar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 0)));
    }
    public readonly int4 yywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 1)));
    }
    public readonly int4 ggag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 1)));
    }
    public readonly int4 yywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 2)));
    }
    public readonly int4 ggab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 2)));
    }
    public readonly int4 yyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 3)));
    }
    public readonly int4 ggaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 3)));
    }
    public readonly int4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
    }
    public readonly int4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
    }
    public readonly int4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
    }
    public readonly int4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
    }
    public readonly int4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
    }
    public readonly int4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
    }
    public int4 yzxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public int4 gbra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public readonly int4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
    }
    public readonly int4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
    }
    public readonly int4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
    }
    public readonly int4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
    }
    public readonly int4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
    }
    public readonly int4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
    }
    public readonly int4 yzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 3)));
    }
    public readonly int4 gbga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 3)));
    }
    public readonly int4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
    }
    public readonly int4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
    }
    public readonly int4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
    }
    public readonly int4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
    }
    public readonly int4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
    }
    public readonly int4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
    }
    public readonly int4 yzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 3)));
    }
    public readonly int4 gbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 3)));
    }
    public int4 yzwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public int4 gbar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public readonly int4 yzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 1)));
    }
    public readonly int4 gbag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 1)));
    }
    public readonly int4 yzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 2)));
    }
    public readonly int4 gbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 2)));
    }
    public readonly int4 yzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 3)));
    }
    public readonly int4 gbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 3)));
    }
    public readonly int4 ywxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 0)));
    }
    public readonly int4 garr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 0)));
    }
    public readonly int4 ywxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 1)));
    }
    public readonly int4 garg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 1)));
    }
    public int4 ywxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public int4 garb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public readonly int4 ywxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 3)));
    }
    public readonly int4 gara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 3)));
    }
    public readonly int4 ywyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 0)));
    }
    public readonly int4 gagr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 0)));
    }
    public readonly int4 ywyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 1)));
    }
    public readonly int4 gagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 1)));
    }
    public readonly int4 ywyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 2)));
    }
    public readonly int4 gagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 2)));
    }
    public readonly int4 ywyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 3)));
    }
    public readonly int4 gaga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 3)));
    }
    public int4 ywzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public int4 gabr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public readonly int4 ywzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 1)));
    }
    public readonly int4 gabg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 1)));
    }
    public readonly int4 ywzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 2)));
    }
    public readonly int4 gabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 2)));
    }
    public readonly int4 ywzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 3)));
    }
    public readonly int4 gaba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 3)));
    }
    public readonly int4 ywwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 0)));
    }
    public readonly int4 gaar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 0)));
    }
    public readonly int4 ywwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 1)));
    }
    public readonly int4 gaag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 1)));
    }
    public readonly int4 ywwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 2)));
    }
    public readonly int4 gaab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 2)));
    }
    public readonly int4 ywww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 3)));
    }
    public readonly int4 gaaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 3)));
    }
    public readonly int4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
    }
    public readonly int4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
    }
    public readonly int4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
    }
    public readonly int4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
    }
    public readonly int4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
    }
    public readonly int4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
    }
    public readonly int4 zxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 3)));
    }
    public readonly int4 brra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 3)));
    }
    public readonly int4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
    }
    public readonly int4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
    }
    public readonly int4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
    }
    public readonly int4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
    }
    public readonly int4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
    }
    public readonly int4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
    }
    public int4 zxyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public int4 brga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public readonly int4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
    }
    public readonly int4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
    }
    public readonly int4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
    }
    public readonly int4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
    }
    public readonly int4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
    }
    public readonly int4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
    }
    public readonly int4 zxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 3)));
    }
    public readonly int4 brba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 3)));
    }
    public readonly int4 zxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 0)));
    }
    public readonly int4 brar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 0)));
    }
    public int4 zxwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public int4 brag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public readonly int4 zxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 2)));
    }
    public readonly int4 brab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 2)));
    }
    public readonly int4 zxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 3)));
    }
    public readonly int4 braa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 3)));
    }
    public readonly int4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
    }
    public readonly int4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
    }
    public readonly int4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
    }
    public readonly int4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
    }
    public readonly int4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
    }
    public readonly int4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
    }
    public int4 zyxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public int4 bgra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public readonly int4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
    }
    public readonly int4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
    }
    public readonly int4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
    }
    public readonly int4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
    }
    public readonly int4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
    }
    public readonly int4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
    }
    public readonly int4 zyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 3)));
    }
    public readonly int4 bgga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 3)));
    }
    public readonly int4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
    }
    public readonly int4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
    }
    public readonly int4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
    }
    public readonly int4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
    }
    public readonly int4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
    }
    public readonly int4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
    }
    public readonly int4 zyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 3)));
    }
    public readonly int4 bgba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 3)));
    }
    public int4 zywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public int4 bgar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public readonly int4 zywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 1)));
    }
    public readonly int4 bgag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 1)));
    }
    public readonly int4 zywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 2)));
    }
    public readonly int4 bgab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 2)));
    }
    public readonly int4 zyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 3)));
    }
    public readonly int4 bgaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 3)));
    }
    public readonly int4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
    }
    public readonly int4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
    }
    public readonly int4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
    }
    public readonly int4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
    }
    public readonly int4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
    }
    public readonly int4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
    }
    public readonly int4 zzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 3)));
    }
    public readonly int4 bbra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 3)));
    }
    public readonly int4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
    }
    public readonly int4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
    }
    public readonly int4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
    }
    public readonly int4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
    }
    public readonly int4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
    }
    public readonly int4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
    }
    public readonly int4 zzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 3)));
    }
    public readonly int4 bbga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 3)));
    }
    public readonly int4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
    }
    public readonly int4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
    }
    public readonly int4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
    }
    public readonly int4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
    }
    public readonly int4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
    }
    public readonly int4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
    }
    public readonly int4 zzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 3)));
    }
    public readonly int4 bbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 3)));
    }
    public readonly int4 zzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 0)));
    }
    public readonly int4 bbar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 0)));
    }
    public readonly int4 zzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 1)));
    }
    public readonly int4 bbag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 1)));
    }
    public readonly int4 zzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 2)));
    }
    public readonly int4 bbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 2)));
    }
    public readonly int4 zzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 3)));
    }
    public readonly int4 bbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 3)));
    }
    public readonly int4 zwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 0)));
    }
    public readonly int4 barr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 0)));
    }
    public int4 zwxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public int4 barg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public readonly int4 zwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 2)));
    }
    public readonly int4 barb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 2)));
    }
    public readonly int4 zwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 3)));
    }
    public readonly int4 bara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 3)));
    }
    public int4 zwyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public int4 bagr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public readonly int4 zwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 1)));
    }
    public readonly int4 bagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 1)));
    }
    public readonly int4 zwyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 2)));
    }
    public readonly int4 bagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 2)));
    }
    public readonly int4 zwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 3)));
    }
    public readonly int4 baga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 3)));
    }
    public readonly int4 zwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 0)));
    }
    public readonly int4 babr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 0)));
    }
    public readonly int4 zwzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 1)));
    }
    public readonly int4 babg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 1)));
    }
    public readonly int4 zwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 2)));
    }
    public readonly int4 babb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 2)));
    }
    public readonly int4 zwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 3)));
    }
    public readonly int4 baba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 3)));
    }
    public readonly int4 zwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 0)));
    }
    public readonly int4 baar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 0)));
    }
    public readonly int4 zwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 1)));
    }
    public readonly int4 baag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 1)));
    }
    public readonly int4 zwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 2)));
    }
    public readonly int4 baab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 2)));
    }
    public readonly int4 zwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 3)));
    }
    public readonly int4 baaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 3)));
    }
    public readonly int4 wxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 0)));
    }
    public readonly int4 arrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 0)));
    }
    public readonly int4 wxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 1)));
    }
    public readonly int4 arrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 1)));
    }
    public readonly int4 wxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 2)));
    }
    public readonly int4 arrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 2)));
    }
    public readonly int4 wxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 3)));
    }
    public readonly int4 arra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 3)));
    }
    public readonly int4 wxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 0)));
    }
    public readonly int4 argr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 0)));
    }
    public readonly int4 wxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 1)));
    }
    public readonly int4 argg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 1)));
    }
    public int4 wxyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public int4 argb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public readonly int4 wxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 3)));
    }
    public readonly int4 arga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 3)));
    }
    public readonly int4 wxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 0)));
    }
    public readonly int4 arbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 0)));
    }
    public int4 wxzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public int4 arbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public readonly int4 wxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 2)));
    }
    public readonly int4 arbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 2)));
    }
    public readonly int4 wxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 3)));
    }
    public readonly int4 arba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 3)));
    }
    public readonly int4 wxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 0)));
    }
    public readonly int4 arar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 0)));
    }
    public readonly int4 wxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 1)));
    }
    public readonly int4 arag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 1)));
    }
    public readonly int4 wxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 2)));
    }
    public readonly int4 arab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 2)));
    }
    public readonly int4 wxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 3)));
    }
    public readonly int4 araa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 3)));
    }
    public readonly int4 wyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 0)));
    }
    public readonly int4 agrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 0)));
    }
    public readonly int4 wyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 1)));
    }
    public readonly int4 agrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 1)));
    }
    public int4 wyxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public int4 agrb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public readonly int4 wyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 3)));
    }
    public readonly int4 agra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 3)));
    }
    public readonly int4 wyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 0)));
    }
    public readonly int4 aggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 0)));
    }
    public readonly int4 wyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 1)));
    }
    public readonly int4 aggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 1)));
    }
    public readonly int4 wyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 2)));
    }
    public readonly int4 aggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 2)));
    }
    public readonly int4 wyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 3)));
    }
    public readonly int4 agga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 3)));
    }
    public int4 wyzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public int4 agbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public readonly int4 wyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 1)));
    }
    public readonly int4 agbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 1)));
    }
    public readonly int4 wyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 2)));
    }
    public readonly int4 agbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 2)));
    }
    public readonly int4 wyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 3)));
    }
    public readonly int4 agba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 3)));
    }
    public readonly int4 wywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 0)));
    }
    public readonly int4 agar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 0)));
    }
    public readonly int4 wywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 1)));
    }
    public readonly int4 agag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 1)));
    }
    public readonly int4 wywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 2)));
    }
    public readonly int4 agab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 2)));
    }
    public readonly int4 wyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 3)));
    }
    public readonly int4 agaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 3)));
    }
    public readonly int4 wzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 0)));
    }
    public readonly int4 abrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 0)));
    }
    public int4 wzxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public int4 abrg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public readonly int4 wzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 2)));
    }
    public readonly int4 abrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 2)));
    }
    public readonly int4 wzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 3)));
    }
    public readonly int4 abra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 3)));
    }
    public int4 wzyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public int4 abgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public readonly int4 wzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 1)));
    }
    public readonly int4 abgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 1)));
    }
    public readonly int4 wzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 2)));
    }
    public readonly int4 abgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 2)));
    }
    public readonly int4 wzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 3)));
    }
    public readonly int4 abga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 3)));
    }
    public readonly int4 wzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 0)));
    }
    public readonly int4 abbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 0)));
    }
    public readonly int4 wzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 1)));
    }
    public readonly int4 abbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 1)));
    }
    public readonly int4 wzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 2)));
    }
    public readonly int4 abbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 2)));
    }
    public readonly int4 wzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 3)));
    }
    public readonly int4 abba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 3)));
    }
    public readonly int4 wzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 0)));
    }
    public readonly int4 abar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 0)));
    }
    public readonly int4 wzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 1)));
    }
    public readonly int4 abag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 1)));
    }
    public readonly int4 wzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 2)));
    }
    public readonly int4 abab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 2)));
    }
    public readonly int4 wzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 3)));
    }
    public readonly int4 abaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 3)));
    }
    public readonly int4 wwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 0)));
    }
    public readonly int4 aarr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 0)));
    }
    public readonly int4 wwxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 1)));
    }
    public readonly int4 aarg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 1)));
    }
    public readonly int4 wwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 2)));
    }
    public readonly int4 aarb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 2)));
    }
    public readonly int4 wwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 3)));
    }
    public readonly int4 aara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 3)));
    }
    public readonly int4 wwyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 0)));
    }
    public readonly int4 aagr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 0)));
    }
    public readonly int4 wwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 1)));
    }
    public readonly int4 aagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 1)));
    }
    public readonly int4 wwyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 2)));
    }
    public readonly int4 aagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 2)));
    }
    public readonly int4 wwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 3)));
    }
    public readonly int4 aaga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 3)));
    }
    public readonly int4 wwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 0)));
    }
    public readonly int4 aabr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 0)));
    }
    public readonly int4 wwzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 1)));
    }
    public readonly int4 aabg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 1)));
    }
    public readonly int4 wwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 2)));
    }
    public readonly int4 aabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 2)));
    }
    public readonly int4 wwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 3)));
    }
    public readonly int4 aaba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 3)));
    }
    public readonly int4 wwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 0)));
    }
    public readonly int4 aaar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 0)));
    }
    public readonly int4 wwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 1)));
    }
    public readonly int4 aaag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 1)));
    }
    public readonly int4 wwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 2)));
    }
    public readonly int4 aaab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 2)));
    }
    public readonly int4 wwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 3)));
    }
    public readonly int4 aaaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 3)));
    }
}

#endregion // int4

#region uint4

public partial struct uint4 
{
    public readonly uint4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 0)));
    }
    public readonly uint4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 0)));
    }
    public readonly uint4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 1)));
    }
    public readonly uint4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 1)));
    }
    public readonly uint4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 2)));
    }
    public readonly uint4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 2)));
    }
    public readonly uint4 xxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 3)));
    }
    public readonly uint4 rrra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 3)));
    }
    public readonly uint4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 0)));
    }
    public readonly uint4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 0)));
    }
    public readonly uint4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 1)));
    }
    public readonly uint4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 1)));
    }
    public readonly uint4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 2)));
    }
    public readonly uint4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 2)));
    }
    public readonly uint4 xxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 3)));
    }
    public readonly uint4 rrga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 3)));
    }
    public readonly uint4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 0)));
    }
    public readonly uint4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 0)));
    }
    public readonly uint4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 1)));
    }
    public readonly uint4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 1)));
    }
    public readonly uint4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 2)));
    }
    public readonly uint4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 2)));
    }
    public readonly uint4 xxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 3)));
    }
    public readonly uint4 rrba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 3)));
    }
    public readonly uint4 xxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 0)));
    }
    public readonly uint4 rrar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 0)));
    }
    public readonly uint4 xxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 1)));
    }
    public readonly uint4 rrag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 1)));
    }
    public readonly uint4 xxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 2)));
    }
    public readonly uint4 rrab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 2)));
    }
    public readonly uint4 xxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 3)));
    }
    public readonly uint4 rraa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 3)));
    }
    public readonly uint4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 0)));
    }
    public readonly uint4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 0)));
    }
    public readonly uint4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 1)));
    }
    public readonly uint4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 1)));
    }
    public readonly uint4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 2)));
    }
    public readonly uint4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 2)));
    }
    public readonly uint4 xyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 3)));
    }
    public readonly uint4 rgra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 3)));
    }
    public readonly uint4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 0)));
    }
    public readonly uint4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 0)));
    }
    public readonly uint4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 1)));
    }
    public readonly uint4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 1)));
    }
    public readonly uint4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 2)));
    }
    public readonly uint4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 2)));
    }
    public readonly uint4 xyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 3)));
    }
    public readonly uint4 rgga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 3)));
    }
    public readonly uint4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 0)));
    }
    public readonly uint4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 0)));
    }
    public readonly uint4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 1)));
    }
    public readonly uint4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 1)));
    }
    public readonly uint4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 2)));
    }
    public readonly uint4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 2)));
    }
    public uint4 xyzw
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public uint4 rgba
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly uint4 xywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 0)));
    }
    public readonly uint4 rgar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 0)));
    }
    public readonly uint4 xywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 1)));
    }
    public readonly uint4 rgag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 1)));
    }
    public uint4 xywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public uint4 rgab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public readonly uint4 xyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 3)));
    }
    public readonly uint4 rgaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 3)));
    }
    public readonly uint4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 0)));
    }
    public readonly uint4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 0)));
    }
    public readonly uint4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 1)));
    }
    public readonly uint4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 1)));
    }
    public readonly uint4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 2)));
    }
    public readonly uint4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 2)));
    }
    public readonly uint4 xzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 3)));
    }
    public readonly uint4 rbra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 3)));
    }
    public readonly uint4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 0)));
    }
    public readonly uint4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 0)));
    }
    public readonly uint4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 1)));
    }
    public readonly uint4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 1)));
    }
    public readonly uint4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 2)));
    }
    public readonly uint4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 2)));
    }
    public uint4 xzyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public uint4 rbga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public readonly uint4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 0)));
    }
    public readonly uint4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 0)));
    }
    public readonly uint4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 1)));
    }
    public readonly uint4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 1)));
    }
    public readonly uint4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 2)));
    }
    public readonly uint4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 2)));
    }
    public readonly uint4 xzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 3)));
    }
    public readonly uint4 rbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 3)));
    }
    public readonly uint4 xzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 0)));
    }
    public readonly uint4 rbar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 0)));
    }
    public uint4 xzwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public uint4 rbag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public readonly uint4 xzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 2)));
    }
    public readonly uint4 rbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 2)));
    }
    public readonly uint4 xzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 3)));
    }
    public readonly uint4 rbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 3)));
    }
    public readonly uint4 xwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 0)));
    }
    public readonly uint4 rarr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 0)));
    }
    public readonly uint4 xwxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 1)));
    }
    public readonly uint4 rarg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 1)));
    }
    public readonly uint4 xwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 2)));
    }
    public readonly uint4 rarb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 2)));
    }
    public readonly uint4 xwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 3)));
    }
    public readonly uint4 rara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 3)));
    }
    public readonly uint4 xwyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 0)));
    }
    public readonly uint4 ragr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 0)));
    }
    public readonly uint4 xwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 1)));
    }
    public readonly uint4 ragg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 1)));
    }
    public uint4 xwyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public uint4 ragb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public readonly uint4 xwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 3)));
    }
    public readonly uint4 raga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 3)));
    }
    public readonly uint4 xwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 0)));
    }
    public readonly uint4 rabr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 0)));
    }
    public uint4 xwzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public uint4 rabg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public readonly uint4 xwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 2)));
    }
    public readonly uint4 rabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 2)));
    }
    public readonly uint4 xwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 3)));
    }
    public readonly uint4 raba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 3)));
    }
    public readonly uint4 xwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 0)));
    }
    public readonly uint4 raar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 0)));
    }
    public readonly uint4 xwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 1)));
    }
    public readonly uint4 raag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 1)));
    }
    public readonly uint4 xwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 2)));
    }
    public readonly uint4 raab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 2)));
    }
    public readonly uint4 xwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 3)));
    }
    public readonly uint4 raaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 3)));
    }
    public readonly uint4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 0)));
    }
    public readonly uint4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 0)));
    }
    public readonly uint4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 1)));
    }
    public readonly uint4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 1)));
    }
    public readonly uint4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 2)));
    }
    public readonly uint4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 2)));
    }
    public readonly uint4 yxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 3)));
    }
    public readonly uint4 grra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 3)));
    }
    public readonly uint4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 0)));
    }
    public readonly uint4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 0)));
    }
    public readonly uint4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 1)));
    }
    public readonly uint4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 1)));
    }
    public readonly uint4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 2)));
    }
    public readonly uint4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 2)));
    }
    public readonly uint4 yxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 3)));
    }
    public readonly uint4 grga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 3)));
    }
    public readonly uint4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 0)));
    }
    public readonly uint4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 0)));
    }
    public readonly uint4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 1)));
    }
    public readonly uint4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 1)));
    }
    public readonly uint4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 2)));
    }
    public readonly uint4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 2)));
    }
    public uint4 yxzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public uint4 grba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public readonly uint4 yxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 0)));
    }
    public readonly uint4 grar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 0)));
    }
    public readonly uint4 yxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 1)));
    }
    public readonly uint4 grag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 1)));
    }
    public uint4 yxwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public uint4 grab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public readonly uint4 yxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 3)));
    }
    public readonly uint4 graa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 3)));
    }
    public readonly uint4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 0)));
    }
    public readonly uint4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 0)));
    }
    public readonly uint4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 1)));
    }
    public readonly uint4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 1)));
    }
    public readonly uint4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 2)));
    }
    public readonly uint4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 2)));
    }
    public readonly uint4 yyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 3)));
    }
    public readonly uint4 ggra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 3)));
    }
    public readonly uint4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 0)));
    }
    public readonly uint4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 0)));
    }
    public readonly uint4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 1)));
    }
    public readonly uint4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 1)));
    }
    public readonly uint4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 2)));
    }
    public readonly uint4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 2)));
    }
    public readonly uint4 yyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 3)));
    }
    public readonly uint4 ggga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 3)));
    }
    public readonly uint4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 0)));
    }
    public readonly uint4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 0)));
    }
    public readonly uint4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 1)));
    }
    public readonly uint4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 1)));
    }
    public readonly uint4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 2)));
    }
    public readonly uint4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 2)));
    }
    public readonly uint4 yyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 3)));
    }
    public readonly uint4 ggba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 3)));
    }
    public readonly uint4 yywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 0)));
    }
    public readonly uint4 ggar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 0)));
    }
    public readonly uint4 yywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 1)));
    }
    public readonly uint4 ggag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 1)));
    }
    public readonly uint4 yywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 2)));
    }
    public readonly uint4 ggab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 2)));
    }
    public readonly uint4 yyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 3)));
    }
    public readonly uint4 ggaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 3)));
    }
    public readonly uint4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 0)));
    }
    public readonly uint4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 0)));
    }
    public readonly uint4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 1)));
    }
    public readonly uint4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 1)));
    }
    public readonly uint4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 2)));
    }
    public readonly uint4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 2)));
    }
    public uint4 yzxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public uint4 gbra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public readonly uint4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 0)));
    }
    public readonly uint4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 0)));
    }
    public readonly uint4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 1)));
    }
    public readonly uint4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 1)));
    }
    public readonly uint4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 2)));
    }
    public readonly uint4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 2)));
    }
    public readonly uint4 yzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 3)));
    }
    public readonly uint4 gbga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 3)));
    }
    public readonly uint4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 0)));
    }
    public readonly uint4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 0)));
    }
    public readonly uint4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 1)));
    }
    public readonly uint4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 1)));
    }
    public readonly uint4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 2)));
    }
    public readonly uint4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 2)));
    }
    public readonly uint4 yzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 3)));
    }
    public readonly uint4 gbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 3)));
    }
    public uint4 yzwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public uint4 gbar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public readonly uint4 yzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 1)));
    }
    public readonly uint4 gbag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 1)));
    }
    public readonly uint4 yzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 2)));
    }
    public readonly uint4 gbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 2)));
    }
    public readonly uint4 yzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 3)));
    }
    public readonly uint4 gbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 3)));
    }
    public readonly uint4 ywxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 0)));
    }
    public readonly uint4 garr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 0)));
    }
    public readonly uint4 ywxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 1)));
    }
    public readonly uint4 garg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 1)));
    }
    public uint4 ywxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public uint4 garb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public readonly uint4 ywxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 3)));
    }
    public readonly uint4 gara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 3)));
    }
    public readonly uint4 ywyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 0)));
    }
    public readonly uint4 gagr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 0)));
    }
    public readonly uint4 ywyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 1)));
    }
    public readonly uint4 gagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 1)));
    }
    public readonly uint4 ywyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 2)));
    }
    public readonly uint4 gagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 2)));
    }
    public readonly uint4 ywyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 3)));
    }
    public readonly uint4 gaga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 3)));
    }
    public uint4 ywzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public uint4 gabr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public readonly uint4 ywzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 1)));
    }
    public readonly uint4 gabg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 1)));
    }
    public readonly uint4 ywzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 2)));
    }
    public readonly uint4 gabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 2)));
    }
    public readonly uint4 ywzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 3)));
    }
    public readonly uint4 gaba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 3)));
    }
    public readonly uint4 ywwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 0)));
    }
    public readonly uint4 gaar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 0)));
    }
    public readonly uint4 ywwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 1)));
    }
    public readonly uint4 gaag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 1)));
    }
    public readonly uint4 ywwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 2)));
    }
    public readonly uint4 gaab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 2)));
    }
    public readonly uint4 ywww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 3)));
    }
    public readonly uint4 gaaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 3)));
    }
    public readonly uint4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 0)));
    }
    public readonly uint4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 0)));
    }
    public readonly uint4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 1)));
    }
    public readonly uint4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 1)));
    }
    public readonly uint4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 2)));
    }
    public readonly uint4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 2)));
    }
    public readonly uint4 zxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 3)));
    }
    public readonly uint4 brra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 3)));
    }
    public readonly uint4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 0)));
    }
    public readonly uint4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 0)));
    }
    public readonly uint4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 1)));
    }
    public readonly uint4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 1)));
    }
    public readonly uint4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 2)));
    }
    public readonly uint4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 2)));
    }
    public uint4 zxyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public uint4 brga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public readonly uint4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 0)));
    }
    public readonly uint4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 0)));
    }
    public readonly uint4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 1)));
    }
    public readonly uint4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 1)));
    }
    public readonly uint4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 2)));
    }
    public readonly uint4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 2)));
    }
    public readonly uint4 zxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 3)));
    }
    public readonly uint4 brba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 3)));
    }
    public readonly uint4 zxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 0)));
    }
    public readonly uint4 brar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 0)));
    }
    public uint4 zxwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public uint4 brag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public readonly uint4 zxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 2)));
    }
    public readonly uint4 brab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 2)));
    }
    public readonly uint4 zxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 3)));
    }
    public readonly uint4 braa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 3)));
    }
    public readonly uint4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 0)));
    }
    public readonly uint4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 0)));
    }
    public readonly uint4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 1)));
    }
    public readonly uint4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 1)));
    }
    public readonly uint4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 2)));
    }
    public readonly uint4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 2)));
    }
    public uint4 zyxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public uint4 bgra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public readonly uint4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 0)));
    }
    public readonly uint4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 0)));
    }
    public readonly uint4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 1)));
    }
    public readonly uint4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 1)));
    }
    public readonly uint4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 2)));
    }
    public readonly uint4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 2)));
    }
    public readonly uint4 zyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 3)));
    }
    public readonly uint4 bgga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 3)));
    }
    public readonly uint4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 0)));
    }
    public readonly uint4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 0)));
    }
    public readonly uint4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 1)));
    }
    public readonly uint4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 1)));
    }
    public readonly uint4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 2)));
    }
    public readonly uint4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 2)));
    }
    public readonly uint4 zyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 3)));
    }
    public readonly uint4 bgba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 3)));
    }
    public uint4 zywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public uint4 bgar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public readonly uint4 zywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 1)));
    }
    public readonly uint4 bgag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 1)));
    }
    public readonly uint4 zywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 2)));
    }
    public readonly uint4 bgab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 2)));
    }
    public readonly uint4 zyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 3)));
    }
    public readonly uint4 bgaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 3)));
    }
    public readonly uint4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 0)));
    }
    public readonly uint4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 0)));
    }
    public readonly uint4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 1)));
    }
    public readonly uint4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 1)));
    }
    public readonly uint4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 2)));
    }
    public readonly uint4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 2)));
    }
    public readonly uint4 zzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 3)));
    }
    public readonly uint4 bbra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 3)));
    }
    public readonly uint4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 0)));
    }
    public readonly uint4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 0)));
    }
    public readonly uint4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 1)));
    }
    public readonly uint4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 1)));
    }
    public readonly uint4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 2)));
    }
    public readonly uint4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 2)));
    }
    public readonly uint4 zzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 3)));
    }
    public readonly uint4 bbga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 3)));
    }
    public readonly uint4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 0)));
    }
    public readonly uint4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 0)));
    }
    public readonly uint4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 1)));
    }
    public readonly uint4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 1)));
    }
    public readonly uint4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 2)));
    }
    public readonly uint4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 2)));
    }
    public readonly uint4 zzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 3)));
    }
    public readonly uint4 bbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 3)));
    }
    public readonly uint4 zzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 0)));
    }
    public readonly uint4 bbar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 0)));
    }
    public readonly uint4 zzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 1)));
    }
    public readonly uint4 bbag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 1)));
    }
    public readonly uint4 zzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 2)));
    }
    public readonly uint4 bbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 2)));
    }
    public readonly uint4 zzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 3)));
    }
    public readonly uint4 bbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 3)));
    }
    public readonly uint4 zwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 0)));
    }
    public readonly uint4 barr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 0)));
    }
    public uint4 zwxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public uint4 barg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public readonly uint4 zwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 2)));
    }
    public readonly uint4 barb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 2)));
    }
    public readonly uint4 zwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 3)));
    }
    public readonly uint4 bara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 3)));
    }
    public uint4 zwyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public uint4 bagr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public readonly uint4 zwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 1)));
    }
    public readonly uint4 bagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 1)));
    }
    public readonly uint4 zwyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 2)));
    }
    public readonly uint4 bagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 2)));
    }
    public readonly uint4 zwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 3)));
    }
    public readonly uint4 baga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 3)));
    }
    public readonly uint4 zwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 0)));
    }
    public readonly uint4 babr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 0)));
    }
    public readonly uint4 zwzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 1)));
    }
    public readonly uint4 babg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 1)));
    }
    public readonly uint4 zwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 2)));
    }
    public readonly uint4 babb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 2)));
    }
    public readonly uint4 zwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 3)));
    }
    public readonly uint4 baba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 3)));
    }
    public readonly uint4 zwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 0)));
    }
    public readonly uint4 baar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 0)));
    }
    public readonly uint4 zwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 1)));
    }
    public readonly uint4 baag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 1)));
    }
    public readonly uint4 zwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 2)));
    }
    public readonly uint4 baab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 2)));
    }
    public readonly uint4 zwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 3)));
    }
    public readonly uint4 baaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 3)));
    }
    public readonly uint4 wxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 0)));
    }
    public readonly uint4 arrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 0)));
    }
    public readonly uint4 wxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 1)));
    }
    public readonly uint4 arrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 1)));
    }
    public readonly uint4 wxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 2)));
    }
    public readonly uint4 arrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 2)));
    }
    public readonly uint4 wxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 3)));
    }
    public readonly uint4 arra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 3)));
    }
    public readonly uint4 wxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 0)));
    }
    public readonly uint4 argr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 0)));
    }
    public readonly uint4 wxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 1)));
    }
    public readonly uint4 argg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 1)));
    }
    public uint4 wxyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public uint4 argb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public readonly uint4 wxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 3)));
    }
    public readonly uint4 arga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 3)));
    }
    public readonly uint4 wxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 0)));
    }
    public readonly uint4 arbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 0)));
    }
    public uint4 wxzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public uint4 arbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public readonly uint4 wxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 2)));
    }
    public readonly uint4 arbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 2)));
    }
    public readonly uint4 wxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 3)));
    }
    public readonly uint4 arba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 3)));
    }
    public readonly uint4 wxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 0)));
    }
    public readonly uint4 arar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 0)));
    }
    public readonly uint4 wxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 1)));
    }
    public readonly uint4 arag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 1)));
    }
    public readonly uint4 wxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 2)));
    }
    public readonly uint4 arab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 2)));
    }
    public readonly uint4 wxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 3)));
    }
    public readonly uint4 araa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 3)));
    }
    public readonly uint4 wyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 0)));
    }
    public readonly uint4 agrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 0)));
    }
    public readonly uint4 wyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 1)));
    }
    public readonly uint4 agrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 1)));
    }
    public uint4 wyxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public uint4 agrb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public readonly uint4 wyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 3)));
    }
    public readonly uint4 agra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 3)));
    }
    public readonly uint4 wyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 0)));
    }
    public readonly uint4 aggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 0)));
    }
    public readonly uint4 wyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 1)));
    }
    public readonly uint4 aggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 1)));
    }
    public readonly uint4 wyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 2)));
    }
    public readonly uint4 aggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 2)));
    }
    public readonly uint4 wyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 3)));
    }
    public readonly uint4 agga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 3)));
    }
    public uint4 wyzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public uint4 agbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public readonly uint4 wyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 1)));
    }
    public readonly uint4 agbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 1)));
    }
    public readonly uint4 wyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 2)));
    }
    public readonly uint4 agbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 2)));
    }
    public readonly uint4 wyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 3)));
    }
    public readonly uint4 agba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 3)));
    }
    public readonly uint4 wywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 0)));
    }
    public readonly uint4 agar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 0)));
    }
    public readonly uint4 wywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 1)));
    }
    public readonly uint4 agag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 1)));
    }
    public readonly uint4 wywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 2)));
    }
    public readonly uint4 agab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 2)));
    }
    public readonly uint4 wyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 3)));
    }
    public readonly uint4 agaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 3)));
    }
    public readonly uint4 wzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 0)));
    }
    public readonly uint4 abrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 0)));
    }
    public uint4 wzxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public uint4 abrg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public readonly uint4 wzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 2)));
    }
    public readonly uint4 abrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 2)));
    }
    public readonly uint4 wzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 3)));
    }
    public readonly uint4 abra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 3)));
    }
    public uint4 wzyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public uint4 abgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public readonly uint4 wzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 1)));
    }
    public readonly uint4 abgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 1)));
    }
    public readonly uint4 wzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 2)));
    }
    public readonly uint4 abgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 2)));
    }
    public readonly uint4 wzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 3)));
    }
    public readonly uint4 abga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 3)));
    }
    public readonly uint4 wzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 0)));
    }
    public readonly uint4 abbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 0)));
    }
    public readonly uint4 wzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 1)));
    }
    public readonly uint4 abbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 1)));
    }
    public readonly uint4 wzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 2)));
    }
    public readonly uint4 abbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 2)));
    }
    public readonly uint4 wzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 3)));
    }
    public readonly uint4 abba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 3)));
    }
    public readonly uint4 wzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 0)));
    }
    public readonly uint4 abar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 0)));
    }
    public readonly uint4 wzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 1)));
    }
    public readonly uint4 abag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 1)));
    }
    public readonly uint4 wzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 2)));
    }
    public readonly uint4 abab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 2)));
    }
    public readonly uint4 wzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 3)));
    }
    public readonly uint4 abaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 3)));
    }
    public readonly uint4 wwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 0)));
    }
    public readonly uint4 aarr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 0)));
    }
    public readonly uint4 wwxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 1)));
    }
    public readonly uint4 aarg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 1)));
    }
    public readonly uint4 wwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 2)));
    }
    public readonly uint4 aarb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 2)));
    }
    public readonly uint4 wwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 3)));
    }
    public readonly uint4 aara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 3)));
    }
    public readonly uint4 wwyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 0)));
    }
    public readonly uint4 aagr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 0)));
    }
    public readonly uint4 wwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 1)));
    }
    public readonly uint4 aagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 1)));
    }
    public readonly uint4 wwyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 2)));
    }
    public readonly uint4 aagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 2)));
    }
    public readonly uint4 wwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 3)));
    }
    public readonly uint4 aaga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 3)));
    }
    public readonly uint4 wwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 0)));
    }
    public readonly uint4 aabr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 0)));
    }
    public readonly uint4 wwzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 1)));
    }
    public readonly uint4 aabg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 1)));
    }
    public readonly uint4 wwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 2)));
    }
    public readonly uint4 aabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 2)));
    }
    public readonly uint4 wwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 3)));
    }
    public readonly uint4 aaba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 3)));
    }
    public readonly uint4 wwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 0)));
    }
    public readonly uint4 aaar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 0)));
    }
    public readonly uint4 wwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 1)));
    }
    public readonly uint4 aaag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 1)));
    }
    public readonly uint4 wwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 2)));
    }
    public readonly uint4 aaab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 2)));
    }
    public readonly uint4 wwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 3)));
    }
    public readonly uint4 aaaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 3)));
    }
}

#endregion // uint4

#region long4

public partial struct long4 
{
    public readonly long4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
    }
    public readonly long4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
    }
    public readonly long4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
    }
    public readonly long4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
    }
    public readonly long4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
    }
    public readonly long4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
    }
    public readonly long4 xxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 3)));
    }
    public readonly long4 rrra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 3)));
    }
    public readonly long4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
    }
    public readonly long4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
    }
    public readonly long4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
    }
    public readonly long4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
    }
    public readonly long4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
    }
    public readonly long4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
    }
    public readonly long4 xxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 3)));
    }
    public readonly long4 rrga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 3)));
    }
    public readonly long4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
    }
    public readonly long4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
    }
    public readonly long4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
    }
    public readonly long4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
    }
    public readonly long4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
    }
    public readonly long4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
    }
    public readonly long4 xxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 3)));
    }
    public readonly long4 rrba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 3)));
    }
    public readonly long4 xxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 0)));
    }
    public readonly long4 rrar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 0)));
    }
    public readonly long4 xxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 1)));
    }
    public readonly long4 rrag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 1)));
    }
    public readonly long4 xxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 2)));
    }
    public readonly long4 rrab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 2)));
    }
    public readonly long4 xxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 3)));
    }
    public readonly long4 rraa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 3)));
    }
    public readonly long4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
    }
    public readonly long4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
    }
    public readonly long4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
    }
    public readonly long4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
    }
    public readonly long4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
    }
    public readonly long4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
    }
    public readonly long4 xyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 3)));
    }
    public readonly long4 rgra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 3)));
    }
    public readonly long4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
    }
    public readonly long4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
    }
    public readonly long4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
    }
    public readonly long4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
    }
    public readonly long4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
    }
    public readonly long4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
    }
    public readonly long4 xyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 3)));
    }
    public readonly long4 rgga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 3)));
    }
    public readonly long4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
    }
    public readonly long4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
    }
    public readonly long4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
    }
    public readonly long4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
    }
    public readonly long4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
    }
    public readonly long4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
    }
    public long4 xyzw
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public long4 rgba
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly long4 xywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 0)));
    }
    public readonly long4 rgar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 0)));
    }
    public readonly long4 xywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 1)));
    }
    public readonly long4 rgag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 1)));
    }
    public long4 xywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public long4 rgab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public readonly long4 xyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 3)));
    }
    public readonly long4 rgaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 3)));
    }
    public readonly long4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
    }
    public readonly long4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
    }
    public readonly long4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
    }
    public readonly long4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
    }
    public readonly long4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
    }
    public readonly long4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
    }
    public readonly long4 xzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 3)));
    }
    public readonly long4 rbra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 3)));
    }
    public readonly long4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
    }
    public readonly long4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
    }
    public readonly long4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
    }
    public readonly long4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
    }
    public readonly long4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
    }
    public readonly long4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
    }
    public long4 xzyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public long4 rbga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public readonly long4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
    }
    public readonly long4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
    }
    public readonly long4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
    }
    public readonly long4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
    }
    public readonly long4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
    }
    public readonly long4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
    }
    public readonly long4 xzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 3)));
    }
    public readonly long4 rbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 3)));
    }
    public readonly long4 xzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 0)));
    }
    public readonly long4 rbar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 0)));
    }
    public long4 xzwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public long4 rbag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public readonly long4 xzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 2)));
    }
    public readonly long4 rbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 2)));
    }
    public readonly long4 xzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 3)));
    }
    public readonly long4 rbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 3)));
    }
    public readonly long4 xwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 0)));
    }
    public readonly long4 rarr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 0)));
    }
    public readonly long4 xwxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 1)));
    }
    public readonly long4 rarg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 1)));
    }
    public readonly long4 xwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 2)));
    }
    public readonly long4 rarb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 2)));
    }
    public readonly long4 xwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 3)));
    }
    public readonly long4 rara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 3)));
    }
    public readonly long4 xwyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 0)));
    }
    public readonly long4 ragr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 0)));
    }
    public readonly long4 xwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 1)));
    }
    public readonly long4 ragg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 1)));
    }
    public long4 xwyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public long4 ragb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public readonly long4 xwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 3)));
    }
    public readonly long4 raga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 3)));
    }
    public readonly long4 xwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 0)));
    }
    public readonly long4 rabr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 0)));
    }
    public long4 xwzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public long4 rabg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public readonly long4 xwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 2)));
    }
    public readonly long4 rabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 2)));
    }
    public readonly long4 xwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 3)));
    }
    public readonly long4 raba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 3)));
    }
    public readonly long4 xwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 0)));
    }
    public readonly long4 raar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 0)));
    }
    public readonly long4 xwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 1)));
    }
    public readonly long4 raag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 1)));
    }
    public readonly long4 xwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 2)));
    }
    public readonly long4 raab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 2)));
    }
    public readonly long4 xwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 3)));
    }
    public readonly long4 raaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 3)));
    }
    public readonly long4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
    }
    public readonly long4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
    }
    public readonly long4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
    }
    public readonly long4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
    }
    public readonly long4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
    }
    public readonly long4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
    }
    public readonly long4 yxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 3)));
    }
    public readonly long4 grra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 3)));
    }
    public readonly long4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
    }
    public readonly long4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
    }
    public readonly long4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
    }
    public readonly long4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
    }
    public readonly long4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
    }
    public readonly long4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
    }
    public readonly long4 yxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 3)));
    }
    public readonly long4 grga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 3)));
    }
    public readonly long4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
    }
    public readonly long4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
    }
    public readonly long4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
    }
    public readonly long4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
    }
    public readonly long4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
    }
    public readonly long4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
    }
    public long4 yxzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public long4 grba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public readonly long4 yxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 0)));
    }
    public readonly long4 grar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 0)));
    }
    public readonly long4 yxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 1)));
    }
    public readonly long4 grag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 1)));
    }
    public long4 yxwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public long4 grab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public readonly long4 yxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 3)));
    }
    public readonly long4 graa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 3)));
    }
    public readonly long4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
    }
    public readonly long4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
    }
    public readonly long4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
    }
    public readonly long4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
    }
    public readonly long4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
    }
    public readonly long4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
    }
    public readonly long4 yyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 3)));
    }
    public readonly long4 ggra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 3)));
    }
    public readonly long4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
    }
    public readonly long4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
    }
    public readonly long4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
    }
    public readonly long4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
    }
    public readonly long4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
    }
    public readonly long4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
    }
    public readonly long4 yyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 3)));
    }
    public readonly long4 ggga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 3)));
    }
    public readonly long4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
    }
    public readonly long4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
    }
    public readonly long4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
    }
    public readonly long4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
    }
    public readonly long4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
    }
    public readonly long4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
    }
    public readonly long4 yyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 3)));
    }
    public readonly long4 ggba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 3)));
    }
    public readonly long4 yywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 0)));
    }
    public readonly long4 ggar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 0)));
    }
    public readonly long4 yywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 1)));
    }
    public readonly long4 ggag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 1)));
    }
    public readonly long4 yywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 2)));
    }
    public readonly long4 ggab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 2)));
    }
    public readonly long4 yyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 3)));
    }
    public readonly long4 ggaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 3)));
    }
    public readonly long4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
    }
    public readonly long4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
    }
    public readonly long4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
    }
    public readonly long4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
    }
    public readonly long4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
    }
    public readonly long4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
    }
    public long4 yzxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public long4 gbra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public readonly long4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
    }
    public readonly long4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
    }
    public readonly long4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
    }
    public readonly long4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
    }
    public readonly long4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
    }
    public readonly long4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
    }
    public readonly long4 yzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 3)));
    }
    public readonly long4 gbga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 3)));
    }
    public readonly long4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
    }
    public readonly long4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
    }
    public readonly long4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
    }
    public readonly long4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
    }
    public readonly long4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
    }
    public readonly long4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
    }
    public readonly long4 yzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 3)));
    }
    public readonly long4 gbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 3)));
    }
    public long4 yzwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public long4 gbar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public readonly long4 yzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 1)));
    }
    public readonly long4 gbag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 1)));
    }
    public readonly long4 yzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 2)));
    }
    public readonly long4 gbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 2)));
    }
    public readonly long4 yzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 3)));
    }
    public readonly long4 gbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 3)));
    }
    public readonly long4 ywxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 0)));
    }
    public readonly long4 garr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 0)));
    }
    public readonly long4 ywxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 1)));
    }
    public readonly long4 garg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 1)));
    }
    public long4 ywxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public long4 garb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public readonly long4 ywxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 3)));
    }
    public readonly long4 gara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 3)));
    }
    public readonly long4 ywyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 0)));
    }
    public readonly long4 gagr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 0)));
    }
    public readonly long4 ywyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 1)));
    }
    public readonly long4 gagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 1)));
    }
    public readonly long4 ywyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 2)));
    }
    public readonly long4 gagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 2)));
    }
    public readonly long4 ywyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 3)));
    }
    public readonly long4 gaga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 3)));
    }
    public long4 ywzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public long4 gabr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public readonly long4 ywzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 1)));
    }
    public readonly long4 gabg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 1)));
    }
    public readonly long4 ywzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 2)));
    }
    public readonly long4 gabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 2)));
    }
    public readonly long4 ywzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 3)));
    }
    public readonly long4 gaba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 3)));
    }
    public readonly long4 ywwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 0)));
    }
    public readonly long4 gaar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 0)));
    }
    public readonly long4 ywwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 1)));
    }
    public readonly long4 gaag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 1)));
    }
    public readonly long4 ywwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 2)));
    }
    public readonly long4 gaab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 2)));
    }
    public readonly long4 ywww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 3)));
    }
    public readonly long4 gaaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 3)));
    }
    public readonly long4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
    }
    public readonly long4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
    }
    public readonly long4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
    }
    public readonly long4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
    }
    public readonly long4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
    }
    public readonly long4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
    }
    public readonly long4 zxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 3)));
    }
    public readonly long4 brra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 3)));
    }
    public readonly long4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
    }
    public readonly long4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
    }
    public readonly long4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
    }
    public readonly long4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
    }
    public readonly long4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
    }
    public readonly long4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
    }
    public long4 zxyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public long4 brga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public readonly long4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
    }
    public readonly long4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
    }
    public readonly long4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
    }
    public readonly long4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
    }
    public readonly long4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
    }
    public readonly long4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
    }
    public readonly long4 zxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 3)));
    }
    public readonly long4 brba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 3)));
    }
    public readonly long4 zxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 0)));
    }
    public readonly long4 brar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 0)));
    }
    public long4 zxwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public long4 brag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public readonly long4 zxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 2)));
    }
    public readonly long4 brab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 2)));
    }
    public readonly long4 zxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 3)));
    }
    public readonly long4 braa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 3)));
    }
    public readonly long4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
    }
    public readonly long4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
    }
    public readonly long4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
    }
    public readonly long4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
    }
    public readonly long4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
    }
    public readonly long4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
    }
    public long4 zyxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public long4 bgra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public readonly long4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
    }
    public readonly long4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
    }
    public readonly long4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
    }
    public readonly long4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
    }
    public readonly long4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
    }
    public readonly long4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
    }
    public readonly long4 zyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 3)));
    }
    public readonly long4 bgga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 3)));
    }
    public readonly long4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
    }
    public readonly long4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
    }
    public readonly long4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
    }
    public readonly long4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
    }
    public readonly long4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
    }
    public readonly long4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
    }
    public readonly long4 zyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 3)));
    }
    public readonly long4 bgba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 3)));
    }
    public long4 zywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public long4 bgar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public readonly long4 zywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 1)));
    }
    public readonly long4 bgag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 1)));
    }
    public readonly long4 zywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 2)));
    }
    public readonly long4 bgab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 2)));
    }
    public readonly long4 zyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 3)));
    }
    public readonly long4 bgaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 3)));
    }
    public readonly long4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
    }
    public readonly long4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
    }
    public readonly long4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
    }
    public readonly long4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
    }
    public readonly long4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
    }
    public readonly long4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
    }
    public readonly long4 zzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 3)));
    }
    public readonly long4 bbra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 3)));
    }
    public readonly long4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
    }
    public readonly long4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
    }
    public readonly long4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
    }
    public readonly long4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
    }
    public readonly long4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
    }
    public readonly long4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
    }
    public readonly long4 zzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 3)));
    }
    public readonly long4 bbga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 3)));
    }
    public readonly long4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
    }
    public readonly long4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
    }
    public readonly long4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
    }
    public readonly long4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
    }
    public readonly long4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
    }
    public readonly long4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
    }
    public readonly long4 zzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 3)));
    }
    public readonly long4 bbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 3)));
    }
    public readonly long4 zzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 0)));
    }
    public readonly long4 bbar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 0)));
    }
    public readonly long4 zzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 1)));
    }
    public readonly long4 bbag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 1)));
    }
    public readonly long4 zzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 2)));
    }
    public readonly long4 bbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 2)));
    }
    public readonly long4 zzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 3)));
    }
    public readonly long4 bbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 3)));
    }
    public readonly long4 zwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 0)));
    }
    public readonly long4 barr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 0)));
    }
    public long4 zwxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public long4 barg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public readonly long4 zwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 2)));
    }
    public readonly long4 barb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 2)));
    }
    public readonly long4 zwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 3)));
    }
    public readonly long4 bara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 3)));
    }
    public long4 zwyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public long4 bagr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public readonly long4 zwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 1)));
    }
    public readonly long4 bagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 1)));
    }
    public readonly long4 zwyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 2)));
    }
    public readonly long4 bagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 2)));
    }
    public readonly long4 zwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 3)));
    }
    public readonly long4 baga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 3)));
    }
    public readonly long4 zwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 0)));
    }
    public readonly long4 babr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 0)));
    }
    public readonly long4 zwzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 1)));
    }
    public readonly long4 babg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 1)));
    }
    public readonly long4 zwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 2)));
    }
    public readonly long4 babb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 2)));
    }
    public readonly long4 zwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 3)));
    }
    public readonly long4 baba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 3)));
    }
    public readonly long4 zwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 0)));
    }
    public readonly long4 baar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 0)));
    }
    public readonly long4 zwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 1)));
    }
    public readonly long4 baag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 1)));
    }
    public readonly long4 zwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 2)));
    }
    public readonly long4 baab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 2)));
    }
    public readonly long4 zwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 3)));
    }
    public readonly long4 baaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 3)));
    }
    public readonly long4 wxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 0)));
    }
    public readonly long4 arrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 0)));
    }
    public readonly long4 wxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 1)));
    }
    public readonly long4 arrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 1)));
    }
    public readonly long4 wxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 2)));
    }
    public readonly long4 arrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 2)));
    }
    public readonly long4 wxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 3)));
    }
    public readonly long4 arra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 3)));
    }
    public readonly long4 wxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 0)));
    }
    public readonly long4 argr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 0)));
    }
    public readonly long4 wxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 1)));
    }
    public readonly long4 argg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 1)));
    }
    public long4 wxyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public long4 argb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public readonly long4 wxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 3)));
    }
    public readonly long4 arga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 3)));
    }
    public readonly long4 wxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 0)));
    }
    public readonly long4 arbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 0)));
    }
    public long4 wxzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public long4 arbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public readonly long4 wxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 2)));
    }
    public readonly long4 arbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 2)));
    }
    public readonly long4 wxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 3)));
    }
    public readonly long4 arba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 3)));
    }
    public readonly long4 wxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 0)));
    }
    public readonly long4 arar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 0)));
    }
    public readonly long4 wxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 1)));
    }
    public readonly long4 arag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 1)));
    }
    public readonly long4 wxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 2)));
    }
    public readonly long4 arab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 2)));
    }
    public readonly long4 wxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 3)));
    }
    public readonly long4 araa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 3)));
    }
    public readonly long4 wyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 0)));
    }
    public readonly long4 agrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 0)));
    }
    public readonly long4 wyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 1)));
    }
    public readonly long4 agrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 1)));
    }
    public long4 wyxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public long4 agrb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public readonly long4 wyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 3)));
    }
    public readonly long4 agra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 3)));
    }
    public readonly long4 wyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 0)));
    }
    public readonly long4 aggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 0)));
    }
    public readonly long4 wyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 1)));
    }
    public readonly long4 aggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 1)));
    }
    public readonly long4 wyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 2)));
    }
    public readonly long4 aggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 2)));
    }
    public readonly long4 wyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 3)));
    }
    public readonly long4 agga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 3)));
    }
    public long4 wyzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public long4 agbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public readonly long4 wyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 1)));
    }
    public readonly long4 agbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 1)));
    }
    public readonly long4 wyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 2)));
    }
    public readonly long4 agbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 2)));
    }
    public readonly long4 wyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 3)));
    }
    public readonly long4 agba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 3)));
    }
    public readonly long4 wywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 0)));
    }
    public readonly long4 agar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 0)));
    }
    public readonly long4 wywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 1)));
    }
    public readonly long4 agag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 1)));
    }
    public readonly long4 wywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 2)));
    }
    public readonly long4 agab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 2)));
    }
    public readonly long4 wyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 3)));
    }
    public readonly long4 agaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 3)));
    }
    public readonly long4 wzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 0)));
    }
    public readonly long4 abrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 0)));
    }
    public long4 wzxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public long4 abrg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public readonly long4 wzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 2)));
    }
    public readonly long4 abrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 2)));
    }
    public readonly long4 wzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 3)));
    }
    public readonly long4 abra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 3)));
    }
    public long4 wzyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public long4 abgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public readonly long4 wzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 1)));
    }
    public readonly long4 abgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 1)));
    }
    public readonly long4 wzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 2)));
    }
    public readonly long4 abgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 2)));
    }
    public readonly long4 wzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 3)));
    }
    public readonly long4 abga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 3)));
    }
    public readonly long4 wzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 0)));
    }
    public readonly long4 abbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 0)));
    }
    public readonly long4 wzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 1)));
    }
    public readonly long4 abbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 1)));
    }
    public readonly long4 wzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 2)));
    }
    public readonly long4 abbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 2)));
    }
    public readonly long4 wzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 3)));
    }
    public readonly long4 abba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 3)));
    }
    public readonly long4 wzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 0)));
    }
    public readonly long4 abar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 0)));
    }
    public readonly long4 wzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 1)));
    }
    public readonly long4 abag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 1)));
    }
    public readonly long4 wzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 2)));
    }
    public readonly long4 abab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 2)));
    }
    public readonly long4 wzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 3)));
    }
    public readonly long4 abaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 3)));
    }
    public readonly long4 wwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 0)));
    }
    public readonly long4 aarr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 0)));
    }
    public readonly long4 wwxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 1)));
    }
    public readonly long4 aarg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 1)));
    }
    public readonly long4 wwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 2)));
    }
    public readonly long4 aarb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 2)));
    }
    public readonly long4 wwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 3)));
    }
    public readonly long4 aara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 3)));
    }
    public readonly long4 wwyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 0)));
    }
    public readonly long4 aagr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 0)));
    }
    public readonly long4 wwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 1)));
    }
    public readonly long4 aagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 1)));
    }
    public readonly long4 wwyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 2)));
    }
    public readonly long4 aagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 2)));
    }
    public readonly long4 wwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 3)));
    }
    public readonly long4 aaga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 3)));
    }
    public readonly long4 wwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 0)));
    }
    public readonly long4 aabr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 0)));
    }
    public readonly long4 wwzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 1)));
    }
    public readonly long4 aabg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 1)));
    }
    public readonly long4 wwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 2)));
    }
    public readonly long4 aabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 2)));
    }
    public readonly long4 wwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 3)));
    }
    public readonly long4 aaba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 3)));
    }
    public readonly long4 wwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 0)));
    }
    public readonly long4 aaar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 0)));
    }
    public readonly long4 wwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 1)));
    }
    public readonly long4 aaag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 1)));
    }
    public readonly long4 wwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 2)));
    }
    public readonly long4 aaab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 2)));
    }
    public readonly long4 wwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 3)));
    }
    public readonly long4 aaaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 3)));
    }
}

#endregion // long4

#region ulong4

public partial struct ulong4 
{
    public readonly ulong4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 0)));
    }
    public readonly ulong4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 0)));
    }
    public readonly ulong4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 1)));
    }
    public readonly ulong4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 1)));
    }
    public readonly ulong4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 2)));
    }
    public readonly ulong4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 2)));
    }
    public readonly ulong4 xxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 3)));
    }
    public readonly ulong4 rrra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 3)));
    }
    public readonly ulong4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 0)));
    }
    public readonly ulong4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 0)));
    }
    public readonly ulong4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 1)));
    }
    public readonly ulong4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 1)));
    }
    public readonly ulong4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 2)));
    }
    public readonly ulong4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 2)));
    }
    public readonly ulong4 xxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 3)));
    }
    public readonly ulong4 rrga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 3)));
    }
    public readonly ulong4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 0)));
    }
    public readonly ulong4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 0)));
    }
    public readonly ulong4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 1)));
    }
    public readonly ulong4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 1)));
    }
    public readonly ulong4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 2)));
    }
    public readonly ulong4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 2)));
    }
    public readonly ulong4 xxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 3)));
    }
    public readonly ulong4 rrba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 3)));
    }
    public readonly ulong4 xxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 0)));
    }
    public readonly ulong4 rrar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 0)));
    }
    public readonly ulong4 xxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 1)));
    }
    public readonly ulong4 rrag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 1)));
    }
    public readonly ulong4 xxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 2)));
    }
    public readonly ulong4 rrab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 2)));
    }
    public readonly ulong4 xxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 3)));
    }
    public readonly ulong4 rraa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 3)));
    }
    public readonly ulong4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 0)));
    }
    public readonly ulong4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 0)));
    }
    public readonly ulong4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 1)));
    }
    public readonly ulong4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 1)));
    }
    public readonly ulong4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 2)));
    }
    public readonly ulong4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 2)));
    }
    public readonly ulong4 xyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 3)));
    }
    public readonly ulong4 rgra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 3)));
    }
    public readonly ulong4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 0)));
    }
    public readonly ulong4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 0)));
    }
    public readonly ulong4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 1)));
    }
    public readonly ulong4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 1)));
    }
    public readonly ulong4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 2)));
    }
    public readonly ulong4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 2)));
    }
    public readonly ulong4 xyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 3)));
    }
    public readonly ulong4 rgga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 3)));
    }
    public readonly ulong4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 0)));
    }
    public readonly ulong4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 0)));
    }
    public readonly ulong4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 1)));
    }
    public readonly ulong4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 1)));
    }
    public readonly ulong4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 2)));
    }
    public readonly ulong4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 2)));
    }
    public ulong4 xyzw
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public ulong4 rgba
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly ulong4 xywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 0)));
    }
    public readonly ulong4 rgar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 0)));
    }
    public readonly ulong4 xywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 1)));
    }
    public readonly ulong4 rgag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 1)));
    }
    public ulong4 xywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public ulong4 rgab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public readonly ulong4 xyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 3)));
    }
    public readonly ulong4 rgaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 3)));
    }
    public readonly ulong4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 0)));
    }
    public readonly ulong4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 0)));
    }
    public readonly ulong4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 1)));
    }
    public readonly ulong4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 1)));
    }
    public readonly ulong4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 2)));
    }
    public readonly ulong4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 2)));
    }
    public readonly ulong4 xzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 3)));
    }
    public readonly ulong4 rbra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 3)));
    }
    public readonly ulong4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 0)));
    }
    public readonly ulong4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 0)));
    }
    public readonly ulong4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 1)));
    }
    public readonly ulong4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 1)));
    }
    public readonly ulong4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 2)));
    }
    public readonly ulong4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 2)));
    }
    public ulong4 xzyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public ulong4 rbga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public readonly ulong4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 0)));
    }
    public readonly ulong4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 0)));
    }
    public readonly ulong4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 1)));
    }
    public readonly ulong4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 1)));
    }
    public readonly ulong4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 2)));
    }
    public readonly ulong4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 2)));
    }
    public readonly ulong4 xzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 3)));
    }
    public readonly ulong4 rbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 3)));
    }
    public readonly ulong4 xzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 0)));
    }
    public readonly ulong4 rbar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 0)));
    }
    public ulong4 xzwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public ulong4 rbag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public readonly ulong4 xzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 2)));
    }
    public readonly ulong4 rbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 2)));
    }
    public readonly ulong4 xzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 3)));
    }
    public readonly ulong4 rbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 3)));
    }
    public readonly ulong4 xwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 0)));
    }
    public readonly ulong4 rarr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 0)));
    }
    public readonly ulong4 xwxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 1)));
    }
    public readonly ulong4 rarg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 1)));
    }
    public readonly ulong4 xwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 2)));
    }
    public readonly ulong4 rarb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 2)));
    }
    public readonly ulong4 xwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 3)));
    }
    public readonly ulong4 rara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 3)));
    }
    public readonly ulong4 xwyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 0)));
    }
    public readonly ulong4 ragr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 0)));
    }
    public readonly ulong4 xwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 1)));
    }
    public readonly ulong4 ragg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 1)));
    }
    public ulong4 xwyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public ulong4 ragb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public readonly ulong4 xwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 3)));
    }
    public readonly ulong4 raga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 3)));
    }
    public readonly ulong4 xwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 0)));
    }
    public readonly ulong4 rabr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 0)));
    }
    public ulong4 xwzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public ulong4 rabg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public readonly ulong4 xwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 2)));
    }
    public readonly ulong4 rabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 2)));
    }
    public readonly ulong4 xwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 3)));
    }
    public readonly ulong4 raba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 3)));
    }
    public readonly ulong4 xwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 0)));
    }
    public readonly ulong4 raar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 0)));
    }
    public readonly ulong4 xwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 1)));
    }
    public readonly ulong4 raag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 1)));
    }
    public readonly ulong4 xwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 2)));
    }
    public readonly ulong4 raab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 2)));
    }
    public readonly ulong4 xwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 3)));
    }
    public readonly ulong4 raaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 3)));
    }
    public readonly ulong4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 0)));
    }
    public readonly ulong4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 0)));
    }
    public readonly ulong4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 1)));
    }
    public readonly ulong4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 1)));
    }
    public readonly ulong4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 2)));
    }
    public readonly ulong4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 2)));
    }
    public readonly ulong4 yxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 3)));
    }
    public readonly ulong4 grra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 3)));
    }
    public readonly ulong4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 0)));
    }
    public readonly ulong4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 0)));
    }
    public readonly ulong4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 1)));
    }
    public readonly ulong4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 1)));
    }
    public readonly ulong4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 2)));
    }
    public readonly ulong4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 2)));
    }
    public readonly ulong4 yxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 3)));
    }
    public readonly ulong4 grga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 3)));
    }
    public readonly ulong4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 0)));
    }
    public readonly ulong4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 0)));
    }
    public readonly ulong4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 1)));
    }
    public readonly ulong4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 1)));
    }
    public readonly ulong4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 2)));
    }
    public readonly ulong4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 2)));
    }
    public ulong4 yxzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public ulong4 grba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public readonly ulong4 yxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 0)));
    }
    public readonly ulong4 grar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 0)));
    }
    public readonly ulong4 yxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 1)));
    }
    public readonly ulong4 grag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 1)));
    }
    public ulong4 yxwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public ulong4 grab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public readonly ulong4 yxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 3)));
    }
    public readonly ulong4 graa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 3)));
    }
    public readonly ulong4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 0)));
    }
    public readonly ulong4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 0)));
    }
    public readonly ulong4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 1)));
    }
    public readonly ulong4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 1)));
    }
    public readonly ulong4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 2)));
    }
    public readonly ulong4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 2)));
    }
    public readonly ulong4 yyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 3)));
    }
    public readonly ulong4 ggra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 3)));
    }
    public readonly ulong4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 0)));
    }
    public readonly ulong4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 0)));
    }
    public readonly ulong4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 1)));
    }
    public readonly ulong4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 1)));
    }
    public readonly ulong4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 2)));
    }
    public readonly ulong4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 2)));
    }
    public readonly ulong4 yyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 3)));
    }
    public readonly ulong4 ggga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 3)));
    }
    public readonly ulong4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 0)));
    }
    public readonly ulong4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 0)));
    }
    public readonly ulong4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 1)));
    }
    public readonly ulong4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 1)));
    }
    public readonly ulong4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 2)));
    }
    public readonly ulong4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 2)));
    }
    public readonly ulong4 yyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 3)));
    }
    public readonly ulong4 ggba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 3)));
    }
    public readonly ulong4 yywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 0)));
    }
    public readonly ulong4 ggar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 0)));
    }
    public readonly ulong4 yywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 1)));
    }
    public readonly ulong4 ggag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 1)));
    }
    public readonly ulong4 yywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 2)));
    }
    public readonly ulong4 ggab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 2)));
    }
    public readonly ulong4 yyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 3)));
    }
    public readonly ulong4 ggaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 3)));
    }
    public readonly ulong4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 0)));
    }
    public readonly ulong4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 0)));
    }
    public readonly ulong4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 1)));
    }
    public readonly ulong4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 1)));
    }
    public readonly ulong4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 2)));
    }
    public readonly ulong4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 2)));
    }
    public ulong4 yzxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public ulong4 gbra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public readonly ulong4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 0)));
    }
    public readonly ulong4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 0)));
    }
    public readonly ulong4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 1)));
    }
    public readonly ulong4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 1)));
    }
    public readonly ulong4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 2)));
    }
    public readonly ulong4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 2)));
    }
    public readonly ulong4 yzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 3)));
    }
    public readonly ulong4 gbga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 3)));
    }
    public readonly ulong4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 0)));
    }
    public readonly ulong4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 0)));
    }
    public readonly ulong4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 1)));
    }
    public readonly ulong4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 1)));
    }
    public readonly ulong4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 2)));
    }
    public readonly ulong4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 2)));
    }
    public readonly ulong4 yzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 3)));
    }
    public readonly ulong4 gbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 3)));
    }
    public ulong4 yzwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public ulong4 gbar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public readonly ulong4 yzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 1)));
    }
    public readonly ulong4 gbag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 1)));
    }
    public readonly ulong4 yzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 2)));
    }
    public readonly ulong4 gbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 2)));
    }
    public readonly ulong4 yzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 3)));
    }
    public readonly ulong4 gbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 3)));
    }
    public readonly ulong4 ywxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 0)));
    }
    public readonly ulong4 garr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 0)));
    }
    public readonly ulong4 ywxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 1)));
    }
    public readonly ulong4 garg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 1)));
    }
    public ulong4 ywxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public ulong4 garb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public readonly ulong4 ywxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 3)));
    }
    public readonly ulong4 gara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 3)));
    }
    public readonly ulong4 ywyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 0)));
    }
    public readonly ulong4 gagr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 0)));
    }
    public readonly ulong4 ywyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 1)));
    }
    public readonly ulong4 gagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 1)));
    }
    public readonly ulong4 ywyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 2)));
    }
    public readonly ulong4 gagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 2)));
    }
    public readonly ulong4 ywyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 3)));
    }
    public readonly ulong4 gaga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 3)));
    }
    public ulong4 ywzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public ulong4 gabr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public readonly ulong4 ywzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 1)));
    }
    public readonly ulong4 gabg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 1)));
    }
    public readonly ulong4 ywzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 2)));
    }
    public readonly ulong4 gabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 2)));
    }
    public readonly ulong4 ywzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 3)));
    }
    public readonly ulong4 gaba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 3)));
    }
    public readonly ulong4 ywwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 0)));
    }
    public readonly ulong4 gaar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 0)));
    }
    public readonly ulong4 ywwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 1)));
    }
    public readonly ulong4 gaag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 1)));
    }
    public readonly ulong4 ywwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 2)));
    }
    public readonly ulong4 gaab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 2)));
    }
    public readonly ulong4 ywww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 3)));
    }
    public readonly ulong4 gaaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 3)));
    }
    public readonly ulong4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 0)));
    }
    public readonly ulong4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 0)));
    }
    public readonly ulong4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 1)));
    }
    public readonly ulong4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 1)));
    }
    public readonly ulong4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 2)));
    }
    public readonly ulong4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 2)));
    }
    public readonly ulong4 zxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 3)));
    }
    public readonly ulong4 brra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 3)));
    }
    public readonly ulong4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 0)));
    }
    public readonly ulong4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 0)));
    }
    public readonly ulong4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 1)));
    }
    public readonly ulong4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 1)));
    }
    public readonly ulong4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 2)));
    }
    public readonly ulong4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 2)));
    }
    public ulong4 zxyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public ulong4 brga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public readonly ulong4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 0)));
    }
    public readonly ulong4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 0)));
    }
    public readonly ulong4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 1)));
    }
    public readonly ulong4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 1)));
    }
    public readonly ulong4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 2)));
    }
    public readonly ulong4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 2)));
    }
    public readonly ulong4 zxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 3)));
    }
    public readonly ulong4 brba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 3)));
    }
    public readonly ulong4 zxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 0)));
    }
    public readonly ulong4 brar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 0)));
    }
    public ulong4 zxwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public ulong4 brag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public readonly ulong4 zxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 2)));
    }
    public readonly ulong4 brab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 2)));
    }
    public readonly ulong4 zxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 3)));
    }
    public readonly ulong4 braa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 3)));
    }
    public readonly ulong4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 0)));
    }
    public readonly ulong4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 0)));
    }
    public readonly ulong4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 1)));
    }
    public readonly ulong4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 1)));
    }
    public readonly ulong4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 2)));
    }
    public readonly ulong4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 2)));
    }
    public ulong4 zyxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public ulong4 bgra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public readonly ulong4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 0)));
    }
    public readonly ulong4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 0)));
    }
    public readonly ulong4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 1)));
    }
    public readonly ulong4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 1)));
    }
    public readonly ulong4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 2)));
    }
    public readonly ulong4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 2)));
    }
    public readonly ulong4 zyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 3)));
    }
    public readonly ulong4 bgga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 3)));
    }
    public readonly ulong4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 0)));
    }
    public readonly ulong4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 0)));
    }
    public readonly ulong4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 1)));
    }
    public readonly ulong4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 1)));
    }
    public readonly ulong4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 2)));
    }
    public readonly ulong4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 2)));
    }
    public readonly ulong4 zyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 3)));
    }
    public readonly ulong4 bgba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 3)));
    }
    public ulong4 zywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public ulong4 bgar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public readonly ulong4 zywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 1)));
    }
    public readonly ulong4 bgag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 1)));
    }
    public readonly ulong4 zywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 2)));
    }
    public readonly ulong4 bgab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 2)));
    }
    public readonly ulong4 zyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 3)));
    }
    public readonly ulong4 bgaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 3)));
    }
    public readonly ulong4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 0)));
    }
    public readonly ulong4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 0)));
    }
    public readonly ulong4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 1)));
    }
    public readonly ulong4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 1)));
    }
    public readonly ulong4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 2)));
    }
    public readonly ulong4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 2)));
    }
    public readonly ulong4 zzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 3)));
    }
    public readonly ulong4 bbra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 3)));
    }
    public readonly ulong4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 0)));
    }
    public readonly ulong4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 0)));
    }
    public readonly ulong4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 1)));
    }
    public readonly ulong4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 1)));
    }
    public readonly ulong4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 2)));
    }
    public readonly ulong4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 2)));
    }
    public readonly ulong4 zzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 3)));
    }
    public readonly ulong4 bbga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 3)));
    }
    public readonly ulong4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 0)));
    }
    public readonly ulong4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 0)));
    }
    public readonly ulong4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 1)));
    }
    public readonly ulong4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 1)));
    }
    public readonly ulong4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 2)));
    }
    public readonly ulong4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 2)));
    }
    public readonly ulong4 zzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 3)));
    }
    public readonly ulong4 bbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 3)));
    }
    public readonly ulong4 zzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 0)));
    }
    public readonly ulong4 bbar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 0)));
    }
    public readonly ulong4 zzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 1)));
    }
    public readonly ulong4 bbag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 1)));
    }
    public readonly ulong4 zzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 2)));
    }
    public readonly ulong4 bbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 2)));
    }
    public readonly ulong4 zzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 3)));
    }
    public readonly ulong4 bbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 3)));
    }
    public readonly ulong4 zwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 0)));
    }
    public readonly ulong4 barr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 0)));
    }
    public ulong4 zwxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public ulong4 barg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public readonly ulong4 zwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 2)));
    }
    public readonly ulong4 barb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 2)));
    }
    public readonly ulong4 zwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 3)));
    }
    public readonly ulong4 bara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 3)));
    }
    public ulong4 zwyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public ulong4 bagr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public readonly ulong4 zwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 1)));
    }
    public readonly ulong4 bagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 1)));
    }
    public readonly ulong4 zwyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 2)));
    }
    public readonly ulong4 bagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 2)));
    }
    public readonly ulong4 zwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 3)));
    }
    public readonly ulong4 baga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 3)));
    }
    public readonly ulong4 zwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 0)));
    }
    public readonly ulong4 babr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 0)));
    }
    public readonly ulong4 zwzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 1)));
    }
    public readonly ulong4 babg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 1)));
    }
    public readonly ulong4 zwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 2)));
    }
    public readonly ulong4 babb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 2)));
    }
    public readonly ulong4 zwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 3)));
    }
    public readonly ulong4 baba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 3)));
    }
    public readonly ulong4 zwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 0)));
    }
    public readonly ulong4 baar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 0)));
    }
    public readonly ulong4 zwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 1)));
    }
    public readonly ulong4 baag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 1)));
    }
    public readonly ulong4 zwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 2)));
    }
    public readonly ulong4 baab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 2)));
    }
    public readonly ulong4 zwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 3)));
    }
    public readonly ulong4 baaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 3)));
    }
    public readonly ulong4 wxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 0)));
    }
    public readonly ulong4 arrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 0)));
    }
    public readonly ulong4 wxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 1)));
    }
    public readonly ulong4 arrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 1)));
    }
    public readonly ulong4 wxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 2)));
    }
    public readonly ulong4 arrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 2)));
    }
    public readonly ulong4 wxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 3)));
    }
    public readonly ulong4 arra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 3)));
    }
    public readonly ulong4 wxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 0)));
    }
    public readonly ulong4 argr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 0)));
    }
    public readonly ulong4 wxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 1)));
    }
    public readonly ulong4 argg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 1)));
    }
    public ulong4 wxyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public ulong4 argb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public readonly ulong4 wxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 3)));
    }
    public readonly ulong4 arga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 3)));
    }
    public readonly ulong4 wxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 0)));
    }
    public readonly ulong4 arbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 0)));
    }
    public ulong4 wxzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public ulong4 arbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public readonly ulong4 wxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 2)));
    }
    public readonly ulong4 arbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 2)));
    }
    public readonly ulong4 wxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 3)));
    }
    public readonly ulong4 arba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 3)));
    }
    public readonly ulong4 wxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 0)));
    }
    public readonly ulong4 arar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 0)));
    }
    public readonly ulong4 wxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 1)));
    }
    public readonly ulong4 arag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 1)));
    }
    public readonly ulong4 wxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 2)));
    }
    public readonly ulong4 arab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 2)));
    }
    public readonly ulong4 wxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 3)));
    }
    public readonly ulong4 araa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 3)));
    }
    public readonly ulong4 wyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 0)));
    }
    public readonly ulong4 agrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 0)));
    }
    public readonly ulong4 wyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 1)));
    }
    public readonly ulong4 agrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 1)));
    }
    public ulong4 wyxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public ulong4 agrb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public readonly ulong4 wyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 3)));
    }
    public readonly ulong4 agra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 3)));
    }
    public readonly ulong4 wyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 0)));
    }
    public readonly ulong4 aggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 0)));
    }
    public readonly ulong4 wyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 1)));
    }
    public readonly ulong4 aggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 1)));
    }
    public readonly ulong4 wyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 2)));
    }
    public readonly ulong4 aggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 2)));
    }
    public readonly ulong4 wyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 3)));
    }
    public readonly ulong4 agga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 3)));
    }
    public ulong4 wyzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public ulong4 agbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public readonly ulong4 wyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 1)));
    }
    public readonly ulong4 agbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 1)));
    }
    public readonly ulong4 wyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 2)));
    }
    public readonly ulong4 agbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 2)));
    }
    public readonly ulong4 wyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 3)));
    }
    public readonly ulong4 agba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 3)));
    }
    public readonly ulong4 wywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 0)));
    }
    public readonly ulong4 agar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 0)));
    }
    public readonly ulong4 wywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 1)));
    }
    public readonly ulong4 agag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 1)));
    }
    public readonly ulong4 wywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 2)));
    }
    public readonly ulong4 agab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 2)));
    }
    public readonly ulong4 wyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 3)));
    }
    public readonly ulong4 agaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 3)));
    }
    public readonly ulong4 wzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 0)));
    }
    public readonly ulong4 abrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 0)));
    }
    public ulong4 wzxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public ulong4 abrg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public readonly ulong4 wzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 2)));
    }
    public readonly ulong4 abrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 2)));
    }
    public readonly ulong4 wzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 3)));
    }
    public readonly ulong4 abra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 3)));
    }
    public ulong4 wzyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public ulong4 abgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public readonly ulong4 wzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 1)));
    }
    public readonly ulong4 abgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 1)));
    }
    public readonly ulong4 wzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 2)));
    }
    public readonly ulong4 abgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 2)));
    }
    public readonly ulong4 wzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 3)));
    }
    public readonly ulong4 abga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 3)));
    }
    public readonly ulong4 wzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 0)));
    }
    public readonly ulong4 abbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 0)));
    }
    public readonly ulong4 wzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 1)));
    }
    public readonly ulong4 abbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 1)));
    }
    public readonly ulong4 wzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 2)));
    }
    public readonly ulong4 abbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 2)));
    }
    public readonly ulong4 wzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 3)));
    }
    public readonly ulong4 abba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 3)));
    }
    public readonly ulong4 wzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 0)));
    }
    public readonly ulong4 abar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 0)));
    }
    public readonly ulong4 wzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 1)));
    }
    public readonly ulong4 abag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 1)));
    }
    public readonly ulong4 wzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 2)));
    }
    public readonly ulong4 abab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 2)));
    }
    public readonly ulong4 wzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 3)));
    }
    public readonly ulong4 abaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 3)));
    }
    public readonly ulong4 wwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 0)));
    }
    public readonly ulong4 aarr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 0)));
    }
    public readonly ulong4 wwxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 1)));
    }
    public readonly ulong4 aarg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 1)));
    }
    public readonly ulong4 wwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 2)));
    }
    public readonly ulong4 aarb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 2)));
    }
    public readonly ulong4 wwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 3)));
    }
    public readonly ulong4 aara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 3)));
    }
    public readonly ulong4 wwyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 0)));
    }
    public readonly ulong4 aagr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 0)));
    }
    public readonly ulong4 wwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 1)));
    }
    public readonly ulong4 aagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 1)));
    }
    public readonly ulong4 wwyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 2)));
    }
    public readonly ulong4 aagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 2)));
    }
    public readonly ulong4 wwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 3)));
    }
    public readonly ulong4 aaga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 3)));
    }
    public readonly ulong4 wwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 0)));
    }
    public readonly ulong4 aabr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 0)));
    }
    public readonly ulong4 wwzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 1)));
    }
    public readonly ulong4 aabg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 1)));
    }
    public readonly ulong4 wwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 2)));
    }
    public readonly ulong4 aabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 2)));
    }
    public readonly ulong4 wwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 3)));
    }
    public readonly ulong4 aaba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 3)));
    }
    public readonly ulong4 wwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 0)));
    }
    public readonly ulong4 aaar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 0)));
    }
    public readonly ulong4 wwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 1)));
    }
    public readonly ulong4 aaag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 1)));
    }
    public readonly ulong4 wwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 2)));
    }
    public readonly ulong4 aaab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 2)));
    }
    public readonly ulong4 wwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 3)));
    }
    public readonly ulong4 aaaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 3)));
    }
}

#endregion // ulong4

#region decimal4

public partial struct decimal4 
{
    public readonly decimal4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly decimal4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly decimal4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly decimal4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly decimal4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly decimal4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly decimal4 xxxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public readonly decimal4 rrra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public readonly decimal4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly decimal4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly decimal4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly decimal4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly decimal4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly decimal4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly decimal4 xxyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public readonly decimal4 rrga
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public readonly decimal4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly decimal4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly decimal4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly decimal4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly decimal4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly decimal4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly decimal4 xxzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public readonly decimal4 rrba
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public readonly decimal4 xxwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public readonly decimal4 rrar
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public readonly decimal4 xxwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public readonly decimal4 rrag
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public readonly decimal4 xxwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public readonly decimal4 rrab
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public readonly decimal4 xxww
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public readonly decimal4 rraa
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public readonly decimal4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly decimal4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly decimal4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly decimal4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly decimal4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly decimal4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly decimal4 xyxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public readonly decimal4 rgra
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public readonly decimal4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly decimal4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly decimal4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly decimal4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly decimal4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly decimal4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly decimal4 xyyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public readonly decimal4 rgga
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public readonly decimal4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly decimal4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly decimal4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly decimal4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly decimal4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly decimal4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public decimal4 xyzw
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public decimal4 rgba
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly decimal4 xywx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public readonly decimal4 rgar
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public readonly decimal4 xywy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public readonly decimal4 rgag
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public decimal4 xywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public decimal4 rgab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public readonly decimal4 xyww
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public readonly decimal4 rgaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public readonly decimal4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly decimal4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly decimal4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly decimal4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly decimal4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly decimal4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly decimal4 xzxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public readonly decimal4 rbra
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public readonly decimal4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly decimal4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly decimal4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly decimal4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly decimal4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly decimal4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public decimal4 xzyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public decimal4 rbga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public readonly decimal4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly decimal4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly decimal4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly decimal4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly decimal4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly decimal4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly decimal4 xzzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public readonly decimal4 rbba
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public readonly decimal4 xzwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public readonly decimal4 rbar
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public decimal4 xzwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public decimal4 rbag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public readonly decimal4 xzwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public readonly decimal4 rbab
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public readonly decimal4 xzww
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public readonly decimal4 rbaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public readonly decimal4 xwxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public readonly decimal4 rarr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public readonly decimal4 xwxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public readonly decimal4 rarg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public readonly decimal4 xwxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public readonly decimal4 rarb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public readonly decimal4 xwxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public readonly decimal4 rara
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public readonly decimal4 xwyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public readonly decimal4 ragr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public readonly decimal4 xwyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public readonly decimal4 ragg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public decimal4 xwyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public decimal4 ragb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public readonly decimal4 xwyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public readonly decimal4 raga
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public readonly decimal4 xwzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public readonly decimal4 rabr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public decimal4 xwzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public decimal4 rabg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public readonly decimal4 xwzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public readonly decimal4 rabb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public readonly decimal4 xwzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public readonly decimal4 raba
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public readonly decimal4 xwwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public readonly decimal4 raar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public readonly decimal4 xwwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public readonly decimal4 raag
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public readonly decimal4 xwwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public readonly decimal4 raab
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public readonly decimal4 xwww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public readonly decimal4 raaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public readonly decimal4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly decimal4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly decimal4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly decimal4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly decimal4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly decimal4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly decimal4 yxxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public readonly decimal4 grra
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public readonly decimal4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly decimal4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly decimal4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly decimal4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly decimal4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly decimal4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly decimal4 yxyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public readonly decimal4 grga
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public readonly decimal4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly decimal4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly decimal4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly decimal4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly decimal4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly decimal4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public decimal4 yxzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public decimal4 grba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public readonly decimal4 yxwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public readonly decimal4 grar
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public readonly decimal4 yxwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public readonly decimal4 grag
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public decimal4 yxwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public decimal4 grab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public readonly decimal4 yxww
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public readonly decimal4 graa
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public readonly decimal4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly decimal4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly decimal4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly decimal4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly decimal4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly decimal4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly decimal4 yyxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public readonly decimal4 ggra
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public readonly decimal4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly decimal4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly decimal4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly decimal4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly decimal4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly decimal4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly decimal4 yyyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public readonly decimal4 ggga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public readonly decimal4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly decimal4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly decimal4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly decimal4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly decimal4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly decimal4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly decimal4 yyzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public readonly decimal4 ggba
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public readonly decimal4 yywx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public readonly decimal4 ggar
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public readonly decimal4 yywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public readonly decimal4 ggag
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public readonly decimal4 yywz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public readonly decimal4 ggab
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public readonly decimal4 yyww
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public readonly decimal4 ggaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public readonly decimal4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly decimal4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly decimal4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly decimal4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly decimal4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly decimal4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public decimal4 yzxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public decimal4 gbra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public readonly decimal4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly decimal4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly decimal4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly decimal4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly decimal4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly decimal4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly decimal4 yzyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public readonly decimal4 gbga
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public readonly decimal4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly decimal4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly decimal4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly decimal4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly decimal4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly decimal4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly decimal4 yzzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public readonly decimal4 gbba
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public decimal4 yzwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public decimal4 gbar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public readonly decimal4 yzwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public readonly decimal4 gbag
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public readonly decimal4 yzwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public readonly decimal4 gbab
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public readonly decimal4 yzww
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public readonly decimal4 gbaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public readonly decimal4 ywxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public readonly decimal4 garr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public readonly decimal4 ywxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public readonly decimal4 garg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public decimal4 ywxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public decimal4 garb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public readonly decimal4 ywxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public readonly decimal4 gara
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public readonly decimal4 ywyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public readonly decimal4 gagr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public readonly decimal4 ywyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public readonly decimal4 gagg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public readonly decimal4 ywyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public readonly decimal4 gagb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public readonly decimal4 ywyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public readonly decimal4 gaga
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public decimal4 ywzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public decimal4 gabr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public readonly decimal4 ywzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public readonly decimal4 gabg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public readonly decimal4 ywzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public readonly decimal4 gabb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public readonly decimal4 ywzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public readonly decimal4 gaba
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public readonly decimal4 ywwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public readonly decimal4 gaar
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public readonly decimal4 ywwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public readonly decimal4 gaag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public readonly decimal4 ywwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public readonly decimal4 gaab
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public readonly decimal4 ywww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public readonly decimal4 gaaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public readonly decimal4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly decimal4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly decimal4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly decimal4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly decimal4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly decimal4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly decimal4 zxxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public readonly decimal4 brra
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public readonly decimal4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly decimal4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly decimal4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly decimal4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly decimal4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly decimal4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public decimal4 zxyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public decimal4 brga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public readonly decimal4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly decimal4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly decimal4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly decimal4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly decimal4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly decimal4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly decimal4 zxzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public readonly decimal4 brba
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public readonly decimal4 zxwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public readonly decimal4 brar
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public decimal4 zxwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public decimal4 brag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public readonly decimal4 zxwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public readonly decimal4 brab
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public readonly decimal4 zxww
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public readonly decimal4 braa
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public readonly decimal4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly decimal4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly decimal4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly decimal4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly decimal4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly decimal4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public decimal4 zyxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public decimal4 bgra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public readonly decimal4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly decimal4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly decimal4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly decimal4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly decimal4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly decimal4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly decimal4 zyyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public readonly decimal4 bgga
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public readonly decimal4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly decimal4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly decimal4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly decimal4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly decimal4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly decimal4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly decimal4 zyzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public readonly decimal4 bgba
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public decimal4 zywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public decimal4 bgar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public readonly decimal4 zywy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public readonly decimal4 bgag
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public readonly decimal4 zywz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public readonly decimal4 bgab
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public readonly decimal4 zyww
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public readonly decimal4 bgaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public readonly decimal4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly decimal4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly decimal4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly decimal4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly decimal4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly decimal4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly decimal4 zzxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public readonly decimal4 bbra
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public readonly decimal4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly decimal4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly decimal4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly decimal4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly decimal4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly decimal4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly decimal4 zzyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public readonly decimal4 bbga
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public readonly decimal4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly decimal4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly decimal4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly decimal4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly decimal4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly decimal4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly decimal4 zzzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public readonly decimal4 bbba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public readonly decimal4 zzwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public readonly decimal4 bbar
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public readonly decimal4 zzwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public readonly decimal4 bbag
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public readonly decimal4 zzwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public readonly decimal4 bbab
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public readonly decimal4 zzww
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public readonly decimal4 bbaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public readonly decimal4 zwxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public readonly decimal4 barr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public decimal4 zwxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public decimal4 barg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public readonly decimal4 zwxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public readonly decimal4 barb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public readonly decimal4 zwxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public readonly decimal4 bara
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public decimal4 zwyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public decimal4 bagr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public readonly decimal4 zwyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public readonly decimal4 bagg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public readonly decimal4 zwyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public readonly decimal4 bagb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public readonly decimal4 zwyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public readonly decimal4 baga
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public readonly decimal4 zwzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public readonly decimal4 babr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public readonly decimal4 zwzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public readonly decimal4 babg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public readonly decimal4 zwzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public readonly decimal4 babb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public readonly decimal4 zwzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public readonly decimal4 baba
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public readonly decimal4 zwwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public readonly decimal4 baar
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public readonly decimal4 zwwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public readonly decimal4 baag
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public readonly decimal4 zwwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public readonly decimal4 baab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public readonly decimal4 zwww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public readonly decimal4 baaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public readonly decimal4 wxxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public readonly decimal4 arrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public readonly decimal4 wxxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public readonly decimal4 arrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public readonly decimal4 wxxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public readonly decimal4 arrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public readonly decimal4 wxxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public readonly decimal4 arra
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public readonly decimal4 wxyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public readonly decimal4 argr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public readonly decimal4 wxyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public readonly decimal4 argg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public decimal4 wxyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public decimal4 argb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public readonly decimal4 wxyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public readonly decimal4 arga
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public readonly decimal4 wxzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public readonly decimal4 arbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public decimal4 wxzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public decimal4 arbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public readonly decimal4 wxzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public readonly decimal4 arbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public readonly decimal4 wxzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public readonly decimal4 arba
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public readonly decimal4 wxwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public readonly decimal4 arar
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public readonly decimal4 wxwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public readonly decimal4 arag
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public readonly decimal4 wxwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public readonly decimal4 arab
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public readonly decimal4 wxww
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public readonly decimal4 araa
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public readonly decimal4 wyxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public readonly decimal4 agrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public readonly decimal4 wyxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public readonly decimal4 agrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public decimal4 wyxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public decimal4 agrb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public readonly decimal4 wyxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public readonly decimal4 agra
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public readonly decimal4 wyyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public readonly decimal4 aggr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public readonly decimal4 wyyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public readonly decimal4 aggg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public readonly decimal4 wyyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public readonly decimal4 aggb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public readonly decimal4 wyyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public readonly decimal4 agga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public decimal4 wyzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public decimal4 agbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public readonly decimal4 wyzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public readonly decimal4 agbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public readonly decimal4 wyzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public readonly decimal4 agbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public readonly decimal4 wyzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public readonly decimal4 agba
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public readonly decimal4 wywx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public readonly decimal4 agar
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public readonly decimal4 wywy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public readonly decimal4 agag
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public readonly decimal4 wywz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public readonly decimal4 agab
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public readonly decimal4 wyww
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public readonly decimal4 agaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public readonly decimal4 wzxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public readonly decimal4 abrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public decimal4 wzxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public decimal4 abrg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public readonly decimal4 wzxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public readonly decimal4 abrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public readonly decimal4 wzxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public readonly decimal4 abra
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public decimal4 wzyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public decimal4 abgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public readonly decimal4 wzyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public readonly decimal4 abgg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public readonly decimal4 wzyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public readonly decimal4 abgb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public readonly decimal4 wzyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public readonly decimal4 abga
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public readonly decimal4 wzzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public readonly decimal4 abbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public readonly decimal4 wzzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public readonly decimal4 abbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public readonly decimal4 wzzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public readonly decimal4 abbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public readonly decimal4 wzzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public readonly decimal4 abba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public readonly decimal4 wzwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public readonly decimal4 abar
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public readonly decimal4 wzwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public readonly decimal4 abag
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public readonly decimal4 wzwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public readonly decimal4 abab
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public readonly decimal4 wzww
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public readonly decimal4 abaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public readonly decimal4 wwxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public readonly decimal4 aarr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public readonly decimal4 wwxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public readonly decimal4 aarg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public readonly decimal4 wwxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public readonly decimal4 aarb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public readonly decimal4 wwxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public readonly decimal4 aara
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public readonly decimal4 wwyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public readonly decimal4 aagr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public readonly decimal4 wwyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public readonly decimal4 aagg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public readonly decimal4 wwyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public readonly decimal4 aagb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public readonly decimal4 wwyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public readonly decimal4 aaga
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public readonly decimal4 wwzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public readonly decimal4 aabr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public readonly decimal4 wwzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public readonly decimal4 aabg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public readonly decimal4 wwzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public readonly decimal4 aabb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public readonly decimal4 wwzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public readonly decimal4 aaba
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public readonly decimal4 wwwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public readonly decimal4 aaar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public readonly decimal4 wwwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public readonly decimal4 aaag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public readonly decimal4 wwwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public readonly decimal4 aaab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public readonly decimal4 wwww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
    public readonly decimal4 aaaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
}

#endregion // decimal4

#region half4

public partial struct half4 
{
    public readonly half4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly half4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly half4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly half4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly half4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly half4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly half4 xxxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public readonly half4 rrra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public readonly half4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly half4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly half4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly half4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly half4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly half4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly half4 xxyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public readonly half4 rrga
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public readonly half4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly half4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly half4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly half4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly half4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly half4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly half4 xxzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public readonly half4 rrba
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public readonly half4 xxwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public readonly half4 rrar
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public readonly half4 xxwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public readonly half4 rrag
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public readonly half4 xxwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public readonly half4 rrab
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public readonly half4 xxww
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public readonly half4 rraa
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public readonly half4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly half4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly half4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly half4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly half4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly half4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly half4 xyxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public readonly half4 rgra
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public readonly half4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly half4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly half4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly half4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly half4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly half4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly half4 xyyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public readonly half4 rgga
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public readonly half4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly half4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly half4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly half4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly half4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly half4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public half4 xyzw
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public half4 rgba
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly half4 xywx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public readonly half4 rgar
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public readonly half4 xywy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public readonly half4 rgag
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public half4 xywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public half4 rgab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public readonly half4 xyww
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public readonly half4 rgaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public readonly half4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly half4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly half4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly half4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly half4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly half4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly half4 xzxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public readonly half4 rbra
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public readonly half4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly half4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly half4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly half4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly half4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly half4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public half4 xzyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public half4 rbga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public readonly half4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly half4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly half4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly half4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly half4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly half4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly half4 xzzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public readonly half4 rbba
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public readonly half4 xzwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public readonly half4 rbar
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public half4 xzwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public half4 rbag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public readonly half4 xzwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public readonly half4 rbab
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public readonly half4 xzww
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public readonly half4 rbaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public readonly half4 xwxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public readonly half4 rarr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public readonly half4 xwxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public readonly half4 rarg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public readonly half4 xwxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public readonly half4 rarb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public readonly half4 xwxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public readonly half4 rara
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public readonly half4 xwyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public readonly half4 ragr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public readonly half4 xwyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public readonly half4 ragg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public half4 xwyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public half4 ragb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public readonly half4 xwyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public readonly half4 raga
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public readonly half4 xwzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public readonly half4 rabr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public half4 xwzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public half4 rabg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public readonly half4 xwzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public readonly half4 rabb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public readonly half4 xwzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public readonly half4 raba
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public readonly half4 xwwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public readonly half4 raar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public readonly half4 xwwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public readonly half4 raag
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public readonly half4 xwwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public readonly half4 raab
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public readonly half4 xwww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public readonly half4 raaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public readonly half4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly half4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly half4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly half4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly half4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly half4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly half4 yxxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public readonly half4 grra
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public readonly half4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly half4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly half4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly half4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly half4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly half4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly half4 yxyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public readonly half4 grga
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public readonly half4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly half4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly half4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly half4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly half4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly half4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public half4 yxzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public half4 grba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public readonly half4 yxwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public readonly half4 grar
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public readonly half4 yxwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public readonly half4 grag
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public half4 yxwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public half4 grab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public readonly half4 yxww
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public readonly half4 graa
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public readonly half4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly half4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly half4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly half4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly half4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly half4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly half4 yyxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public readonly half4 ggra
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public readonly half4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly half4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly half4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly half4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly half4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly half4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly half4 yyyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public readonly half4 ggga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public readonly half4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly half4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly half4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly half4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly half4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly half4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly half4 yyzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public readonly half4 ggba
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public readonly half4 yywx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public readonly half4 ggar
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public readonly half4 yywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public readonly half4 ggag
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public readonly half4 yywz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public readonly half4 ggab
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public readonly half4 yyww
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public readonly half4 ggaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public readonly half4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly half4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly half4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly half4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly half4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly half4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public half4 yzxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public half4 gbra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public readonly half4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly half4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly half4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly half4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly half4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly half4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly half4 yzyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public readonly half4 gbga
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public readonly half4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly half4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly half4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly half4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly half4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly half4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly half4 yzzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public readonly half4 gbba
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public half4 yzwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public half4 gbar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public readonly half4 yzwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public readonly half4 gbag
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public readonly half4 yzwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public readonly half4 gbab
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public readonly half4 yzww
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public readonly half4 gbaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public readonly half4 ywxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public readonly half4 garr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public readonly half4 ywxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public readonly half4 garg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public half4 ywxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public half4 garb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public readonly half4 ywxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public readonly half4 gara
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public readonly half4 ywyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public readonly half4 gagr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public readonly half4 ywyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public readonly half4 gagg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public readonly half4 ywyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public readonly half4 gagb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public readonly half4 ywyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public readonly half4 gaga
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public half4 ywzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public half4 gabr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public readonly half4 ywzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public readonly half4 gabg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public readonly half4 ywzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public readonly half4 gabb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public readonly half4 ywzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public readonly half4 gaba
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public readonly half4 ywwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public readonly half4 gaar
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public readonly half4 ywwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public readonly half4 gaag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public readonly half4 ywwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public readonly half4 gaab
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public readonly half4 ywww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public readonly half4 gaaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public readonly half4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly half4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly half4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly half4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly half4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly half4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly half4 zxxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public readonly half4 brra
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public readonly half4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly half4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly half4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly half4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly half4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly half4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public half4 zxyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public half4 brga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public readonly half4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly half4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly half4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly half4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly half4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly half4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly half4 zxzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public readonly half4 brba
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public readonly half4 zxwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public readonly half4 brar
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public half4 zxwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public half4 brag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public readonly half4 zxwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public readonly half4 brab
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public readonly half4 zxww
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public readonly half4 braa
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public readonly half4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly half4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly half4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly half4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly half4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly half4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public half4 zyxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public half4 bgra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public readonly half4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly half4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly half4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly half4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly half4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly half4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly half4 zyyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public readonly half4 bgga
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public readonly half4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly half4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly half4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly half4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly half4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly half4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly half4 zyzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public readonly half4 bgba
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public half4 zywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public half4 bgar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public readonly half4 zywy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public readonly half4 bgag
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public readonly half4 zywz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public readonly half4 bgab
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public readonly half4 zyww
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public readonly half4 bgaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public readonly half4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly half4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly half4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly half4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly half4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly half4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly half4 zzxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public readonly half4 bbra
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public readonly half4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly half4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly half4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly half4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly half4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly half4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly half4 zzyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public readonly half4 bbga
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public readonly half4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly half4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly half4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly half4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly half4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly half4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly half4 zzzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public readonly half4 bbba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public readonly half4 zzwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public readonly half4 bbar
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public readonly half4 zzwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public readonly half4 bbag
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public readonly half4 zzwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public readonly half4 bbab
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public readonly half4 zzww
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public readonly half4 bbaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public readonly half4 zwxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public readonly half4 barr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public half4 zwxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public half4 barg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public readonly half4 zwxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public readonly half4 barb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public readonly half4 zwxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public readonly half4 bara
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public half4 zwyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public half4 bagr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public readonly half4 zwyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public readonly half4 bagg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public readonly half4 zwyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public readonly half4 bagb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public readonly half4 zwyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public readonly half4 baga
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public readonly half4 zwzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public readonly half4 babr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public readonly half4 zwzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public readonly half4 babg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public readonly half4 zwzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public readonly half4 babb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public readonly half4 zwzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public readonly half4 baba
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public readonly half4 zwwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public readonly half4 baar
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public readonly half4 zwwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public readonly half4 baag
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public readonly half4 zwwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public readonly half4 baab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public readonly half4 zwww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public readonly half4 baaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public readonly half4 wxxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public readonly half4 arrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public readonly half4 wxxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public readonly half4 arrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public readonly half4 wxxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public readonly half4 arrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public readonly half4 wxxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public readonly half4 arra
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public readonly half4 wxyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public readonly half4 argr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public readonly half4 wxyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public readonly half4 argg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public half4 wxyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public half4 argb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public readonly half4 wxyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public readonly half4 arga
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public readonly half4 wxzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public readonly half4 arbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public half4 wxzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public half4 arbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public readonly half4 wxzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public readonly half4 arbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public readonly half4 wxzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public readonly half4 arba
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public readonly half4 wxwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public readonly half4 arar
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public readonly half4 wxwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public readonly half4 arag
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public readonly half4 wxwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public readonly half4 arab
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public readonly half4 wxww
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public readonly half4 araa
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public readonly half4 wyxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public readonly half4 agrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public readonly half4 wyxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public readonly half4 agrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public half4 wyxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public half4 agrb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public readonly half4 wyxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public readonly half4 agra
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public readonly half4 wyyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public readonly half4 aggr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public readonly half4 wyyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public readonly half4 aggg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public readonly half4 wyyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public readonly half4 aggb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public readonly half4 wyyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public readonly half4 agga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public half4 wyzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public half4 agbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public readonly half4 wyzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public readonly half4 agbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public readonly half4 wyzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public readonly half4 agbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public readonly half4 wyzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public readonly half4 agba
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public readonly half4 wywx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public readonly half4 agar
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public readonly half4 wywy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public readonly half4 agag
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public readonly half4 wywz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public readonly half4 agab
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public readonly half4 wyww
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public readonly half4 agaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public readonly half4 wzxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public readonly half4 abrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public half4 wzxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public half4 abrg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public readonly half4 wzxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public readonly half4 abrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public readonly half4 wzxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public readonly half4 abra
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public half4 wzyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public half4 abgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public readonly half4 wzyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public readonly half4 abgg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public readonly half4 wzyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public readonly half4 abgb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public readonly half4 wzyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public readonly half4 abga
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public readonly half4 wzzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public readonly half4 abbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public readonly half4 wzzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public readonly half4 abbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public readonly half4 wzzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public readonly half4 abbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public readonly half4 wzzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public readonly half4 abba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public readonly half4 wzwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public readonly half4 abar
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public readonly half4 wzwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public readonly half4 abag
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public readonly half4 wzwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public readonly half4 abab
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public readonly half4 wzww
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public readonly half4 abaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public readonly half4 wwxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public readonly half4 aarr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public readonly half4 wwxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public readonly half4 aarg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public readonly half4 wwxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public readonly half4 aarb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public readonly half4 wwxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public readonly half4 aara
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public readonly half4 wwyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public readonly half4 aagr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public readonly half4 wwyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public readonly half4 aagg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public readonly half4 wwyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public readonly half4 aagb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public readonly half4 wwyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public readonly half4 aaga
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public readonly half4 wwzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public readonly half4 aabr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public readonly half4 wwzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public readonly half4 aabg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public readonly half4 wwzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public readonly half4 aabb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public readonly half4 wwzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public readonly half4 aaba
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public readonly half4 wwwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public readonly half4 aaar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public readonly half4 wwwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public readonly half4 aaag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public readonly half4 wwwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public readonly half4 aaab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public readonly half4 wwww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
    public readonly half4 aaaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
}

#endregion // half4

#region b16v4

public partial struct b16v4 
{
    public readonly b16v4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b16v4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b16v4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b16v4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b16v4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b16v4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b16v4 xxxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public readonly b16v4 rrra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public readonly b16v4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b16v4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b16v4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b16v4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b16v4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b16v4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b16v4 xxyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public readonly b16v4 rrga
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public readonly b16v4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b16v4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b16v4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b16v4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b16v4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b16v4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b16v4 xxzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public readonly b16v4 rrba
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public readonly b16v4 xxwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public readonly b16v4 rrar
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public readonly b16v4 xxwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public readonly b16v4 rrag
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public readonly b16v4 xxwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public readonly b16v4 rrab
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public readonly b16v4 xxww
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public readonly b16v4 rraa
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public readonly b16v4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b16v4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b16v4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b16v4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b16v4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b16v4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b16v4 xyxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public readonly b16v4 rgra
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public readonly b16v4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b16v4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b16v4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b16v4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b16v4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b16v4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b16v4 xyyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public readonly b16v4 rgga
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public readonly b16v4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b16v4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b16v4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b16v4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b16v4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b16v4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public b16v4 xyzw
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public b16v4 rgba
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly b16v4 xywx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public readonly b16v4 rgar
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public readonly b16v4 xywy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public readonly b16v4 rgag
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public b16v4 xywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public b16v4 rgab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public readonly b16v4 xyww
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public readonly b16v4 rgaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public readonly b16v4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b16v4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b16v4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b16v4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b16v4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b16v4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b16v4 xzxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public readonly b16v4 rbra
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public readonly b16v4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b16v4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b16v4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b16v4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b16v4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b16v4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public b16v4 xzyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public b16v4 rbga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public readonly b16v4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b16v4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b16v4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b16v4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b16v4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b16v4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b16v4 xzzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public readonly b16v4 rbba
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public readonly b16v4 xzwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public readonly b16v4 rbar
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public b16v4 xzwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public b16v4 rbag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public readonly b16v4 xzwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public readonly b16v4 rbab
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public readonly b16v4 xzww
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public readonly b16v4 rbaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public readonly b16v4 xwxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public readonly b16v4 rarr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public readonly b16v4 xwxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public readonly b16v4 rarg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public readonly b16v4 xwxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public readonly b16v4 rarb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public readonly b16v4 xwxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public readonly b16v4 rara
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public readonly b16v4 xwyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public readonly b16v4 ragr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public readonly b16v4 xwyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public readonly b16v4 ragg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public b16v4 xwyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public b16v4 ragb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public readonly b16v4 xwyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public readonly b16v4 raga
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public readonly b16v4 xwzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public readonly b16v4 rabr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public b16v4 xwzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public b16v4 rabg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public readonly b16v4 xwzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public readonly b16v4 rabb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public readonly b16v4 xwzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public readonly b16v4 raba
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public readonly b16v4 xwwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public readonly b16v4 raar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public readonly b16v4 xwwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public readonly b16v4 raag
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public readonly b16v4 xwwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public readonly b16v4 raab
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public readonly b16v4 xwww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public readonly b16v4 raaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public readonly b16v4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b16v4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b16v4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b16v4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b16v4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b16v4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b16v4 yxxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public readonly b16v4 grra
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public readonly b16v4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b16v4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b16v4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b16v4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b16v4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b16v4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b16v4 yxyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public readonly b16v4 grga
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public readonly b16v4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b16v4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b16v4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b16v4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b16v4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b16v4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public b16v4 yxzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public b16v4 grba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public readonly b16v4 yxwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public readonly b16v4 grar
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public readonly b16v4 yxwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public readonly b16v4 grag
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public b16v4 yxwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public b16v4 grab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public readonly b16v4 yxww
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public readonly b16v4 graa
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public readonly b16v4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b16v4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b16v4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b16v4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b16v4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b16v4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b16v4 yyxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public readonly b16v4 ggra
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public readonly b16v4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b16v4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b16v4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b16v4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b16v4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b16v4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b16v4 yyyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public readonly b16v4 ggga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public readonly b16v4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b16v4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b16v4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b16v4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b16v4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b16v4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b16v4 yyzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public readonly b16v4 ggba
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public readonly b16v4 yywx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public readonly b16v4 ggar
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public readonly b16v4 yywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public readonly b16v4 ggag
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public readonly b16v4 yywz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public readonly b16v4 ggab
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public readonly b16v4 yyww
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public readonly b16v4 ggaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public readonly b16v4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b16v4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b16v4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b16v4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b16v4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b16v4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public b16v4 yzxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public b16v4 gbra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public readonly b16v4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b16v4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b16v4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b16v4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b16v4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b16v4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b16v4 yzyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public readonly b16v4 gbga
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public readonly b16v4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b16v4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b16v4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b16v4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b16v4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b16v4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b16v4 yzzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public readonly b16v4 gbba
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public b16v4 yzwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public b16v4 gbar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public readonly b16v4 yzwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public readonly b16v4 gbag
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public readonly b16v4 yzwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public readonly b16v4 gbab
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public readonly b16v4 yzww
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public readonly b16v4 gbaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public readonly b16v4 ywxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public readonly b16v4 garr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public readonly b16v4 ywxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public readonly b16v4 garg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public b16v4 ywxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public b16v4 garb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public readonly b16v4 ywxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public readonly b16v4 gara
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public readonly b16v4 ywyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public readonly b16v4 gagr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public readonly b16v4 ywyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public readonly b16v4 gagg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public readonly b16v4 ywyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public readonly b16v4 gagb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public readonly b16v4 ywyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public readonly b16v4 gaga
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public b16v4 ywzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public b16v4 gabr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public readonly b16v4 ywzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public readonly b16v4 gabg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public readonly b16v4 ywzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public readonly b16v4 gabb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public readonly b16v4 ywzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public readonly b16v4 gaba
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public readonly b16v4 ywwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public readonly b16v4 gaar
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public readonly b16v4 ywwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public readonly b16v4 gaag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public readonly b16v4 ywwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public readonly b16v4 gaab
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public readonly b16v4 ywww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public readonly b16v4 gaaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public readonly b16v4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b16v4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b16v4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b16v4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b16v4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b16v4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b16v4 zxxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public readonly b16v4 brra
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public readonly b16v4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b16v4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b16v4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b16v4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b16v4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b16v4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public b16v4 zxyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public b16v4 brga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public readonly b16v4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b16v4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b16v4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b16v4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b16v4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b16v4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b16v4 zxzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public readonly b16v4 brba
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public readonly b16v4 zxwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public readonly b16v4 brar
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public b16v4 zxwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public b16v4 brag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public readonly b16v4 zxwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public readonly b16v4 brab
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public readonly b16v4 zxww
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public readonly b16v4 braa
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public readonly b16v4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b16v4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b16v4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b16v4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b16v4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b16v4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public b16v4 zyxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public b16v4 bgra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public readonly b16v4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b16v4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b16v4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b16v4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b16v4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b16v4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b16v4 zyyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public readonly b16v4 bgga
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public readonly b16v4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b16v4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b16v4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b16v4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b16v4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b16v4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b16v4 zyzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public readonly b16v4 bgba
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public b16v4 zywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public b16v4 bgar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public readonly b16v4 zywy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public readonly b16v4 bgag
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public readonly b16v4 zywz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public readonly b16v4 bgab
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public readonly b16v4 zyww
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public readonly b16v4 bgaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public readonly b16v4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b16v4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b16v4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b16v4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b16v4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b16v4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b16v4 zzxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public readonly b16v4 bbra
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public readonly b16v4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b16v4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b16v4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b16v4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b16v4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b16v4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b16v4 zzyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public readonly b16v4 bbga
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public readonly b16v4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b16v4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b16v4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b16v4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b16v4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly b16v4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly b16v4 zzzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public readonly b16v4 bbba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public readonly b16v4 zzwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public readonly b16v4 bbar
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public readonly b16v4 zzwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public readonly b16v4 bbag
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public readonly b16v4 zzwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public readonly b16v4 bbab
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public readonly b16v4 zzww
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public readonly b16v4 bbaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public readonly b16v4 zwxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public readonly b16v4 barr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public b16v4 zwxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public b16v4 barg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public readonly b16v4 zwxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public readonly b16v4 barb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public readonly b16v4 zwxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public readonly b16v4 bara
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public b16v4 zwyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public b16v4 bagr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public readonly b16v4 zwyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public readonly b16v4 bagg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public readonly b16v4 zwyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public readonly b16v4 bagb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public readonly b16v4 zwyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public readonly b16v4 baga
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public readonly b16v4 zwzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public readonly b16v4 babr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public readonly b16v4 zwzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public readonly b16v4 babg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public readonly b16v4 zwzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public readonly b16v4 babb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public readonly b16v4 zwzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public readonly b16v4 baba
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public readonly b16v4 zwwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public readonly b16v4 baar
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public readonly b16v4 zwwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public readonly b16v4 baag
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public readonly b16v4 zwwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public readonly b16v4 baab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public readonly b16v4 zwww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public readonly b16v4 baaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public readonly b16v4 wxxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public readonly b16v4 arrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public readonly b16v4 wxxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public readonly b16v4 arrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public readonly b16v4 wxxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public readonly b16v4 arrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public readonly b16v4 wxxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public readonly b16v4 arra
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public readonly b16v4 wxyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public readonly b16v4 argr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public readonly b16v4 wxyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public readonly b16v4 argg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public b16v4 wxyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public b16v4 argb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public readonly b16v4 wxyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public readonly b16v4 arga
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public readonly b16v4 wxzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public readonly b16v4 arbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public b16v4 wxzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public b16v4 arbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public readonly b16v4 wxzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public readonly b16v4 arbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public readonly b16v4 wxzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public readonly b16v4 arba
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public readonly b16v4 wxwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public readonly b16v4 arar
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public readonly b16v4 wxwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public readonly b16v4 arag
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public readonly b16v4 wxwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public readonly b16v4 arab
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public readonly b16v4 wxww
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public readonly b16v4 araa
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public readonly b16v4 wyxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public readonly b16v4 agrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public readonly b16v4 wyxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public readonly b16v4 agrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public b16v4 wyxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public b16v4 agrb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public readonly b16v4 wyxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public readonly b16v4 agra
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public readonly b16v4 wyyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public readonly b16v4 aggr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public readonly b16v4 wyyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public readonly b16v4 aggg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public readonly b16v4 wyyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public readonly b16v4 aggb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public readonly b16v4 wyyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public readonly b16v4 agga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public b16v4 wyzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public b16v4 agbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public readonly b16v4 wyzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public readonly b16v4 agbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public readonly b16v4 wyzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public readonly b16v4 agbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public readonly b16v4 wyzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public readonly b16v4 agba
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public readonly b16v4 wywx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public readonly b16v4 agar
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public readonly b16v4 wywy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public readonly b16v4 agag
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public readonly b16v4 wywz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public readonly b16v4 agab
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public readonly b16v4 wyww
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public readonly b16v4 agaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public readonly b16v4 wzxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public readonly b16v4 abrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public b16v4 wzxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public b16v4 abrg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public readonly b16v4 wzxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public readonly b16v4 abrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public readonly b16v4 wzxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public readonly b16v4 abra
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public b16v4 wzyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public b16v4 abgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public readonly b16v4 wzyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public readonly b16v4 abgg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public readonly b16v4 wzyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public readonly b16v4 abgb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public readonly b16v4 wzyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public readonly b16v4 abga
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public readonly b16v4 wzzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public readonly b16v4 abbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public readonly b16v4 wzzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public readonly b16v4 abbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public readonly b16v4 wzzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public readonly b16v4 abbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public readonly b16v4 wzzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public readonly b16v4 abba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public readonly b16v4 wzwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public readonly b16v4 abar
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public readonly b16v4 wzwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public readonly b16v4 abag
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public readonly b16v4 wzwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public readonly b16v4 abab
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public readonly b16v4 wzww
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public readonly b16v4 abaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public readonly b16v4 wwxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public readonly b16v4 aarr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public readonly b16v4 wwxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public readonly b16v4 aarg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public readonly b16v4 wwxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public readonly b16v4 aarb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public readonly b16v4 wwxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public readonly b16v4 aara
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public readonly b16v4 wwyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public readonly b16v4 aagr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public readonly b16v4 wwyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public readonly b16v4 aagg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public readonly b16v4 wwyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public readonly b16v4 aagb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public readonly b16v4 wwyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public readonly b16v4 aaga
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public readonly b16v4 wwzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public readonly b16v4 aabr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public readonly b16v4 wwzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public readonly b16v4 aabg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public readonly b16v4 wwzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public readonly b16v4 aabb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public readonly b16v4 wwzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public readonly b16v4 aaba
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public readonly b16v4 wwwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public readonly b16v4 aaar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public readonly b16v4 wwwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public readonly b16v4 aaag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public readonly b16v4 wwwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public readonly b16v4 aaab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public readonly b16v4 wwww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
    public readonly b16v4 aaaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
}

#endregion // b16v4

#region b32v4

public partial struct b32v4 
{
    public readonly b32v4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 0)));
    }
    public readonly b32v4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 0)));
    }
    public readonly b32v4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 1)));
    }
    public readonly b32v4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 1)));
    }
    public readonly b32v4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 2)));
    }
    public readonly b32v4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 2)));
    }
    public readonly b32v4 xxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 3)));
    }
    public readonly b32v4 rrra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 3)));
    }
    public readonly b32v4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 0)));
    }
    public readonly b32v4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 0)));
    }
    public readonly b32v4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 1)));
    }
    public readonly b32v4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 1)));
    }
    public readonly b32v4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 2)));
    }
    public readonly b32v4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 2)));
    }
    public readonly b32v4 xxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 3)));
    }
    public readonly b32v4 rrga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 3)));
    }
    public readonly b32v4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 0)));
    }
    public readonly b32v4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 0)));
    }
    public readonly b32v4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 1)));
    }
    public readonly b32v4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 1)));
    }
    public readonly b32v4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 2)));
    }
    public readonly b32v4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 2)));
    }
    public readonly b32v4 xxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 3)));
    }
    public readonly b32v4 rrba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 3)));
    }
    public readonly b32v4 xxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 0)));
    }
    public readonly b32v4 rrar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 0)));
    }
    public readonly b32v4 xxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 1)));
    }
    public readonly b32v4 rrag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 1)));
    }
    public readonly b32v4 xxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 2)));
    }
    public readonly b32v4 rrab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 2)));
    }
    public readonly b32v4 xxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 3)));
    }
    public readonly b32v4 rraa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 3)));
    }
    public readonly b32v4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 0)));
    }
    public readonly b32v4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 0)));
    }
    public readonly b32v4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 1)));
    }
    public readonly b32v4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 1)));
    }
    public readonly b32v4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 2)));
    }
    public readonly b32v4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 2)));
    }
    public readonly b32v4 xyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 3)));
    }
    public readonly b32v4 rgra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 3)));
    }
    public readonly b32v4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 0)));
    }
    public readonly b32v4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 0)));
    }
    public readonly b32v4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 1)));
    }
    public readonly b32v4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 1)));
    }
    public readonly b32v4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 2)));
    }
    public readonly b32v4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 2)));
    }
    public readonly b32v4 xyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 3)));
    }
    public readonly b32v4 rgga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 3)));
    }
    public readonly b32v4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 0)));
    }
    public readonly b32v4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 0)));
    }
    public readonly b32v4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 1)));
    }
    public readonly b32v4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 1)));
    }
    public readonly b32v4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 2)));
    }
    public readonly b32v4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 2)));
    }
    public b32v4 xyzw
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public b32v4 rgba
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly b32v4 xywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 0)));
    }
    public readonly b32v4 rgar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 0)));
    }
    public readonly b32v4 xywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 1)));
    }
    public readonly b32v4 rgag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 1)));
    }
    public b32v4 xywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public b32v4 rgab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public readonly b32v4 xyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 3)));
    }
    public readonly b32v4 rgaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 3)));
    }
    public readonly b32v4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 0)));
    }
    public readonly b32v4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 0)));
    }
    public readonly b32v4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 1)));
    }
    public readonly b32v4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 1)));
    }
    public readonly b32v4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 2)));
    }
    public readonly b32v4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 2)));
    }
    public readonly b32v4 xzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 3)));
    }
    public readonly b32v4 rbra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 3)));
    }
    public readonly b32v4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 0)));
    }
    public readonly b32v4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 0)));
    }
    public readonly b32v4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 1)));
    }
    public readonly b32v4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 1)));
    }
    public readonly b32v4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 2)));
    }
    public readonly b32v4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 2)));
    }
    public b32v4 xzyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public b32v4 rbga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public readonly b32v4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 0)));
    }
    public readonly b32v4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 0)));
    }
    public readonly b32v4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 1)));
    }
    public readonly b32v4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 1)));
    }
    public readonly b32v4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 2)));
    }
    public readonly b32v4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 2)));
    }
    public readonly b32v4 xzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 3)));
    }
    public readonly b32v4 rbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 3)));
    }
    public readonly b32v4 xzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 0)));
    }
    public readonly b32v4 rbar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 0)));
    }
    public b32v4 xzwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public b32v4 rbag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public readonly b32v4 xzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 2)));
    }
    public readonly b32v4 rbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 2)));
    }
    public readonly b32v4 xzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 3)));
    }
    public readonly b32v4 rbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 3)));
    }
    public readonly b32v4 xwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 0)));
    }
    public readonly b32v4 rarr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 0)));
    }
    public readonly b32v4 xwxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 1)));
    }
    public readonly b32v4 rarg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 1)));
    }
    public readonly b32v4 xwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 2)));
    }
    public readonly b32v4 rarb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 2)));
    }
    public readonly b32v4 xwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 3)));
    }
    public readonly b32v4 rara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 3)));
    }
    public readonly b32v4 xwyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 0)));
    }
    public readonly b32v4 ragr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 0)));
    }
    public readonly b32v4 xwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 1)));
    }
    public readonly b32v4 ragg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 1)));
    }
    public b32v4 xwyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public b32v4 ragb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public readonly b32v4 xwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 3)));
    }
    public readonly b32v4 raga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 3)));
    }
    public readonly b32v4 xwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 0)));
    }
    public readonly b32v4 rabr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 0)));
    }
    public b32v4 xwzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public b32v4 rabg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public readonly b32v4 xwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 2)));
    }
    public readonly b32v4 rabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 2)));
    }
    public readonly b32v4 xwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 3)));
    }
    public readonly b32v4 raba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 3)));
    }
    public readonly b32v4 xwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 0)));
    }
    public readonly b32v4 raar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 0)));
    }
    public readonly b32v4 xwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 1)));
    }
    public readonly b32v4 raag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 1)));
    }
    public readonly b32v4 xwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 2)));
    }
    public readonly b32v4 raab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 2)));
    }
    public readonly b32v4 xwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 3)));
    }
    public readonly b32v4 raaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 3)));
    }
    public readonly b32v4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 0)));
    }
    public readonly b32v4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 0)));
    }
    public readonly b32v4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 1)));
    }
    public readonly b32v4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 1)));
    }
    public readonly b32v4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 2)));
    }
    public readonly b32v4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 2)));
    }
    public readonly b32v4 yxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 3)));
    }
    public readonly b32v4 grra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 3)));
    }
    public readonly b32v4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 0)));
    }
    public readonly b32v4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 0)));
    }
    public readonly b32v4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 1)));
    }
    public readonly b32v4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 1)));
    }
    public readonly b32v4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 2)));
    }
    public readonly b32v4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 2)));
    }
    public readonly b32v4 yxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 3)));
    }
    public readonly b32v4 grga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 3)));
    }
    public readonly b32v4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 0)));
    }
    public readonly b32v4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 0)));
    }
    public readonly b32v4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 1)));
    }
    public readonly b32v4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 1)));
    }
    public readonly b32v4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 2)));
    }
    public readonly b32v4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 2)));
    }
    public b32v4 yxzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public b32v4 grba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public readonly b32v4 yxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 0)));
    }
    public readonly b32v4 grar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 0)));
    }
    public readonly b32v4 yxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 1)));
    }
    public readonly b32v4 grag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 1)));
    }
    public b32v4 yxwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public b32v4 grab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public readonly b32v4 yxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 3)));
    }
    public readonly b32v4 graa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 3)));
    }
    public readonly b32v4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 0)));
    }
    public readonly b32v4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 0)));
    }
    public readonly b32v4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 1)));
    }
    public readonly b32v4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 1)));
    }
    public readonly b32v4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 2)));
    }
    public readonly b32v4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 2)));
    }
    public readonly b32v4 yyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 3)));
    }
    public readonly b32v4 ggra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 3)));
    }
    public readonly b32v4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 0)));
    }
    public readonly b32v4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 0)));
    }
    public readonly b32v4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 1)));
    }
    public readonly b32v4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 1)));
    }
    public readonly b32v4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 2)));
    }
    public readonly b32v4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 2)));
    }
    public readonly b32v4 yyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 3)));
    }
    public readonly b32v4 ggga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 3)));
    }
    public readonly b32v4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 0)));
    }
    public readonly b32v4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 0)));
    }
    public readonly b32v4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 1)));
    }
    public readonly b32v4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 1)));
    }
    public readonly b32v4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 2)));
    }
    public readonly b32v4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 2)));
    }
    public readonly b32v4 yyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 3)));
    }
    public readonly b32v4 ggba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 3)));
    }
    public readonly b32v4 yywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 0)));
    }
    public readonly b32v4 ggar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 0)));
    }
    public readonly b32v4 yywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 1)));
    }
    public readonly b32v4 ggag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 1)));
    }
    public readonly b32v4 yywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 2)));
    }
    public readonly b32v4 ggab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 2)));
    }
    public readonly b32v4 yyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 3)));
    }
    public readonly b32v4 ggaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 3)));
    }
    public readonly b32v4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 0)));
    }
    public readonly b32v4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 0)));
    }
    public readonly b32v4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 1)));
    }
    public readonly b32v4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 1)));
    }
    public readonly b32v4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 2)));
    }
    public readonly b32v4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 2)));
    }
    public b32v4 yzxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public b32v4 gbra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public readonly b32v4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 0)));
    }
    public readonly b32v4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 0)));
    }
    public readonly b32v4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 1)));
    }
    public readonly b32v4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 1)));
    }
    public readonly b32v4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 2)));
    }
    public readonly b32v4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 2)));
    }
    public readonly b32v4 yzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 3)));
    }
    public readonly b32v4 gbga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 3)));
    }
    public readonly b32v4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 0)));
    }
    public readonly b32v4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 0)));
    }
    public readonly b32v4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 1)));
    }
    public readonly b32v4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 1)));
    }
    public readonly b32v4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 2)));
    }
    public readonly b32v4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 2)));
    }
    public readonly b32v4 yzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 3)));
    }
    public readonly b32v4 gbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 3)));
    }
    public b32v4 yzwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public b32v4 gbar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public readonly b32v4 yzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 1)));
    }
    public readonly b32v4 gbag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 1)));
    }
    public readonly b32v4 yzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 2)));
    }
    public readonly b32v4 gbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 2)));
    }
    public readonly b32v4 yzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 3)));
    }
    public readonly b32v4 gbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 3)));
    }
    public readonly b32v4 ywxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 0)));
    }
    public readonly b32v4 garr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 0)));
    }
    public readonly b32v4 ywxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 1)));
    }
    public readonly b32v4 garg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 1)));
    }
    public b32v4 ywxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public b32v4 garb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public readonly b32v4 ywxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 3)));
    }
    public readonly b32v4 gara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 3)));
    }
    public readonly b32v4 ywyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 0)));
    }
    public readonly b32v4 gagr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 0)));
    }
    public readonly b32v4 ywyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 1)));
    }
    public readonly b32v4 gagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 1)));
    }
    public readonly b32v4 ywyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 2)));
    }
    public readonly b32v4 gagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 2)));
    }
    public readonly b32v4 ywyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 3)));
    }
    public readonly b32v4 gaga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 3)));
    }
    public b32v4 ywzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public b32v4 gabr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public readonly b32v4 ywzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 1)));
    }
    public readonly b32v4 gabg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 1)));
    }
    public readonly b32v4 ywzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 2)));
    }
    public readonly b32v4 gabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 2)));
    }
    public readonly b32v4 ywzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 3)));
    }
    public readonly b32v4 gaba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 3)));
    }
    public readonly b32v4 ywwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 0)));
    }
    public readonly b32v4 gaar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 0)));
    }
    public readonly b32v4 ywwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 1)));
    }
    public readonly b32v4 gaag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 1)));
    }
    public readonly b32v4 ywwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 2)));
    }
    public readonly b32v4 gaab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 2)));
    }
    public readonly b32v4 ywww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 3)));
    }
    public readonly b32v4 gaaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 3)));
    }
    public readonly b32v4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 0)));
    }
    public readonly b32v4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 0)));
    }
    public readonly b32v4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 1)));
    }
    public readonly b32v4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 1)));
    }
    public readonly b32v4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 2)));
    }
    public readonly b32v4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 2)));
    }
    public readonly b32v4 zxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 3)));
    }
    public readonly b32v4 brra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 3)));
    }
    public readonly b32v4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 0)));
    }
    public readonly b32v4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 0)));
    }
    public readonly b32v4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 1)));
    }
    public readonly b32v4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 1)));
    }
    public readonly b32v4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 2)));
    }
    public readonly b32v4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 2)));
    }
    public b32v4 zxyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public b32v4 brga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public readonly b32v4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 0)));
    }
    public readonly b32v4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 0)));
    }
    public readonly b32v4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 1)));
    }
    public readonly b32v4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 1)));
    }
    public readonly b32v4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 2)));
    }
    public readonly b32v4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 2)));
    }
    public readonly b32v4 zxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 3)));
    }
    public readonly b32v4 brba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 3)));
    }
    public readonly b32v4 zxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 0)));
    }
    public readonly b32v4 brar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 0)));
    }
    public b32v4 zxwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public b32v4 brag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public readonly b32v4 zxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 2)));
    }
    public readonly b32v4 brab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 2)));
    }
    public readonly b32v4 zxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 3)));
    }
    public readonly b32v4 braa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 3)));
    }
    public readonly b32v4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 0)));
    }
    public readonly b32v4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 0)));
    }
    public readonly b32v4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 1)));
    }
    public readonly b32v4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 1)));
    }
    public readonly b32v4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 2)));
    }
    public readonly b32v4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 2)));
    }
    public b32v4 zyxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public b32v4 bgra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public readonly b32v4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 0)));
    }
    public readonly b32v4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 0)));
    }
    public readonly b32v4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 1)));
    }
    public readonly b32v4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 1)));
    }
    public readonly b32v4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 2)));
    }
    public readonly b32v4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 2)));
    }
    public readonly b32v4 zyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 3)));
    }
    public readonly b32v4 bgga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 3)));
    }
    public readonly b32v4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 0)));
    }
    public readonly b32v4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 0)));
    }
    public readonly b32v4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 1)));
    }
    public readonly b32v4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 1)));
    }
    public readonly b32v4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 2)));
    }
    public readonly b32v4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 2)));
    }
    public readonly b32v4 zyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 3)));
    }
    public readonly b32v4 bgba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 3)));
    }
    public b32v4 zywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public b32v4 bgar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public readonly b32v4 zywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 1)));
    }
    public readonly b32v4 bgag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 1)));
    }
    public readonly b32v4 zywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 2)));
    }
    public readonly b32v4 bgab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 2)));
    }
    public readonly b32v4 zyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 3)));
    }
    public readonly b32v4 bgaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 3)));
    }
    public readonly b32v4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 0)));
    }
    public readonly b32v4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 0)));
    }
    public readonly b32v4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 1)));
    }
    public readonly b32v4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 1)));
    }
    public readonly b32v4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 2)));
    }
    public readonly b32v4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 2)));
    }
    public readonly b32v4 zzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 3)));
    }
    public readonly b32v4 bbra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 3)));
    }
    public readonly b32v4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 0)));
    }
    public readonly b32v4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 0)));
    }
    public readonly b32v4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 1)));
    }
    public readonly b32v4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 1)));
    }
    public readonly b32v4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 2)));
    }
    public readonly b32v4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 2)));
    }
    public readonly b32v4 zzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 3)));
    }
    public readonly b32v4 bbga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 3)));
    }
    public readonly b32v4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 0)));
    }
    public readonly b32v4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 0)));
    }
    public readonly b32v4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 1)));
    }
    public readonly b32v4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 1)));
    }
    public readonly b32v4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 2)));
    }
    public readonly b32v4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 2)));
    }
    public readonly b32v4 zzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 3)));
    }
    public readonly b32v4 bbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 3)));
    }
    public readonly b32v4 zzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 0)));
    }
    public readonly b32v4 bbar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 0)));
    }
    public readonly b32v4 zzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 1)));
    }
    public readonly b32v4 bbag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 1)));
    }
    public readonly b32v4 zzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 2)));
    }
    public readonly b32v4 bbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 2)));
    }
    public readonly b32v4 zzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 3)));
    }
    public readonly b32v4 bbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 3)));
    }
    public readonly b32v4 zwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 0)));
    }
    public readonly b32v4 barr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 0)));
    }
    public b32v4 zwxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public b32v4 barg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public readonly b32v4 zwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 2)));
    }
    public readonly b32v4 barb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 2)));
    }
    public readonly b32v4 zwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 3)));
    }
    public readonly b32v4 bara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 3)));
    }
    public b32v4 zwyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public b32v4 bagr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public readonly b32v4 zwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 1)));
    }
    public readonly b32v4 bagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 1)));
    }
    public readonly b32v4 zwyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 2)));
    }
    public readonly b32v4 bagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 2)));
    }
    public readonly b32v4 zwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 3)));
    }
    public readonly b32v4 baga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 3)));
    }
    public readonly b32v4 zwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 0)));
    }
    public readonly b32v4 babr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 0)));
    }
    public readonly b32v4 zwzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 1)));
    }
    public readonly b32v4 babg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 1)));
    }
    public readonly b32v4 zwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 2)));
    }
    public readonly b32v4 babb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 2)));
    }
    public readonly b32v4 zwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 3)));
    }
    public readonly b32v4 baba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 3)));
    }
    public readonly b32v4 zwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 0)));
    }
    public readonly b32v4 baar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 0)));
    }
    public readonly b32v4 zwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 1)));
    }
    public readonly b32v4 baag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 1)));
    }
    public readonly b32v4 zwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 2)));
    }
    public readonly b32v4 baab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 2)));
    }
    public readonly b32v4 zwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 3)));
    }
    public readonly b32v4 baaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 3)));
    }
    public readonly b32v4 wxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 0)));
    }
    public readonly b32v4 arrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 0)));
    }
    public readonly b32v4 wxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 1)));
    }
    public readonly b32v4 arrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 1)));
    }
    public readonly b32v4 wxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 2)));
    }
    public readonly b32v4 arrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 2)));
    }
    public readonly b32v4 wxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 3)));
    }
    public readonly b32v4 arra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 3)));
    }
    public readonly b32v4 wxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 0)));
    }
    public readonly b32v4 argr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 0)));
    }
    public readonly b32v4 wxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 1)));
    }
    public readonly b32v4 argg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 1)));
    }
    public b32v4 wxyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public b32v4 argb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public readonly b32v4 wxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 3)));
    }
    public readonly b32v4 arga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 3)));
    }
    public readonly b32v4 wxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 0)));
    }
    public readonly b32v4 arbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 0)));
    }
    public b32v4 wxzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public b32v4 arbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public readonly b32v4 wxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 2)));
    }
    public readonly b32v4 arbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 2)));
    }
    public readonly b32v4 wxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 3)));
    }
    public readonly b32v4 arba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 3)));
    }
    public readonly b32v4 wxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 0)));
    }
    public readonly b32v4 arar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 0)));
    }
    public readonly b32v4 wxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 1)));
    }
    public readonly b32v4 arag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 1)));
    }
    public readonly b32v4 wxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 2)));
    }
    public readonly b32v4 arab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 2)));
    }
    public readonly b32v4 wxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 3)));
    }
    public readonly b32v4 araa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 3)));
    }
    public readonly b32v4 wyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 0)));
    }
    public readonly b32v4 agrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 0)));
    }
    public readonly b32v4 wyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 1)));
    }
    public readonly b32v4 agrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 1)));
    }
    public b32v4 wyxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public b32v4 agrb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public readonly b32v4 wyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 3)));
    }
    public readonly b32v4 agra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 3)));
    }
    public readonly b32v4 wyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 0)));
    }
    public readonly b32v4 aggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 0)));
    }
    public readonly b32v4 wyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 1)));
    }
    public readonly b32v4 aggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 1)));
    }
    public readonly b32v4 wyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 2)));
    }
    public readonly b32v4 aggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 2)));
    }
    public readonly b32v4 wyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 3)));
    }
    public readonly b32v4 agga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 3)));
    }
    public b32v4 wyzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public b32v4 agbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public readonly b32v4 wyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 1)));
    }
    public readonly b32v4 agbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 1)));
    }
    public readonly b32v4 wyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 2)));
    }
    public readonly b32v4 agbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 2)));
    }
    public readonly b32v4 wyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 3)));
    }
    public readonly b32v4 agba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 3)));
    }
    public readonly b32v4 wywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 0)));
    }
    public readonly b32v4 agar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 0)));
    }
    public readonly b32v4 wywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 1)));
    }
    public readonly b32v4 agag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 1)));
    }
    public readonly b32v4 wywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 2)));
    }
    public readonly b32v4 agab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 2)));
    }
    public readonly b32v4 wyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 3)));
    }
    public readonly b32v4 agaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 3)));
    }
    public readonly b32v4 wzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 0)));
    }
    public readonly b32v4 abrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 0)));
    }
    public b32v4 wzxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public b32v4 abrg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public readonly b32v4 wzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 2)));
    }
    public readonly b32v4 abrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 2)));
    }
    public readonly b32v4 wzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 3)));
    }
    public readonly b32v4 abra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 3)));
    }
    public b32v4 wzyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public b32v4 abgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public readonly b32v4 wzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 1)));
    }
    public readonly b32v4 abgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 1)));
    }
    public readonly b32v4 wzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 2)));
    }
    public readonly b32v4 abgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 2)));
    }
    public readonly b32v4 wzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 3)));
    }
    public readonly b32v4 abga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 3)));
    }
    public readonly b32v4 wzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 0)));
    }
    public readonly b32v4 abbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 0)));
    }
    public readonly b32v4 wzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 1)));
    }
    public readonly b32v4 abbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 1)));
    }
    public readonly b32v4 wzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 2)));
    }
    public readonly b32v4 abbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 2)));
    }
    public readonly b32v4 wzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 3)));
    }
    public readonly b32v4 abba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 3)));
    }
    public readonly b32v4 wzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 0)));
    }
    public readonly b32v4 abar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 0)));
    }
    public readonly b32v4 wzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 1)));
    }
    public readonly b32v4 abag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 1)));
    }
    public readonly b32v4 wzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 2)));
    }
    public readonly b32v4 abab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 2)));
    }
    public readonly b32v4 wzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 3)));
    }
    public readonly b32v4 abaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 3)));
    }
    public readonly b32v4 wwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 0)));
    }
    public readonly b32v4 aarr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 0)));
    }
    public readonly b32v4 wwxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 1)));
    }
    public readonly b32v4 aarg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 1)));
    }
    public readonly b32v4 wwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 2)));
    }
    public readonly b32v4 aarb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 2)));
    }
    public readonly b32v4 wwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 3)));
    }
    public readonly b32v4 aara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 3)));
    }
    public readonly b32v4 wwyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 0)));
    }
    public readonly b32v4 aagr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 0)));
    }
    public readonly b32v4 wwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 1)));
    }
    public readonly b32v4 aagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 1)));
    }
    public readonly b32v4 wwyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 2)));
    }
    public readonly b32v4 aagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 2)));
    }
    public readonly b32v4 wwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 3)));
    }
    public readonly b32v4 aaga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 3)));
    }
    public readonly b32v4 wwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 0)));
    }
    public readonly b32v4 aabr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 0)));
    }
    public readonly b32v4 wwzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 1)));
    }
    public readonly b32v4 aabg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 1)));
    }
    public readonly b32v4 wwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 2)));
    }
    public readonly b32v4 aabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 2)));
    }
    public readonly b32v4 wwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 3)));
    }
    public readonly b32v4 aaba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 3)));
    }
    public readonly b32v4 wwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 0)));
    }
    public readonly b32v4 aaar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 0)));
    }
    public readonly b32v4 wwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 1)));
    }
    public readonly b32v4 aaag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 1)));
    }
    public readonly b32v4 wwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 2)));
    }
    public readonly b32v4 aaab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 2)));
    }
    public readonly b32v4 wwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 3)));
    }
    public readonly b32v4 aaaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 3)));
    }
}

#endregion // b32v4

#region b64v4

public partial struct b64v4 
{
    public readonly b64v4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 0)));
    }
    public readonly b64v4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 0)));
    }
    public readonly b64v4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 1)));
    }
    public readonly b64v4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 1)));
    }
    public readonly b64v4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 2)));
    }
    public readonly b64v4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 2)));
    }
    public readonly b64v4 xxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 3)));
    }
    public readonly b64v4 rrra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 3)));
    }
    public readonly b64v4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 0)));
    }
    public readonly b64v4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 0)));
    }
    public readonly b64v4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 1)));
    }
    public readonly b64v4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 1)));
    }
    public readonly b64v4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 2)));
    }
    public readonly b64v4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 2)));
    }
    public readonly b64v4 xxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 3)));
    }
    public readonly b64v4 rrga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 3)));
    }
    public readonly b64v4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 0)));
    }
    public readonly b64v4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 0)));
    }
    public readonly b64v4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 1)));
    }
    public readonly b64v4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 1)));
    }
    public readonly b64v4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 2)));
    }
    public readonly b64v4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 2)));
    }
    public readonly b64v4 xxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 3)));
    }
    public readonly b64v4 rrba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 3)));
    }
    public readonly b64v4 xxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 0)));
    }
    public readonly b64v4 rrar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 0)));
    }
    public readonly b64v4 xxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 1)));
    }
    public readonly b64v4 rrag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 1)));
    }
    public readonly b64v4 xxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 2)));
    }
    public readonly b64v4 rrab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 2)));
    }
    public readonly b64v4 xxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 3)));
    }
    public readonly b64v4 rraa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 3)));
    }
    public readonly b64v4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 0)));
    }
    public readonly b64v4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 0)));
    }
    public readonly b64v4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 1)));
    }
    public readonly b64v4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 1)));
    }
    public readonly b64v4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 2)));
    }
    public readonly b64v4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 2)));
    }
    public readonly b64v4 xyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 3)));
    }
    public readonly b64v4 rgra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 3)));
    }
    public readonly b64v4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 0)));
    }
    public readonly b64v4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 0)));
    }
    public readonly b64v4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 1)));
    }
    public readonly b64v4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 1)));
    }
    public readonly b64v4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 2)));
    }
    public readonly b64v4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 2)));
    }
    public readonly b64v4 xyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 3)));
    }
    public readonly b64v4 rgga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 3)));
    }
    public readonly b64v4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 0)));
    }
    public readonly b64v4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 0)));
    }
    public readonly b64v4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 1)));
    }
    public readonly b64v4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 1)));
    }
    public readonly b64v4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 2)));
    }
    public readonly b64v4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 2)));
    }
    public b64v4 xyzw
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public b64v4 rgba
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly b64v4 xywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 0)));
    }
    public readonly b64v4 rgar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 0)));
    }
    public readonly b64v4 xywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 1)));
    }
    public readonly b64v4 rgag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 1)));
    }
    public b64v4 xywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public b64v4 rgab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public readonly b64v4 xyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 3)));
    }
    public readonly b64v4 rgaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 3)));
    }
    public readonly b64v4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 0)));
    }
    public readonly b64v4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 0)));
    }
    public readonly b64v4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 1)));
    }
    public readonly b64v4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 1)));
    }
    public readonly b64v4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 2)));
    }
    public readonly b64v4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 2)));
    }
    public readonly b64v4 xzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 3)));
    }
    public readonly b64v4 rbra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 3)));
    }
    public readonly b64v4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 0)));
    }
    public readonly b64v4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 0)));
    }
    public readonly b64v4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 1)));
    }
    public readonly b64v4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 1)));
    }
    public readonly b64v4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 2)));
    }
    public readonly b64v4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 2)));
    }
    public b64v4 xzyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public b64v4 rbga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public readonly b64v4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 0)));
    }
    public readonly b64v4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 0)));
    }
    public readonly b64v4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 1)));
    }
    public readonly b64v4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 1)));
    }
    public readonly b64v4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 2)));
    }
    public readonly b64v4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 2)));
    }
    public readonly b64v4 xzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 3)));
    }
    public readonly b64v4 rbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 3)));
    }
    public readonly b64v4 xzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 0)));
    }
    public readonly b64v4 rbar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 0)));
    }
    public b64v4 xzwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public b64v4 rbag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public readonly b64v4 xzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 2)));
    }
    public readonly b64v4 rbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 2)));
    }
    public readonly b64v4 xzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 3)));
    }
    public readonly b64v4 rbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 3)));
    }
    public readonly b64v4 xwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 0)));
    }
    public readonly b64v4 rarr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 0)));
    }
    public readonly b64v4 xwxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 1)));
    }
    public readonly b64v4 rarg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 1)));
    }
    public readonly b64v4 xwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 2)));
    }
    public readonly b64v4 rarb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 2)));
    }
    public readonly b64v4 xwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 3)));
    }
    public readonly b64v4 rara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 3)));
    }
    public readonly b64v4 xwyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 0)));
    }
    public readonly b64v4 ragr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 0)));
    }
    public readonly b64v4 xwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 1)));
    }
    public readonly b64v4 ragg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 1)));
    }
    public b64v4 xwyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public b64v4 ragb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public readonly b64v4 xwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 3)));
    }
    public readonly b64v4 raga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 3)));
    }
    public readonly b64v4 xwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 0)));
    }
    public readonly b64v4 rabr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 0)));
    }
    public b64v4 xwzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public b64v4 rabg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public readonly b64v4 xwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 2)));
    }
    public readonly b64v4 rabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 2)));
    }
    public readonly b64v4 xwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 3)));
    }
    public readonly b64v4 raba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 3)));
    }
    public readonly b64v4 xwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 0)));
    }
    public readonly b64v4 raar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 0)));
    }
    public readonly b64v4 xwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 1)));
    }
    public readonly b64v4 raag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 1)));
    }
    public readonly b64v4 xwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 2)));
    }
    public readonly b64v4 raab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 2)));
    }
    public readonly b64v4 xwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 3)));
    }
    public readonly b64v4 raaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 3)));
    }
    public readonly b64v4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 0)));
    }
    public readonly b64v4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 0)));
    }
    public readonly b64v4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 1)));
    }
    public readonly b64v4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 1)));
    }
    public readonly b64v4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 2)));
    }
    public readonly b64v4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 2)));
    }
    public readonly b64v4 yxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 3)));
    }
    public readonly b64v4 grra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 3)));
    }
    public readonly b64v4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 0)));
    }
    public readonly b64v4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 0)));
    }
    public readonly b64v4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 1)));
    }
    public readonly b64v4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 1)));
    }
    public readonly b64v4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 2)));
    }
    public readonly b64v4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 2)));
    }
    public readonly b64v4 yxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 3)));
    }
    public readonly b64v4 grga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 3)));
    }
    public readonly b64v4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 0)));
    }
    public readonly b64v4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 0)));
    }
    public readonly b64v4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 1)));
    }
    public readonly b64v4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 1)));
    }
    public readonly b64v4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 2)));
    }
    public readonly b64v4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 2)));
    }
    public b64v4 yxzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public b64v4 grba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public readonly b64v4 yxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 0)));
    }
    public readonly b64v4 grar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 0)));
    }
    public readonly b64v4 yxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 1)));
    }
    public readonly b64v4 grag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 1)));
    }
    public b64v4 yxwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public b64v4 grab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public readonly b64v4 yxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 3)));
    }
    public readonly b64v4 graa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 3)));
    }
    public readonly b64v4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 0)));
    }
    public readonly b64v4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 0)));
    }
    public readonly b64v4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 1)));
    }
    public readonly b64v4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 1)));
    }
    public readonly b64v4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 2)));
    }
    public readonly b64v4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 2)));
    }
    public readonly b64v4 yyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 3)));
    }
    public readonly b64v4 ggra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 3)));
    }
    public readonly b64v4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 0)));
    }
    public readonly b64v4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 0)));
    }
    public readonly b64v4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 1)));
    }
    public readonly b64v4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 1)));
    }
    public readonly b64v4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 2)));
    }
    public readonly b64v4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 2)));
    }
    public readonly b64v4 yyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 3)));
    }
    public readonly b64v4 ggga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 3)));
    }
    public readonly b64v4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 0)));
    }
    public readonly b64v4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 0)));
    }
    public readonly b64v4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 1)));
    }
    public readonly b64v4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 1)));
    }
    public readonly b64v4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 2)));
    }
    public readonly b64v4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 2)));
    }
    public readonly b64v4 yyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 3)));
    }
    public readonly b64v4 ggba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 3)));
    }
    public readonly b64v4 yywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 0)));
    }
    public readonly b64v4 ggar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 0)));
    }
    public readonly b64v4 yywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 1)));
    }
    public readonly b64v4 ggag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 1)));
    }
    public readonly b64v4 yywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 2)));
    }
    public readonly b64v4 ggab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 2)));
    }
    public readonly b64v4 yyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 3)));
    }
    public readonly b64v4 ggaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 3)));
    }
    public readonly b64v4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 0)));
    }
    public readonly b64v4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 0)));
    }
    public readonly b64v4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 1)));
    }
    public readonly b64v4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 1)));
    }
    public readonly b64v4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 2)));
    }
    public readonly b64v4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 2)));
    }
    public b64v4 yzxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public b64v4 gbra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public readonly b64v4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 0)));
    }
    public readonly b64v4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 0)));
    }
    public readonly b64v4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 1)));
    }
    public readonly b64v4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 1)));
    }
    public readonly b64v4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 2)));
    }
    public readonly b64v4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 2)));
    }
    public readonly b64v4 yzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 3)));
    }
    public readonly b64v4 gbga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 3)));
    }
    public readonly b64v4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 0)));
    }
    public readonly b64v4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 0)));
    }
    public readonly b64v4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 1)));
    }
    public readonly b64v4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 1)));
    }
    public readonly b64v4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 2)));
    }
    public readonly b64v4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 2)));
    }
    public readonly b64v4 yzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 3)));
    }
    public readonly b64v4 gbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 3)));
    }
    public b64v4 yzwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public b64v4 gbar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public readonly b64v4 yzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 1)));
    }
    public readonly b64v4 gbag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 1)));
    }
    public readonly b64v4 yzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 2)));
    }
    public readonly b64v4 gbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 2)));
    }
    public readonly b64v4 yzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 3)));
    }
    public readonly b64v4 gbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 3)));
    }
    public readonly b64v4 ywxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 0)));
    }
    public readonly b64v4 garr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 0)));
    }
    public readonly b64v4 ywxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 1)));
    }
    public readonly b64v4 garg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 1)));
    }
    public b64v4 ywxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public b64v4 garb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public readonly b64v4 ywxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 3)));
    }
    public readonly b64v4 gara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 3)));
    }
    public readonly b64v4 ywyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 0)));
    }
    public readonly b64v4 gagr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 0)));
    }
    public readonly b64v4 ywyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 1)));
    }
    public readonly b64v4 gagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 1)));
    }
    public readonly b64v4 ywyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 2)));
    }
    public readonly b64v4 gagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 2)));
    }
    public readonly b64v4 ywyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 3)));
    }
    public readonly b64v4 gaga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 3)));
    }
    public b64v4 ywzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public b64v4 gabr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public readonly b64v4 ywzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 1)));
    }
    public readonly b64v4 gabg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 1)));
    }
    public readonly b64v4 ywzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 2)));
    }
    public readonly b64v4 gabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 2)));
    }
    public readonly b64v4 ywzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 3)));
    }
    public readonly b64v4 gaba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 3)));
    }
    public readonly b64v4 ywwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 0)));
    }
    public readonly b64v4 gaar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 0)));
    }
    public readonly b64v4 ywwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 1)));
    }
    public readonly b64v4 gaag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 1)));
    }
    public readonly b64v4 ywwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 2)));
    }
    public readonly b64v4 gaab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 2)));
    }
    public readonly b64v4 ywww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 3)));
    }
    public readonly b64v4 gaaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 3)));
    }
    public readonly b64v4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 0)));
    }
    public readonly b64v4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 0)));
    }
    public readonly b64v4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 1)));
    }
    public readonly b64v4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 1)));
    }
    public readonly b64v4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 2)));
    }
    public readonly b64v4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 2)));
    }
    public readonly b64v4 zxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 3)));
    }
    public readonly b64v4 brra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 3)));
    }
    public readonly b64v4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 0)));
    }
    public readonly b64v4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 0)));
    }
    public readonly b64v4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 1)));
    }
    public readonly b64v4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 1)));
    }
    public readonly b64v4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 2)));
    }
    public readonly b64v4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 2)));
    }
    public b64v4 zxyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public b64v4 brga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public readonly b64v4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 0)));
    }
    public readonly b64v4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 0)));
    }
    public readonly b64v4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 1)));
    }
    public readonly b64v4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 1)));
    }
    public readonly b64v4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 2)));
    }
    public readonly b64v4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 2)));
    }
    public readonly b64v4 zxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 3)));
    }
    public readonly b64v4 brba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 3)));
    }
    public readonly b64v4 zxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 0)));
    }
    public readonly b64v4 brar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 0)));
    }
    public b64v4 zxwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public b64v4 brag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public readonly b64v4 zxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 2)));
    }
    public readonly b64v4 brab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 2)));
    }
    public readonly b64v4 zxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 3)));
    }
    public readonly b64v4 braa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 3)));
    }
    public readonly b64v4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 0)));
    }
    public readonly b64v4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 0)));
    }
    public readonly b64v4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 1)));
    }
    public readonly b64v4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 1)));
    }
    public readonly b64v4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 2)));
    }
    public readonly b64v4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 2)));
    }
    public b64v4 zyxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public b64v4 bgra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 3)));
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public readonly b64v4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 0)));
    }
    public readonly b64v4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 0)));
    }
    public readonly b64v4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 1)));
    }
    public readonly b64v4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 1)));
    }
    public readonly b64v4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 2)));
    }
    public readonly b64v4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 2)));
    }
    public readonly b64v4 zyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 3)));
    }
    public readonly b64v4 bgga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 3)));
    }
    public readonly b64v4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 0)));
    }
    public readonly b64v4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 0)));
    }
    public readonly b64v4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 1)));
    }
    public readonly b64v4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 1)));
    }
    public readonly b64v4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 2)));
    }
    public readonly b64v4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 2)));
    }
    public readonly b64v4 zyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 3)));
    }
    public readonly b64v4 bgba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 3)));
    }
    public b64v4 zywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public b64v4 bgar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public readonly b64v4 zywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 1)));
    }
    public readonly b64v4 bgag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 1)));
    }
    public readonly b64v4 zywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 2)));
    }
    public readonly b64v4 bgab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 2)));
    }
    public readonly b64v4 zyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 3)));
    }
    public readonly b64v4 bgaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 3)));
    }
    public readonly b64v4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 0)));
    }
    public readonly b64v4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 0)));
    }
    public readonly b64v4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 1)));
    }
    public readonly b64v4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 1)));
    }
    public readonly b64v4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 2)));
    }
    public readonly b64v4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 2)));
    }
    public readonly b64v4 zzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 3)));
    }
    public readonly b64v4 bbra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 3)));
    }
    public readonly b64v4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 0)));
    }
    public readonly b64v4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 0)));
    }
    public readonly b64v4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 1)));
    }
    public readonly b64v4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 1)));
    }
    public readonly b64v4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 2)));
    }
    public readonly b64v4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 2)));
    }
    public readonly b64v4 zzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 3)));
    }
    public readonly b64v4 bbga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 3)));
    }
    public readonly b64v4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 0)));
    }
    public readonly b64v4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 0)));
    }
    public readonly b64v4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 1)));
    }
    public readonly b64v4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 1)));
    }
    public readonly b64v4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 2)));
    }
    public readonly b64v4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 2)));
    }
    public readonly b64v4 zzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 3)));
    }
    public readonly b64v4 bbba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 3)));
    }
    public readonly b64v4 zzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 0)));
    }
    public readonly b64v4 bbar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 0)));
    }
    public readonly b64v4 zzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 1)));
    }
    public readonly b64v4 bbag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 1)));
    }
    public readonly b64v4 zzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 2)));
    }
    public readonly b64v4 bbab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 2)));
    }
    public readonly b64v4 zzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 3)));
    }
    public readonly b64v4 bbaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 3)));
    }
    public readonly b64v4 zwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 0)));
    }
    public readonly b64v4 barr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 0)));
    }
    public b64v4 zwxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public b64v4 barg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public readonly b64v4 zwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 2)));
    }
    public readonly b64v4 barb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 2)));
    }
    public readonly b64v4 zwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 3)));
    }
    public readonly b64v4 bara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 3)));
    }
    public b64v4 zwyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public b64v4 bagr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public readonly b64v4 zwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 1)));
    }
    public readonly b64v4 bagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 1)));
    }
    public readonly b64v4 zwyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 2)));
    }
    public readonly b64v4 bagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 2)));
    }
    public readonly b64v4 zwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 3)));
    }
    public readonly b64v4 baga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 3)));
    }
    public readonly b64v4 zwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 0)));
    }
    public readonly b64v4 babr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 0)));
    }
    public readonly b64v4 zwzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 1)));
    }
    public readonly b64v4 babg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 1)));
    }
    public readonly b64v4 zwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 2)));
    }
    public readonly b64v4 babb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 2)));
    }
    public readonly b64v4 zwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 3)));
    }
    public readonly b64v4 baba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 3)));
    }
    public readonly b64v4 zwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 0)));
    }
    public readonly b64v4 baar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 0)));
    }
    public readonly b64v4 zwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 1)));
    }
    public readonly b64v4 baag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 1)));
    }
    public readonly b64v4 zwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 2)));
    }
    public readonly b64v4 baab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 2)));
    }
    public readonly b64v4 zwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 3)));
    }
    public readonly b64v4 baaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 3)));
    }
    public readonly b64v4 wxxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 0)));
    }
    public readonly b64v4 arrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 0)));
    }
    public readonly b64v4 wxxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 1)));
    }
    public readonly b64v4 arrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 1)));
    }
    public readonly b64v4 wxxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 2)));
    }
    public readonly b64v4 arrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 2)));
    }
    public readonly b64v4 wxxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 3)));
    }
    public readonly b64v4 arra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 3)));
    }
    public readonly b64v4 wxyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 0)));
    }
    public readonly b64v4 argr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 0)));
    }
    public readonly b64v4 wxyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 1)));
    }
    public readonly b64v4 argg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 1)));
    }
    public b64v4 wxyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public b64v4 argb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public readonly b64v4 wxyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 3)));
    }
    public readonly b64v4 arga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 3)));
    }
    public readonly b64v4 wxzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 0)));
    }
    public readonly b64v4 arbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 0)));
    }
    public b64v4 wxzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public b64v4 arbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public readonly b64v4 wxzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 2)));
    }
    public readonly b64v4 arbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 2)));
    }
    public readonly b64v4 wxzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 3)));
    }
    public readonly b64v4 arba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 3)));
    }
    public readonly b64v4 wxwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 0)));
    }
    public readonly b64v4 arar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 0)));
    }
    public readonly b64v4 wxwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 1)));
    }
    public readonly b64v4 arag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 1)));
    }
    public readonly b64v4 wxwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 2)));
    }
    public readonly b64v4 arab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 2)));
    }
    public readonly b64v4 wxww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 3)));
    }
    public readonly b64v4 araa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 3)));
    }
    public readonly b64v4 wyxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 0)));
    }
    public readonly b64v4 agrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 0)));
    }
    public readonly b64v4 wyxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 1)));
    }
    public readonly b64v4 agrg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 1)));
    }
    public b64v4 wyxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public b64v4 agrb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 2)));
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public readonly b64v4 wyxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 3)));
    }
    public readonly b64v4 agra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 3)));
    }
    public readonly b64v4 wyyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 0)));
    }
    public readonly b64v4 aggr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 0)));
    }
    public readonly b64v4 wyyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 1)));
    }
    public readonly b64v4 aggg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 1)));
    }
    public readonly b64v4 wyyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 2)));
    }
    public readonly b64v4 aggb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 2)));
    }
    public readonly b64v4 wyyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 3)));
    }
    public readonly b64v4 agga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 3)));
    }
    public b64v4 wyzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public b64v4 agbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public readonly b64v4 wyzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 1)));
    }
    public readonly b64v4 agbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 1)));
    }
    public readonly b64v4 wyzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 2)));
    }
    public readonly b64v4 agbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 2)));
    }
    public readonly b64v4 wyzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 3)));
    }
    public readonly b64v4 agba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 3)));
    }
    public readonly b64v4 wywx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 0)));
    }
    public readonly b64v4 agar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 0)));
    }
    public readonly b64v4 wywy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 1)));
    }
    public readonly b64v4 agag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 1)));
    }
    public readonly b64v4 wywz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 2)));
    }
    public readonly b64v4 agab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 2)));
    }
    public readonly b64v4 wyww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 3)));
    }
    public readonly b64v4 agaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 3)));
    }
    public readonly b64v4 wzxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 0)));
    }
    public readonly b64v4 abrr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 0)));
    }
    public b64v4 wzxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public b64v4 abrg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 1)));
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public readonly b64v4 wzxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 2)));
    }
    public readonly b64v4 abrb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 2)));
    }
    public readonly b64v4 wzxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 3)));
    }
    public readonly b64v4 abra
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 3)));
    }
    public b64v4 wzyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public b64v4 abgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 0)));
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public readonly b64v4 wzyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 1)));
    }
    public readonly b64v4 abgg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 1)));
    }
    public readonly b64v4 wzyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 2)));
    }
    public readonly b64v4 abgb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 2)));
    }
    public readonly b64v4 wzyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 3)));
    }
    public readonly b64v4 abga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 3)));
    }
    public readonly b64v4 wzzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 0)));
    }
    public readonly b64v4 abbr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 0)));
    }
    public readonly b64v4 wzzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 1)));
    }
    public readonly b64v4 abbg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 1)));
    }
    public readonly b64v4 wzzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 2)));
    }
    public readonly b64v4 abbb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 2)));
    }
    public readonly b64v4 wzzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 3)));
    }
    public readonly b64v4 abba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 3)));
    }
    public readonly b64v4 wzwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 0)));
    }
    public readonly b64v4 abar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 0)));
    }
    public readonly b64v4 wzwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 1)));
    }
    public readonly b64v4 abag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 1)));
    }
    public readonly b64v4 wzwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 2)));
    }
    public readonly b64v4 abab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 2)));
    }
    public readonly b64v4 wzww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 3)));
    }
    public readonly b64v4 abaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 3)));
    }
    public readonly b64v4 wwxx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 0)));
    }
    public readonly b64v4 aarr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 0)));
    }
    public readonly b64v4 wwxy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 1)));
    }
    public readonly b64v4 aarg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 1)));
    }
    public readonly b64v4 wwxz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 2)));
    }
    public readonly b64v4 aarb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 2)));
    }
    public readonly b64v4 wwxw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 3)));
    }
    public readonly b64v4 aara
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 3)));
    }
    public readonly b64v4 wwyx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 0)));
    }
    public readonly b64v4 aagr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 0)));
    }
    public readonly b64v4 wwyy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 1)));
    }
    public readonly b64v4 aagg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 1)));
    }
    public readonly b64v4 wwyz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 2)));
    }
    public readonly b64v4 aagb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 2)));
    }
    public readonly b64v4 wwyw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 3)));
    }
    public readonly b64v4 aaga
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 3)));
    }
    public readonly b64v4 wwzx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 0)));
    }
    public readonly b64v4 aabr
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 0)));
    }
    public readonly b64v4 wwzy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 1)));
    }
    public readonly b64v4 aabg
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 1)));
    }
    public readonly b64v4 wwzz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 2)));
    }
    public readonly b64v4 aabb
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 2)));
    }
    public readonly b64v4 wwzw
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 3)));
    }
    public readonly b64v4 aaba
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 3)));
    }
    public readonly b64v4 wwwx
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 0)));
    }
    public readonly b64v4 aaar
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 0)));
    }
    public readonly b64v4 wwwy
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 1)));
    }
    public readonly b64v4 aaag
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 1)));
    }
    public readonly b64v4 wwwz
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 2)));
    }
    public readonly b64v4 aaab
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 2)));
    }
    public readonly b64v4 wwww
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 3)));
    }
    public readonly b64v4 aaaa
    {
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 3)));
    }
}

#endregion // b64v4
