<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    int[] a01 = [0,1];
    var car_pd_2 = (
        from a in a01.AsParallel().AsOrdered()
        from b in a01.AsParallel().AsOrdered()
        select (a, b)
        ).ToList();
    foreach (var typ in Typ.Typs)
    {
        var byteSize2 = typ.size * 2;
        var bitSize2 = 8 * byteSize2;

        var typeName = $"{typ.name}2";
#>

#region <#= typeName #>

public partial struct <#= typeName #> 
{
<#
        foreach (var (a, b) in car_pd_2)
        {
            var xyzw = $"{Typ.xyzw[a]}{Typ.xyzw[b]}";
            var rgba = $"{Typ.rgba[a]}{Typ.rgba[b]}";
            var ordered = a == 0 && b == 1;
            var no_overlap = a != b;
            for (var t = 0; t < 2; t++)
            {
#>
    public <#= no_overlap ? "" : "readonly " #><#= typeName #> <#= t == 0 ? xyzw : rgba #>
    {
<#
                if (ordered)
                {
#>
        [MethodImpl(256 | 512)]
        <#= no_overlap ? "readonly " : "" #>get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
<#
                }
                else
                {
                    if (typ.simd)
                    {
#>
        [MethodImpl(256 | 512)]
        <#= no_overlap ? "readonly " : "" #>get
        {
            if (Vector<#= bitSize2 #>.IsHardwareAccelerated)
                return new(Vector<#= bitSize2 #>.Shuffle(vector, Vector<#= bitSize2 #>.Create(<#= typ.shuffleCast #><#= a #>, <#= b #>)));
            else 
                return new(<#= Typ.xyzw[a] #>, <#= Typ.xyzw[b] #>);
        }
<#
                    }
                    else
                    {
#>
        [MethodImpl(256 | 512)]
        <#= no_overlap ? "readonly " : "" #>get => new(<#= Typ.xyzw[a] #>, <#= Typ.xyzw[b] #>);
<#
                    }
                    if (no_overlap)
                    {
#>
        [MethodImpl(256 | 512)]
        set => this = value.<#= Typ.xyzw[a] #><#= Typ.xyzw[b] #>;
<#
                    }
                }
#>
    }
<#
            }
        }
#>
}

#endregion // <#= typeName #>
<#
    }
#>
