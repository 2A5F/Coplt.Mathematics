<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    int[] a012 = [0,1,2];
    var car_pd_3 = (
        from a in a012.AsParallel().AsOrdered()
        from b in a012.AsParallel().AsOrdered()
        from c in a012.AsParallel().AsOrdered()
        select (a, b, c)
        ).ToList();
    foreach (var typ in Typ.Typs)
    {
        var byteSize3 = typ.size * 4;
        var bitSize3 = 8 * byteSize3;

        var typeName = $"{typ.name}3";
#>

#region <#= typeName #>

public partial struct <#= typeName #> 
{
<#
        foreach (var tuple in car_pd_3)
        {
            var (a, b, c) = tuple;
            int[] inv = [0,0,0];
            inv[b] = 1;
            inv[c] = 2;

            var xyzw = $"{Typ.xyzw[a]}{Typ.xyzw[b]}{Typ.xyzw[c]}";
            var rgba = $"{Typ.rgba[a]}{Typ.rgba[b]}{Typ.rgba[c]}";
            var ordered = a == 0 && b == 1 && c == 2;
            var no_overlap = a != b && b != c && c != a;
            for (var t = 0; t < 2; t++)
            {
#>
    public <#= typeName #> <#= t == 0 ? xyzw : rgba #>
    {
<#
                if (ordered)
                {
#>
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
<#
                }
                else
                {
                    if (typ.simd)
                    {
                        WriteLine("#if NET8_0_OR_GREATER");
#>
        [MethodImpl(256 | 512)]
        get => new(Vector<#= bitSize3 #>.Shuffle(vector, Vector<#= bitSize3 #>.Create(<#= typ.shuffleCast #><#= a #>, <#= b #>, <#= c #>, 3)));
<#
                        WriteLine("#else // NET8_0_OR_GREATER");
                    }
#>
        [MethodImpl(256 | 512)]
        get => new(<#= Typ.xyzw[a] #>, <#= Typ.xyzw[b] #>, <#= Typ.xyzw[c] #>);
<#
                    if (typ.simd) WriteLine("#endif // NET8_0_OR_GREATER");
                    if (no_overlap)
                    {
#>
        [MethodImpl(256 | 512)]
        set => this = value.<#= Typ.xyzw[inv[0]] #><#= Typ.xyzw[inv[1]] #><#= Typ.xyzw[inv[2]] #>;
<#
                    }
                }
#>
    }
<#
            }
        }
#>
}

#endregion // <#= typeName #>
<#
    }
#>
