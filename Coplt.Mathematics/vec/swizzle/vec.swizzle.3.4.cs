// generated by template, do not modify manually

namespace Coplt.Mathematics;

#region float3

public partial struct float3 
{
    public readonly float4 xxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
            else
                return new(x, x, x, x);
        }
    }
    public readonly float4 rrrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
            else
                return new(x, x, x, x);
        }
    }
    public readonly float4 xxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
            else
                return new(x, x, x, y);
        }
    }
    public readonly float4 rrrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
            else
                return new(x, x, x, y);
        }
    }
    public readonly float4 xxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
            else
                return new(x, x, x, z);
        }
    }
    public readonly float4 rrrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
            else
                return new(x, x, x, z);
        }
    }
    public readonly float4 xxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
            else
                return new(x, x, y, x);
        }
    }
    public readonly float4 rrgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
            else
                return new(x, x, y, x);
        }
    }
    public readonly float4 xxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
            else
                return new(x, x, y, y);
        }
    }
    public readonly float4 rrgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
            else
                return new(x, x, y, y);
        }
    }
    public readonly float4 xxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
            else
                return new(x, x, y, z);
        }
    }
    public readonly float4 rrgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
            else
                return new(x, x, y, z);
        }
    }
    public readonly float4 xxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
            else
                return new(x, x, z, x);
        }
    }
    public readonly float4 rrbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
            else
                return new(x, x, z, x);
        }
    }
    public readonly float4 xxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
            else
                return new(x, x, z, y);
        }
    }
    public readonly float4 rrbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
            else
                return new(x, x, z, y);
        }
    }
    public readonly float4 xxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
            else
                return new(x, x, z, z);
        }
    }
    public readonly float4 rrbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
            else
                return new(x, x, z, z);
        }
    }
    public readonly float4 xyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
            else
                return new(x, y, x, x);
        }
    }
    public readonly float4 rgrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
            else
                return new(x, y, x, x);
        }
    }
    public readonly float4 xyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
            else
                return new(x, y, x, y);
        }
    }
    public readonly float4 rgrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
            else
                return new(x, y, x, y);
        }
    }
    public readonly float4 xyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
            else
                return new(x, y, x, z);
        }
    }
    public readonly float4 rgrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
            else
                return new(x, y, x, z);
        }
    }
    public readonly float4 xyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
            else
                return new(x, y, y, x);
        }
    }
    public readonly float4 rggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
            else
                return new(x, y, y, x);
        }
    }
    public readonly float4 xyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
            else
                return new(x, y, y, y);
        }
    }
    public readonly float4 rggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
            else
                return new(x, y, y, y);
        }
    }
    public readonly float4 xyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
            else
                return new(x, y, y, z);
        }
    }
    public readonly float4 rggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
            else
                return new(x, y, y, z);
        }
    }
    public readonly float4 xyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
            else
                return new(x, y, z, x);
        }
    }
    public readonly float4 rgbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
            else
                return new(x, y, z, x);
        }
    }
    public readonly float4 xyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
            else
                return new(x, y, z, y);
        }
    }
    public readonly float4 rgbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
            else
                return new(x, y, z, y);
        }
    }
    public readonly float4 xyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
            else
                return new(x, y, z, z);
        }
    }
    public readonly float4 rgbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
            else
                return new(x, y, z, z);
        }
    }
    public readonly float4 xzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
            else
                return new(x, z, x, x);
        }
    }
    public readonly float4 rbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
            else
                return new(x, z, x, x);
        }
    }
    public readonly float4 xzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
            else
                return new(x, z, x, y);
        }
    }
    public readonly float4 rbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
            else
                return new(x, z, x, y);
        }
    }
    public readonly float4 xzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
            else
                return new(x, z, x, z);
        }
    }
    public readonly float4 rbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
            else
                return new(x, z, x, z);
        }
    }
    public readonly float4 xzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
            else
                return new(x, z, y, x);
        }
    }
    public readonly float4 rbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
            else
                return new(x, z, y, x);
        }
    }
    public readonly float4 xzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
            else
                return new(x, z, y, y);
        }
    }
    public readonly float4 rbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
            else
                return new(x, z, y, y);
        }
    }
    public readonly float4 xzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
            else
                return new(x, z, y, z);
        }
    }
    public readonly float4 rbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
            else
                return new(x, z, y, z);
        }
    }
    public readonly float4 xzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
            else
                return new(x, z, z, x);
        }
    }
    public readonly float4 rbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
            else
                return new(x, z, z, x);
        }
    }
    public readonly float4 xzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
            else
                return new(x, z, z, y);
        }
    }
    public readonly float4 rbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
            else
                return new(x, z, z, y);
        }
    }
    public readonly float4 xzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
            else
                return new(x, z, z, z);
        }
    }
    public readonly float4 rbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
            else
                return new(x, z, z, z);
        }
    }
    public readonly float4 yxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
            else
                return new(y, x, x, x);
        }
    }
    public readonly float4 grrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
            else
                return new(y, x, x, x);
        }
    }
    public readonly float4 yxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
            else
                return new(y, x, x, y);
        }
    }
    public readonly float4 grrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
            else
                return new(y, x, x, y);
        }
    }
    public readonly float4 yxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
            else
                return new(y, x, x, z);
        }
    }
    public readonly float4 grrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
            else
                return new(y, x, x, z);
        }
    }
    public readonly float4 yxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
            else
                return new(y, x, y, x);
        }
    }
    public readonly float4 grgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
            else
                return new(y, x, y, x);
        }
    }
    public readonly float4 yxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
            else
                return new(y, x, y, y);
        }
    }
    public readonly float4 grgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
            else
                return new(y, x, y, y);
        }
    }
    public readonly float4 yxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
            else
                return new(y, x, y, z);
        }
    }
    public readonly float4 grgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
            else
                return new(y, x, y, z);
        }
    }
    public readonly float4 yxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
            else
                return new(y, x, z, x);
        }
    }
    public readonly float4 grbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
            else
                return new(y, x, z, x);
        }
    }
    public readonly float4 yxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
            else
                return new(y, x, z, y);
        }
    }
    public readonly float4 grbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
            else
                return new(y, x, z, y);
        }
    }
    public readonly float4 yxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
            else
                return new(y, x, z, z);
        }
    }
    public readonly float4 grbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
            else
                return new(y, x, z, z);
        }
    }
    public readonly float4 yyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
            else
                return new(y, y, x, x);
        }
    }
    public readonly float4 ggrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
            else
                return new(y, y, x, x);
        }
    }
    public readonly float4 yyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
            else
                return new(y, y, x, y);
        }
    }
    public readonly float4 ggrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
            else
                return new(y, y, x, y);
        }
    }
    public readonly float4 yyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
            else
                return new(y, y, x, z);
        }
    }
    public readonly float4 ggrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
            else
                return new(y, y, x, z);
        }
    }
    public readonly float4 yyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
            else
                return new(y, y, y, x);
        }
    }
    public readonly float4 gggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
            else
                return new(y, y, y, x);
        }
    }
    public readonly float4 yyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
            else
                return new(y, y, y, y);
        }
    }
    public readonly float4 gggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
            else
                return new(y, y, y, y);
        }
    }
    public readonly float4 yyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
            else
                return new(y, y, y, z);
        }
    }
    public readonly float4 gggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
            else
                return new(y, y, y, z);
        }
    }
    public readonly float4 yyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
            else
                return new(y, y, z, x);
        }
    }
    public readonly float4 ggbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
            else
                return new(y, y, z, x);
        }
    }
    public readonly float4 yyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
            else
                return new(y, y, z, y);
        }
    }
    public readonly float4 ggbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
            else
                return new(y, y, z, y);
        }
    }
    public readonly float4 yyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
            else
                return new(y, y, z, z);
        }
    }
    public readonly float4 ggbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
            else
                return new(y, y, z, z);
        }
    }
    public readonly float4 yzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
            else
                return new(y, z, x, x);
        }
    }
    public readonly float4 gbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
            else
                return new(y, z, x, x);
        }
    }
    public readonly float4 yzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
            else
                return new(y, z, x, y);
        }
    }
    public readonly float4 gbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
            else
                return new(y, z, x, y);
        }
    }
    public readonly float4 yzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
            else
                return new(y, z, x, z);
        }
    }
    public readonly float4 gbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
            else
                return new(y, z, x, z);
        }
    }
    public readonly float4 yzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
            else
                return new(y, z, y, x);
        }
    }
    public readonly float4 gbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
            else
                return new(y, z, y, x);
        }
    }
    public readonly float4 yzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
            else
                return new(y, z, y, y);
        }
    }
    public readonly float4 gbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
            else
                return new(y, z, y, y);
        }
    }
    public readonly float4 yzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
            else
                return new(y, z, y, z);
        }
    }
    public readonly float4 gbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
            else
                return new(y, z, y, z);
        }
    }
    public readonly float4 yzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
            else
                return new(y, z, z, x);
        }
    }
    public readonly float4 gbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
            else
                return new(y, z, z, x);
        }
    }
    public readonly float4 yzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
            else
                return new(y, z, z, y);
        }
    }
    public readonly float4 gbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
            else
                return new(y, z, z, y);
        }
    }
    public readonly float4 yzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
            else
                return new(y, z, z, z);
        }
    }
    public readonly float4 gbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
            else
                return new(y, z, z, z);
        }
    }
    public readonly float4 zxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
            else
                return new(z, x, x, x);
        }
    }
    public readonly float4 brrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
            else
                return new(z, x, x, x);
        }
    }
    public readonly float4 zxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
            else
                return new(z, x, x, y);
        }
    }
    public readonly float4 brrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
            else
                return new(z, x, x, y);
        }
    }
    public readonly float4 zxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
            else
                return new(z, x, x, z);
        }
    }
    public readonly float4 brrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
            else
                return new(z, x, x, z);
        }
    }
    public readonly float4 zxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
            else
                return new(z, x, y, x);
        }
    }
    public readonly float4 brgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
            else
                return new(z, x, y, x);
        }
    }
    public readonly float4 zxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
            else
                return new(z, x, y, y);
        }
    }
    public readonly float4 brgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
            else
                return new(z, x, y, y);
        }
    }
    public readonly float4 zxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
            else
                return new(z, x, y, z);
        }
    }
    public readonly float4 brgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
            else
                return new(z, x, y, z);
        }
    }
    public readonly float4 zxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
            else
                return new(z, x, z, x);
        }
    }
    public readonly float4 brbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
            else
                return new(z, x, z, x);
        }
    }
    public readonly float4 zxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
            else
                return new(z, x, z, y);
        }
    }
    public readonly float4 brbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
            else
                return new(z, x, z, y);
        }
    }
    public readonly float4 zxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
            else
                return new(z, x, z, z);
        }
    }
    public readonly float4 brbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
            else
                return new(z, x, z, z);
        }
    }
    public readonly float4 zyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
            else
                return new(z, y, x, x);
        }
    }
    public readonly float4 bgrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
            else
                return new(z, y, x, x);
        }
    }
    public readonly float4 zyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
            else
                return new(z, y, x, y);
        }
    }
    public readonly float4 bgrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
            else
                return new(z, y, x, y);
        }
    }
    public readonly float4 zyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
            else
                return new(z, y, x, z);
        }
    }
    public readonly float4 bgrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
            else
                return new(z, y, x, z);
        }
    }
    public readonly float4 zyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
            else
                return new(z, y, y, x);
        }
    }
    public readonly float4 bggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
            else
                return new(z, y, y, x);
        }
    }
    public readonly float4 zyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
            else
                return new(z, y, y, y);
        }
    }
    public readonly float4 bggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
            else
                return new(z, y, y, y);
        }
    }
    public readonly float4 zyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
            else
                return new(z, y, y, z);
        }
    }
    public readonly float4 bggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
            else
                return new(z, y, y, z);
        }
    }
    public readonly float4 zyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
            else
                return new(z, y, z, x);
        }
    }
    public readonly float4 bgbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
            else
                return new(z, y, z, x);
        }
    }
    public readonly float4 zyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
            else
                return new(z, y, z, y);
        }
    }
    public readonly float4 bgbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
            else
                return new(z, y, z, y);
        }
    }
    public readonly float4 zyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
            else
                return new(z, y, z, z);
        }
    }
    public readonly float4 bgbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
            else
                return new(z, y, z, z);
        }
    }
    public readonly float4 zzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
            else
                return new(z, z, x, x);
        }
    }
    public readonly float4 bbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
            else
                return new(z, z, x, x);
        }
    }
    public readonly float4 zzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
            else
                return new(z, z, x, y);
        }
    }
    public readonly float4 bbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
            else
                return new(z, z, x, y);
        }
    }
    public readonly float4 zzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
            else
                return new(z, z, x, z);
        }
    }
    public readonly float4 bbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
            else
                return new(z, z, x, z);
        }
    }
    public readonly float4 zzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
            else
                return new(z, z, y, x);
        }
    }
    public readonly float4 bbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
            else
                return new(z, z, y, x);
        }
    }
    public readonly float4 zzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
            else
                return new(z, z, y, y);
        }
    }
    public readonly float4 bbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
            else
                return new(z, z, y, y);
        }
    }
    public readonly float4 zzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
            else
                return new(z, z, y, z);
        }
    }
    public readonly float4 bbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
            else
                return new(z, z, y, z);
        }
    }
    public readonly float4 zzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
            else
                return new(z, z, z, x);
        }
    }
    public readonly float4 bbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
            else
                return new(z, z, z, x);
        }
    }
    public readonly float4 zzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
            else
                return new(z, z, z, y);
        }
    }
    public readonly float4 bbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
            else
                return new(z, z, z, y);
        }
    }
    public readonly float4 zzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
            else
                return new(z, z, z, z);
        }
    }
    public readonly float4 bbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
            else
                return new(z, z, z, z);
        }
    }
}

#endregion // float3

#region double3

public partial struct double3 
{
    public readonly double4 xxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
            else
                return new(x, x, x, x);
        }
    }
    public readonly double4 rrrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
            else
                return new(x, x, x, x);
        }
    }
    public readonly double4 xxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
            else
                return new(x, x, x, y);
        }
    }
    public readonly double4 rrrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
            else
                return new(x, x, x, y);
        }
    }
    public readonly double4 xxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
            else
                return new(x, x, x, z);
        }
    }
    public readonly double4 rrrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
            else
                return new(x, x, x, z);
        }
    }
    public readonly double4 xxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
            else
                return new(x, x, y, x);
        }
    }
    public readonly double4 rrgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
            else
                return new(x, x, y, x);
        }
    }
    public readonly double4 xxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
            else
                return new(x, x, y, y);
        }
    }
    public readonly double4 rrgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
            else
                return new(x, x, y, y);
        }
    }
    public readonly double4 xxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
            else
                return new(x, x, y, z);
        }
    }
    public readonly double4 rrgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
            else
                return new(x, x, y, z);
        }
    }
    public readonly double4 xxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
            else
                return new(x, x, z, x);
        }
    }
    public readonly double4 rrbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
            else
                return new(x, x, z, x);
        }
    }
    public readonly double4 xxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
            else
                return new(x, x, z, y);
        }
    }
    public readonly double4 rrbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
            else
                return new(x, x, z, y);
        }
    }
    public readonly double4 xxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
            else
                return new(x, x, z, z);
        }
    }
    public readonly double4 rrbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
            else
                return new(x, x, z, z);
        }
    }
    public readonly double4 xyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
            else
                return new(x, y, x, x);
        }
    }
    public readonly double4 rgrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
            else
                return new(x, y, x, x);
        }
    }
    public readonly double4 xyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
            else
                return new(x, y, x, y);
        }
    }
    public readonly double4 rgrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
            else
                return new(x, y, x, y);
        }
    }
    public readonly double4 xyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
            else
                return new(x, y, x, z);
        }
    }
    public readonly double4 rgrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
            else
                return new(x, y, x, z);
        }
    }
    public readonly double4 xyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
            else
                return new(x, y, y, x);
        }
    }
    public readonly double4 rggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
            else
                return new(x, y, y, x);
        }
    }
    public readonly double4 xyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
            else
                return new(x, y, y, y);
        }
    }
    public readonly double4 rggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
            else
                return new(x, y, y, y);
        }
    }
    public readonly double4 xyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
            else
                return new(x, y, y, z);
        }
    }
    public readonly double4 rggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
            else
                return new(x, y, y, z);
        }
    }
    public readonly double4 xyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
            else
                return new(x, y, z, x);
        }
    }
    public readonly double4 rgbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
            else
                return new(x, y, z, x);
        }
    }
    public readonly double4 xyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
            else
                return new(x, y, z, y);
        }
    }
    public readonly double4 rgbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
            else
                return new(x, y, z, y);
        }
    }
    public readonly double4 xyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
            else
                return new(x, y, z, z);
        }
    }
    public readonly double4 rgbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
            else
                return new(x, y, z, z);
        }
    }
    public readonly double4 xzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
            else
                return new(x, z, x, x);
        }
    }
    public readonly double4 rbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
            else
                return new(x, z, x, x);
        }
    }
    public readonly double4 xzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
            else
                return new(x, z, x, y);
        }
    }
    public readonly double4 rbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
            else
                return new(x, z, x, y);
        }
    }
    public readonly double4 xzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
            else
                return new(x, z, x, z);
        }
    }
    public readonly double4 rbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
            else
                return new(x, z, x, z);
        }
    }
    public readonly double4 xzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
            else
                return new(x, z, y, x);
        }
    }
    public readonly double4 rbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
            else
                return new(x, z, y, x);
        }
    }
    public readonly double4 xzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
            else
                return new(x, z, y, y);
        }
    }
    public readonly double4 rbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
            else
                return new(x, z, y, y);
        }
    }
    public readonly double4 xzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
            else
                return new(x, z, y, z);
        }
    }
    public readonly double4 rbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
            else
                return new(x, z, y, z);
        }
    }
    public readonly double4 xzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
            else
                return new(x, z, z, x);
        }
    }
    public readonly double4 rbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
            else
                return new(x, z, z, x);
        }
    }
    public readonly double4 xzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
            else
                return new(x, z, z, y);
        }
    }
    public readonly double4 rbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
            else
                return new(x, z, z, y);
        }
    }
    public readonly double4 xzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
            else
                return new(x, z, z, z);
        }
    }
    public readonly double4 rbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
            else
                return new(x, z, z, z);
        }
    }
    public readonly double4 yxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
            else
                return new(y, x, x, x);
        }
    }
    public readonly double4 grrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
            else
                return new(y, x, x, x);
        }
    }
    public readonly double4 yxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
            else
                return new(y, x, x, y);
        }
    }
    public readonly double4 grrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
            else
                return new(y, x, x, y);
        }
    }
    public readonly double4 yxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
            else
                return new(y, x, x, z);
        }
    }
    public readonly double4 grrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
            else
                return new(y, x, x, z);
        }
    }
    public readonly double4 yxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
            else
                return new(y, x, y, x);
        }
    }
    public readonly double4 grgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
            else
                return new(y, x, y, x);
        }
    }
    public readonly double4 yxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
            else
                return new(y, x, y, y);
        }
    }
    public readonly double4 grgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
            else
                return new(y, x, y, y);
        }
    }
    public readonly double4 yxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
            else
                return new(y, x, y, z);
        }
    }
    public readonly double4 grgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
            else
                return new(y, x, y, z);
        }
    }
    public readonly double4 yxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
            else
                return new(y, x, z, x);
        }
    }
    public readonly double4 grbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
            else
                return new(y, x, z, x);
        }
    }
    public readonly double4 yxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
            else
                return new(y, x, z, y);
        }
    }
    public readonly double4 grbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
            else
                return new(y, x, z, y);
        }
    }
    public readonly double4 yxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
            else
                return new(y, x, z, z);
        }
    }
    public readonly double4 grbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
            else
                return new(y, x, z, z);
        }
    }
    public readonly double4 yyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
            else
                return new(y, y, x, x);
        }
    }
    public readonly double4 ggrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
            else
                return new(y, y, x, x);
        }
    }
    public readonly double4 yyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
            else
                return new(y, y, x, y);
        }
    }
    public readonly double4 ggrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
            else
                return new(y, y, x, y);
        }
    }
    public readonly double4 yyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
            else
                return new(y, y, x, z);
        }
    }
    public readonly double4 ggrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
            else
                return new(y, y, x, z);
        }
    }
    public readonly double4 yyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
            else
                return new(y, y, y, x);
        }
    }
    public readonly double4 gggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
            else
                return new(y, y, y, x);
        }
    }
    public readonly double4 yyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
            else
                return new(y, y, y, y);
        }
    }
    public readonly double4 gggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
            else
                return new(y, y, y, y);
        }
    }
    public readonly double4 yyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
            else
                return new(y, y, y, z);
        }
    }
    public readonly double4 gggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
            else
                return new(y, y, y, z);
        }
    }
    public readonly double4 yyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
            else
                return new(y, y, z, x);
        }
    }
    public readonly double4 ggbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
            else
                return new(y, y, z, x);
        }
    }
    public readonly double4 yyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
            else
                return new(y, y, z, y);
        }
    }
    public readonly double4 ggbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
            else
                return new(y, y, z, y);
        }
    }
    public readonly double4 yyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
            else
                return new(y, y, z, z);
        }
    }
    public readonly double4 ggbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
            else
                return new(y, y, z, z);
        }
    }
    public readonly double4 yzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
            else
                return new(y, z, x, x);
        }
    }
    public readonly double4 gbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
            else
                return new(y, z, x, x);
        }
    }
    public readonly double4 yzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
            else
                return new(y, z, x, y);
        }
    }
    public readonly double4 gbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
            else
                return new(y, z, x, y);
        }
    }
    public readonly double4 yzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
            else
                return new(y, z, x, z);
        }
    }
    public readonly double4 gbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
            else
                return new(y, z, x, z);
        }
    }
    public readonly double4 yzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
            else
                return new(y, z, y, x);
        }
    }
    public readonly double4 gbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
            else
                return new(y, z, y, x);
        }
    }
    public readonly double4 yzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
            else
                return new(y, z, y, y);
        }
    }
    public readonly double4 gbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
            else
                return new(y, z, y, y);
        }
    }
    public readonly double4 yzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
            else
                return new(y, z, y, z);
        }
    }
    public readonly double4 gbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
            else
                return new(y, z, y, z);
        }
    }
    public readonly double4 yzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
            else
                return new(y, z, z, x);
        }
    }
    public readonly double4 gbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
            else
                return new(y, z, z, x);
        }
    }
    public readonly double4 yzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
            else
                return new(y, z, z, y);
        }
    }
    public readonly double4 gbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
            else
                return new(y, z, z, y);
        }
    }
    public readonly double4 yzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
            else
                return new(y, z, z, z);
        }
    }
    public readonly double4 gbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
            else
                return new(y, z, z, z);
        }
    }
    public readonly double4 zxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
            else
                return new(z, x, x, x);
        }
    }
    public readonly double4 brrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
            else
                return new(z, x, x, x);
        }
    }
    public readonly double4 zxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
            else
                return new(z, x, x, y);
        }
    }
    public readonly double4 brrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
            else
                return new(z, x, x, y);
        }
    }
    public readonly double4 zxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
            else
                return new(z, x, x, z);
        }
    }
    public readonly double4 brrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
            else
                return new(z, x, x, z);
        }
    }
    public readonly double4 zxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
            else
                return new(z, x, y, x);
        }
    }
    public readonly double4 brgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
            else
                return new(z, x, y, x);
        }
    }
    public readonly double4 zxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
            else
                return new(z, x, y, y);
        }
    }
    public readonly double4 brgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
            else
                return new(z, x, y, y);
        }
    }
    public readonly double4 zxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
            else
                return new(z, x, y, z);
        }
    }
    public readonly double4 brgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
            else
                return new(z, x, y, z);
        }
    }
    public readonly double4 zxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
            else
                return new(z, x, z, x);
        }
    }
    public readonly double4 brbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
            else
                return new(z, x, z, x);
        }
    }
    public readonly double4 zxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
            else
                return new(z, x, z, y);
        }
    }
    public readonly double4 brbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
            else
                return new(z, x, z, y);
        }
    }
    public readonly double4 zxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
            else
                return new(z, x, z, z);
        }
    }
    public readonly double4 brbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
            else
                return new(z, x, z, z);
        }
    }
    public readonly double4 zyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
            else
                return new(z, y, x, x);
        }
    }
    public readonly double4 bgrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
            else
                return new(z, y, x, x);
        }
    }
    public readonly double4 zyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
            else
                return new(z, y, x, y);
        }
    }
    public readonly double4 bgrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
            else
                return new(z, y, x, y);
        }
    }
    public readonly double4 zyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
            else
                return new(z, y, x, z);
        }
    }
    public readonly double4 bgrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
            else
                return new(z, y, x, z);
        }
    }
    public readonly double4 zyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
            else
                return new(z, y, y, x);
        }
    }
    public readonly double4 bggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
            else
                return new(z, y, y, x);
        }
    }
    public readonly double4 zyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
            else
                return new(z, y, y, y);
        }
    }
    public readonly double4 bggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
            else
                return new(z, y, y, y);
        }
    }
    public readonly double4 zyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
            else
                return new(z, y, y, z);
        }
    }
    public readonly double4 bggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
            else
                return new(z, y, y, z);
        }
    }
    public readonly double4 zyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
            else
                return new(z, y, z, x);
        }
    }
    public readonly double4 bgbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
            else
                return new(z, y, z, x);
        }
    }
    public readonly double4 zyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
            else
                return new(z, y, z, y);
        }
    }
    public readonly double4 bgbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
            else
                return new(z, y, z, y);
        }
    }
    public readonly double4 zyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
            else
                return new(z, y, z, z);
        }
    }
    public readonly double4 bgbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
            else
                return new(z, y, z, z);
        }
    }
    public readonly double4 zzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
            else
                return new(z, z, x, x);
        }
    }
    public readonly double4 bbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
            else
                return new(z, z, x, x);
        }
    }
    public readonly double4 zzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
            else
                return new(z, z, x, y);
        }
    }
    public readonly double4 bbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
            else
                return new(z, z, x, y);
        }
    }
    public readonly double4 zzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
            else
                return new(z, z, x, z);
        }
    }
    public readonly double4 bbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
            else
                return new(z, z, x, z);
        }
    }
    public readonly double4 zzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
            else
                return new(z, z, y, x);
        }
    }
    public readonly double4 bbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
            else
                return new(z, z, y, x);
        }
    }
    public readonly double4 zzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
            else
                return new(z, z, y, y);
        }
    }
    public readonly double4 bbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
            else
                return new(z, z, y, y);
        }
    }
    public readonly double4 zzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
            else
                return new(z, z, y, z);
        }
    }
    public readonly double4 bbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
            else
                return new(z, z, y, z);
        }
    }
    public readonly double4 zzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
            else
                return new(z, z, z, x);
        }
    }
    public readonly double4 bbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
            else
                return new(z, z, z, x);
        }
    }
    public readonly double4 zzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
            else
                return new(z, z, z, y);
        }
    }
    public readonly double4 bbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
            else
                return new(z, z, z, y);
        }
    }
    public readonly double4 zzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
            else
                return new(z, z, z, z);
        }
    }
    public readonly double4 bbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
            else
                return new(z, z, z, z);
        }
    }
}

#endregion // double3

#region short3

public partial struct short3 
{
    public readonly short4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly short4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly short4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly short4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly short4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly short4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly short4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly short4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly short4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly short4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly short4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly short4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly short4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly short4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly short4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly short4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly short4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly short4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly short4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly short4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly short4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly short4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly short4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly short4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly short4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly short4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly short4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly short4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly short4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly short4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly short4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly short4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly short4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly short4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly short4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly short4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly short4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly short4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly short4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly short4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly short4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly short4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly short4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly short4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly short4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly short4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly short4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly short4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly short4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly short4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly short4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly short4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly short4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly short4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly short4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly short4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly short4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly short4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly short4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly short4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly short4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly short4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly short4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly short4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly short4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly short4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly short4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly short4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly short4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly short4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly short4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly short4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly short4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly short4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly short4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly short4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly short4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly short4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly short4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly short4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly short4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly short4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly short4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly short4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly short4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly short4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly short4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly short4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly short4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly short4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly short4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly short4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly short4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly short4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly short4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly short4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly short4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly short4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly short4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly short4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly short4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly short4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly short4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly short4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly short4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly short4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly short4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly short4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly short4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly short4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly short4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly short4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly short4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly short4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly short4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly short4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly short4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly short4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly short4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly short4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly short4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly short4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly short4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly short4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly short4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly short4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly short4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly short4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly short4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly short4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly short4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly short4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly short4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly short4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly short4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly short4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly short4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly short4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly short4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly short4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly short4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly short4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly short4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly short4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly short4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly short4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly short4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly short4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly short4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly short4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly short4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly short4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly short4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly short4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly short4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly short4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly short4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly short4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly short4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly short4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly short4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly short4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // short3

#region ushort3

public partial struct ushort3 
{
    public readonly ushort4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly ushort4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly ushort4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly ushort4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly ushort4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly ushort4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly ushort4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly ushort4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly ushort4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly ushort4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly ushort4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly ushort4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly ushort4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly ushort4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly ushort4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly ushort4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly ushort4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly ushort4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly ushort4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly ushort4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly ushort4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly ushort4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly ushort4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly ushort4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly ushort4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly ushort4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly ushort4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly ushort4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly ushort4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly ushort4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly ushort4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly ushort4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly ushort4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly ushort4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly ushort4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly ushort4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly ushort4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly ushort4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly ushort4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly ushort4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly ushort4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly ushort4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly ushort4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly ushort4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly ushort4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly ushort4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly ushort4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly ushort4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly ushort4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly ushort4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly ushort4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly ushort4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly ushort4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly ushort4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly ushort4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly ushort4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly ushort4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly ushort4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly ushort4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly ushort4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly ushort4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly ushort4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly ushort4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly ushort4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly ushort4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly ushort4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly ushort4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly ushort4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly ushort4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly ushort4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly ushort4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly ushort4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly ushort4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly ushort4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly ushort4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly ushort4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly ushort4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly ushort4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly ushort4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly ushort4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly ushort4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly ushort4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly ushort4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly ushort4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly ushort4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly ushort4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly ushort4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly ushort4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly ushort4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly ushort4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly ushort4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly ushort4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly ushort4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly ushort4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly ushort4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly ushort4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly ushort4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly ushort4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly ushort4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly ushort4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly ushort4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly ushort4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly ushort4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly ushort4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly ushort4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly ushort4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly ushort4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly ushort4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly ushort4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly ushort4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly ushort4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly ushort4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly ushort4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly ushort4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly ushort4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly ushort4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly ushort4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly ushort4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly ushort4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly ushort4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly ushort4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly ushort4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly ushort4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly ushort4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly ushort4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly ushort4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly ushort4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly ushort4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly ushort4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly ushort4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly ushort4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly ushort4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly ushort4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly ushort4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly ushort4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly ushort4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly ushort4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly ushort4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly ushort4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly ushort4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly ushort4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly ushort4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly ushort4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly ushort4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly ushort4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly ushort4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly ushort4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly ushort4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly ushort4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly ushort4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly ushort4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly ushort4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly ushort4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly ushort4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly ushort4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly ushort4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly ushort4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly ushort4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly ushort4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly ushort4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly ushort4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly ushort4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // ushort3

#region int3

public partial struct int3 
{
    public readonly int4 xxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
            else
                return new(x, x, x, x);
        }
    }
    public readonly int4 rrrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
            else
                return new(x, x, x, x);
        }
    }
    public readonly int4 xxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
            else
                return new(x, x, x, y);
        }
    }
    public readonly int4 rrrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
            else
                return new(x, x, x, y);
        }
    }
    public readonly int4 xxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
            else
                return new(x, x, x, z);
        }
    }
    public readonly int4 rrrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
            else
                return new(x, x, x, z);
        }
    }
    public readonly int4 xxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
            else
                return new(x, x, y, x);
        }
    }
    public readonly int4 rrgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
            else
                return new(x, x, y, x);
        }
    }
    public readonly int4 xxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
            else
                return new(x, x, y, y);
        }
    }
    public readonly int4 rrgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
            else
                return new(x, x, y, y);
        }
    }
    public readonly int4 xxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
            else
                return new(x, x, y, z);
        }
    }
    public readonly int4 rrgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
            else
                return new(x, x, y, z);
        }
    }
    public readonly int4 xxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
            else
                return new(x, x, z, x);
        }
    }
    public readonly int4 rrbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
            else
                return new(x, x, z, x);
        }
    }
    public readonly int4 xxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
            else
                return new(x, x, z, y);
        }
    }
    public readonly int4 rrbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
            else
                return new(x, x, z, y);
        }
    }
    public readonly int4 xxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
            else
                return new(x, x, z, z);
        }
    }
    public readonly int4 rrbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
            else
                return new(x, x, z, z);
        }
    }
    public readonly int4 xyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
            else
                return new(x, y, x, x);
        }
    }
    public readonly int4 rgrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
            else
                return new(x, y, x, x);
        }
    }
    public readonly int4 xyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
            else
                return new(x, y, x, y);
        }
    }
    public readonly int4 rgrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
            else
                return new(x, y, x, y);
        }
    }
    public readonly int4 xyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
            else
                return new(x, y, x, z);
        }
    }
    public readonly int4 rgrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
            else
                return new(x, y, x, z);
        }
    }
    public readonly int4 xyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
            else
                return new(x, y, y, x);
        }
    }
    public readonly int4 rggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
            else
                return new(x, y, y, x);
        }
    }
    public readonly int4 xyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
            else
                return new(x, y, y, y);
        }
    }
    public readonly int4 rggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
            else
                return new(x, y, y, y);
        }
    }
    public readonly int4 xyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
            else
                return new(x, y, y, z);
        }
    }
    public readonly int4 rggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
            else
                return new(x, y, y, z);
        }
    }
    public readonly int4 xyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
            else
                return new(x, y, z, x);
        }
    }
    public readonly int4 rgbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
            else
                return new(x, y, z, x);
        }
    }
    public readonly int4 xyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
            else
                return new(x, y, z, y);
        }
    }
    public readonly int4 rgbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
            else
                return new(x, y, z, y);
        }
    }
    public readonly int4 xyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
            else
                return new(x, y, z, z);
        }
    }
    public readonly int4 rgbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
            else
                return new(x, y, z, z);
        }
    }
    public readonly int4 xzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
            else
                return new(x, z, x, x);
        }
    }
    public readonly int4 rbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
            else
                return new(x, z, x, x);
        }
    }
    public readonly int4 xzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
            else
                return new(x, z, x, y);
        }
    }
    public readonly int4 rbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
            else
                return new(x, z, x, y);
        }
    }
    public readonly int4 xzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
            else
                return new(x, z, x, z);
        }
    }
    public readonly int4 rbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
            else
                return new(x, z, x, z);
        }
    }
    public readonly int4 xzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
            else
                return new(x, z, y, x);
        }
    }
    public readonly int4 rbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
            else
                return new(x, z, y, x);
        }
    }
    public readonly int4 xzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
            else
                return new(x, z, y, y);
        }
    }
    public readonly int4 rbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
            else
                return new(x, z, y, y);
        }
    }
    public readonly int4 xzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
            else
                return new(x, z, y, z);
        }
    }
    public readonly int4 rbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
            else
                return new(x, z, y, z);
        }
    }
    public readonly int4 xzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
            else
                return new(x, z, z, x);
        }
    }
    public readonly int4 rbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
            else
                return new(x, z, z, x);
        }
    }
    public readonly int4 xzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
            else
                return new(x, z, z, y);
        }
    }
    public readonly int4 rbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
            else
                return new(x, z, z, y);
        }
    }
    public readonly int4 xzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
            else
                return new(x, z, z, z);
        }
    }
    public readonly int4 rbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
            else
                return new(x, z, z, z);
        }
    }
    public readonly int4 yxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
            else
                return new(y, x, x, x);
        }
    }
    public readonly int4 grrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
            else
                return new(y, x, x, x);
        }
    }
    public readonly int4 yxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
            else
                return new(y, x, x, y);
        }
    }
    public readonly int4 grrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
            else
                return new(y, x, x, y);
        }
    }
    public readonly int4 yxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
            else
                return new(y, x, x, z);
        }
    }
    public readonly int4 grrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
            else
                return new(y, x, x, z);
        }
    }
    public readonly int4 yxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
            else
                return new(y, x, y, x);
        }
    }
    public readonly int4 grgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
            else
                return new(y, x, y, x);
        }
    }
    public readonly int4 yxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
            else
                return new(y, x, y, y);
        }
    }
    public readonly int4 grgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
            else
                return new(y, x, y, y);
        }
    }
    public readonly int4 yxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
            else
                return new(y, x, y, z);
        }
    }
    public readonly int4 grgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
            else
                return new(y, x, y, z);
        }
    }
    public readonly int4 yxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
            else
                return new(y, x, z, x);
        }
    }
    public readonly int4 grbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
            else
                return new(y, x, z, x);
        }
    }
    public readonly int4 yxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
            else
                return new(y, x, z, y);
        }
    }
    public readonly int4 grbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
            else
                return new(y, x, z, y);
        }
    }
    public readonly int4 yxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
            else
                return new(y, x, z, z);
        }
    }
    public readonly int4 grbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
            else
                return new(y, x, z, z);
        }
    }
    public readonly int4 yyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
            else
                return new(y, y, x, x);
        }
    }
    public readonly int4 ggrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
            else
                return new(y, y, x, x);
        }
    }
    public readonly int4 yyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
            else
                return new(y, y, x, y);
        }
    }
    public readonly int4 ggrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
            else
                return new(y, y, x, y);
        }
    }
    public readonly int4 yyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
            else
                return new(y, y, x, z);
        }
    }
    public readonly int4 ggrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
            else
                return new(y, y, x, z);
        }
    }
    public readonly int4 yyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
            else
                return new(y, y, y, x);
        }
    }
    public readonly int4 gggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
            else
                return new(y, y, y, x);
        }
    }
    public readonly int4 yyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
            else
                return new(y, y, y, y);
        }
    }
    public readonly int4 gggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
            else
                return new(y, y, y, y);
        }
    }
    public readonly int4 yyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
            else
                return new(y, y, y, z);
        }
    }
    public readonly int4 gggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
            else
                return new(y, y, y, z);
        }
    }
    public readonly int4 yyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
            else
                return new(y, y, z, x);
        }
    }
    public readonly int4 ggbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
            else
                return new(y, y, z, x);
        }
    }
    public readonly int4 yyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
            else
                return new(y, y, z, y);
        }
    }
    public readonly int4 ggbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
            else
                return new(y, y, z, y);
        }
    }
    public readonly int4 yyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
            else
                return new(y, y, z, z);
        }
    }
    public readonly int4 ggbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
            else
                return new(y, y, z, z);
        }
    }
    public readonly int4 yzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
            else
                return new(y, z, x, x);
        }
    }
    public readonly int4 gbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
            else
                return new(y, z, x, x);
        }
    }
    public readonly int4 yzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
            else
                return new(y, z, x, y);
        }
    }
    public readonly int4 gbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
            else
                return new(y, z, x, y);
        }
    }
    public readonly int4 yzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
            else
                return new(y, z, x, z);
        }
    }
    public readonly int4 gbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
            else
                return new(y, z, x, z);
        }
    }
    public readonly int4 yzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
            else
                return new(y, z, y, x);
        }
    }
    public readonly int4 gbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
            else
                return new(y, z, y, x);
        }
    }
    public readonly int4 yzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
            else
                return new(y, z, y, y);
        }
    }
    public readonly int4 gbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
            else
                return new(y, z, y, y);
        }
    }
    public readonly int4 yzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
            else
                return new(y, z, y, z);
        }
    }
    public readonly int4 gbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
            else
                return new(y, z, y, z);
        }
    }
    public readonly int4 yzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
            else
                return new(y, z, z, x);
        }
    }
    public readonly int4 gbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
            else
                return new(y, z, z, x);
        }
    }
    public readonly int4 yzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
            else
                return new(y, z, z, y);
        }
    }
    public readonly int4 gbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
            else
                return new(y, z, z, y);
        }
    }
    public readonly int4 yzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
            else
                return new(y, z, z, z);
        }
    }
    public readonly int4 gbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
            else
                return new(y, z, z, z);
        }
    }
    public readonly int4 zxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
            else
                return new(z, x, x, x);
        }
    }
    public readonly int4 brrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
            else
                return new(z, x, x, x);
        }
    }
    public readonly int4 zxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
            else
                return new(z, x, x, y);
        }
    }
    public readonly int4 brrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
            else
                return new(z, x, x, y);
        }
    }
    public readonly int4 zxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
            else
                return new(z, x, x, z);
        }
    }
    public readonly int4 brrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
            else
                return new(z, x, x, z);
        }
    }
    public readonly int4 zxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
            else
                return new(z, x, y, x);
        }
    }
    public readonly int4 brgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
            else
                return new(z, x, y, x);
        }
    }
    public readonly int4 zxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
            else
                return new(z, x, y, y);
        }
    }
    public readonly int4 brgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
            else
                return new(z, x, y, y);
        }
    }
    public readonly int4 zxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
            else
                return new(z, x, y, z);
        }
    }
    public readonly int4 brgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
            else
                return new(z, x, y, z);
        }
    }
    public readonly int4 zxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
            else
                return new(z, x, z, x);
        }
    }
    public readonly int4 brbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
            else
                return new(z, x, z, x);
        }
    }
    public readonly int4 zxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
            else
                return new(z, x, z, y);
        }
    }
    public readonly int4 brbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
            else
                return new(z, x, z, y);
        }
    }
    public readonly int4 zxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
            else
                return new(z, x, z, z);
        }
    }
    public readonly int4 brbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
            else
                return new(z, x, z, z);
        }
    }
    public readonly int4 zyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
            else
                return new(z, y, x, x);
        }
    }
    public readonly int4 bgrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
            else
                return new(z, y, x, x);
        }
    }
    public readonly int4 zyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
            else
                return new(z, y, x, y);
        }
    }
    public readonly int4 bgrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
            else
                return new(z, y, x, y);
        }
    }
    public readonly int4 zyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
            else
                return new(z, y, x, z);
        }
    }
    public readonly int4 bgrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
            else
                return new(z, y, x, z);
        }
    }
    public readonly int4 zyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
            else
                return new(z, y, y, x);
        }
    }
    public readonly int4 bggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
            else
                return new(z, y, y, x);
        }
    }
    public readonly int4 zyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
            else
                return new(z, y, y, y);
        }
    }
    public readonly int4 bggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
            else
                return new(z, y, y, y);
        }
    }
    public readonly int4 zyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
            else
                return new(z, y, y, z);
        }
    }
    public readonly int4 bggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
            else
                return new(z, y, y, z);
        }
    }
    public readonly int4 zyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
            else
                return new(z, y, z, x);
        }
    }
    public readonly int4 bgbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
            else
                return new(z, y, z, x);
        }
    }
    public readonly int4 zyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
            else
                return new(z, y, z, y);
        }
    }
    public readonly int4 bgbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
            else
                return new(z, y, z, y);
        }
    }
    public readonly int4 zyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
            else
                return new(z, y, z, z);
        }
    }
    public readonly int4 bgbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
            else
                return new(z, y, z, z);
        }
    }
    public readonly int4 zzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
            else
                return new(z, z, x, x);
        }
    }
    public readonly int4 bbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
            else
                return new(z, z, x, x);
        }
    }
    public readonly int4 zzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
            else
                return new(z, z, x, y);
        }
    }
    public readonly int4 bbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
            else
                return new(z, z, x, y);
        }
    }
    public readonly int4 zzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
            else
                return new(z, z, x, z);
        }
    }
    public readonly int4 bbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
            else
                return new(z, z, x, z);
        }
    }
    public readonly int4 zzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
            else
                return new(z, z, y, x);
        }
    }
    public readonly int4 bbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
            else
                return new(z, z, y, x);
        }
    }
    public readonly int4 zzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
            else
                return new(z, z, y, y);
        }
    }
    public readonly int4 bbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
            else
                return new(z, z, y, y);
        }
    }
    public readonly int4 zzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
            else
                return new(z, z, y, z);
        }
    }
    public readonly int4 bbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
            else
                return new(z, z, y, z);
        }
    }
    public readonly int4 zzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
            else
                return new(z, z, z, x);
        }
    }
    public readonly int4 bbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
            else
                return new(z, z, z, x);
        }
    }
    public readonly int4 zzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
            else
                return new(z, z, z, y);
        }
    }
    public readonly int4 bbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
            else
                return new(z, z, z, y);
        }
    }
    public readonly int4 zzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
            else
                return new(z, z, z, z);
        }
    }
    public readonly int4 bbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
            else
                return new(z, z, z, z);
        }
    }
}

#endregion // int3

#region uint3

public partial struct uint3 
{
    public readonly uint4 xxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 0)));
            else
                return new(x, x, x, x);
        }
    }
    public readonly uint4 rrrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 0)));
            else
                return new(x, x, x, x);
        }
    }
    public readonly uint4 xxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 1)));
            else
                return new(x, x, x, y);
        }
    }
    public readonly uint4 rrrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 1)));
            else
                return new(x, x, x, y);
        }
    }
    public readonly uint4 xxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 2)));
            else
                return new(x, x, x, z);
        }
    }
    public readonly uint4 rrrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 2)));
            else
                return new(x, x, x, z);
        }
    }
    public readonly uint4 xxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 0)));
            else
                return new(x, x, y, x);
        }
    }
    public readonly uint4 rrgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 0)));
            else
                return new(x, x, y, x);
        }
    }
    public readonly uint4 xxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 1)));
            else
                return new(x, x, y, y);
        }
    }
    public readonly uint4 rrgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 1)));
            else
                return new(x, x, y, y);
        }
    }
    public readonly uint4 xxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 2)));
            else
                return new(x, x, y, z);
        }
    }
    public readonly uint4 rrgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 2)));
            else
                return new(x, x, y, z);
        }
    }
    public readonly uint4 xxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 0)));
            else
                return new(x, x, z, x);
        }
    }
    public readonly uint4 rrbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 0)));
            else
                return new(x, x, z, x);
        }
    }
    public readonly uint4 xxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 1)));
            else
                return new(x, x, z, y);
        }
    }
    public readonly uint4 rrbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 1)));
            else
                return new(x, x, z, y);
        }
    }
    public readonly uint4 xxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 2)));
            else
                return new(x, x, z, z);
        }
    }
    public readonly uint4 rrbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 2)));
            else
                return new(x, x, z, z);
        }
    }
    public readonly uint4 xyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 0)));
            else
                return new(x, y, x, x);
        }
    }
    public readonly uint4 rgrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 0)));
            else
                return new(x, y, x, x);
        }
    }
    public readonly uint4 xyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 1)));
            else
                return new(x, y, x, y);
        }
    }
    public readonly uint4 rgrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 1)));
            else
                return new(x, y, x, y);
        }
    }
    public readonly uint4 xyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 2)));
            else
                return new(x, y, x, z);
        }
    }
    public readonly uint4 rgrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 2)));
            else
                return new(x, y, x, z);
        }
    }
    public readonly uint4 xyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 0)));
            else
                return new(x, y, y, x);
        }
    }
    public readonly uint4 rggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 0)));
            else
                return new(x, y, y, x);
        }
    }
    public readonly uint4 xyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 1)));
            else
                return new(x, y, y, y);
        }
    }
    public readonly uint4 rggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 1)));
            else
                return new(x, y, y, y);
        }
    }
    public readonly uint4 xyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 2)));
            else
                return new(x, y, y, z);
        }
    }
    public readonly uint4 rggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 2)));
            else
                return new(x, y, y, z);
        }
    }
    public readonly uint4 xyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 0)));
            else
                return new(x, y, z, x);
        }
    }
    public readonly uint4 rgbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 0)));
            else
                return new(x, y, z, x);
        }
    }
    public readonly uint4 xyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 1)));
            else
                return new(x, y, z, y);
        }
    }
    public readonly uint4 rgbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 1)));
            else
                return new(x, y, z, y);
        }
    }
    public readonly uint4 xyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 2)));
            else
                return new(x, y, z, z);
        }
    }
    public readonly uint4 rgbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 2)));
            else
                return new(x, y, z, z);
        }
    }
    public readonly uint4 xzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 0)));
            else
                return new(x, z, x, x);
        }
    }
    public readonly uint4 rbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 0)));
            else
                return new(x, z, x, x);
        }
    }
    public readonly uint4 xzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 1)));
            else
                return new(x, z, x, y);
        }
    }
    public readonly uint4 rbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 1)));
            else
                return new(x, z, x, y);
        }
    }
    public readonly uint4 xzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 2)));
            else
                return new(x, z, x, z);
        }
    }
    public readonly uint4 rbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 2)));
            else
                return new(x, z, x, z);
        }
    }
    public readonly uint4 xzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 0)));
            else
                return new(x, z, y, x);
        }
    }
    public readonly uint4 rbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 0)));
            else
                return new(x, z, y, x);
        }
    }
    public readonly uint4 xzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 1)));
            else
                return new(x, z, y, y);
        }
    }
    public readonly uint4 rbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 1)));
            else
                return new(x, z, y, y);
        }
    }
    public readonly uint4 xzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 2)));
            else
                return new(x, z, y, z);
        }
    }
    public readonly uint4 rbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 2)));
            else
                return new(x, z, y, z);
        }
    }
    public readonly uint4 xzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 0)));
            else
                return new(x, z, z, x);
        }
    }
    public readonly uint4 rbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 0)));
            else
                return new(x, z, z, x);
        }
    }
    public readonly uint4 xzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 1)));
            else
                return new(x, z, z, y);
        }
    }
    public readonly uint4 rbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 1)));
            else
                return new(x, z, z, y);
        }
    }
    public readonly uint4 xzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 2)));
            else
                return new(x, z, z, z);
        }
    }
    public readonly uint4 rbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 2)));
            else
                return new(x, z, z, z);
        }
    }
    public readonly uint4 yxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 0)));
            else
                return new(y, x, x, x);
        }
    }
    public readonly uint4 grrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 0)));
            else
                return new(y, x, x, x);
        }
    }
    public readonly uint4 yxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 1)));
            else
                return new(y, x, x, y);
        }
    }
    public readonly uint4 grrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 1)));
            else
                return new(y, x, x, y);
        }
    }
    public readonly uint4 yxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 2)));
            else
                return new(y, x, x, z);
        }
    }
    public readonly uint4 grrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 2)));
            else
                return new(y, x, x, z);
        }
    }
    public readonly uint4 yxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 0)));
            else
                return new(y, x, y, x);
        }
    }
    public readonly uint4 grgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 0)));
            else
                return new(y, x, y, x);
        }
    }
    public readonly uint4 yxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 1)));
            else
                return new(y, x, y, y);
        }
    }
    public readonly uint4 grgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 1)));
            else
                return new(y, x, y, y);
        }
    }
    public readonly uint4 yxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 2)));
            else
                return new(y, x, y, z);
        }
    }
    public readonly uint4 grgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 2)));
            else
                return new(y, x, y, z);
        }
    }
    public readonly uint4 yxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 0)));
            else
                return new(y, x, z, x);
        }
    }
    public readonly uint4 grbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 0)));
            else
                return new(y, x, z, x);
        }
    }
    public readonly uint4 yxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 1)));
            else
                return new(y, x, z, y);
        }
    }
    public readonly uint4 grbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 1)));
            else
                return new(y, x, z, y);
        }
    }
    public readonly uint4 yxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 2)));
            else
                return new(y, x, z, z);
        }
    }
    public readonly uint4 grbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 2)));
            else
                return new(y, x, z, z);
        }
    }
    public readonly uint4 yyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 0)));
            else
                return new(y, y, x, x);
        }
    }
    public readonly uint4 ggrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 0)));
            else
                return new(y, y, x, x);
        }
    }
    public readonly uint4 yyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 1)));
            else
                return new(y, y, x, y);
        }
    }
    public readonly uint4 ggrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 1)));
            else
                return new(y, y, x, y);
        }
    }
    public readonly uint4 yyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 2)));
            else
                return new(y, y, x, z);
        }
    }
    public readonly uint4 ggrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 2)));
            else
                return new(y, y, x, z);
        }
    }
    public readonly uint4 yyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 0)));
            else
                return new(y, y, y, x);
        }
    }
    public readonly uint4 gggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 0)));
            else
                return new(y, y, y, x);
        }
    }
    public readonly uint4 yyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 1)));
            else
                return new(y, y, y, y);
        }
    }
    public readonly uint4 gggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 1)));
            else
                return new(y, y, y, y);
        }
    }
    public readonly uint4 yyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 2)));
            else
                return new(y, y, y, z);
        }
    }
    public readonly uint4 gggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 2)));
            else
                return new(y, y, y, z);
        }
    }
    public readonly uint4 yyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 0)));
            else
                return new(y, y, z, x);
        }
    }
    public readonly uint4 ggbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 0)));
            else
                return new(y, y, z, x);
        }
    }
    public readonly uint4 yyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 1)));
            else
                return new(y, y, z, y);
        }
    }
    public readonly uint4 ggbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 1)));
            else
                return new(y, y, z, y);
        }
    }
    public readonly uint4 yyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 2)));
            else
                return new(y, y, z, z);
        }
    }
    public readonly uint4 ggbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 2)));
            else
                return new(y, y, z, z);
        }
    }
    public readonly uint4 yzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 0)));
            else
                return new(y, z, x, x);
        }
    }
    public readonly uint4 gbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 0)));
            else
                return new(y, z, x, x);
        }
    }
    public readonly uint4 yzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 1)));
            else
                return new(y, z, x, y);
        }
    }
    public readonly uint4 gbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 1)));
            else
                return new(y, z, x, y);
        }
    }
    public readonly uint4 yzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 2)));
            else
                return new(y, z, x, z);
        }
    }
    public readonly uint4 gbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 2)));
            else
                return new(y, z, x, z);
        }
    }
    public readonly uint4 yzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 0)));
            else
                return new(y, z, y, x);
        }
    }
    public readonly uint4 gbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 0)));
            else
                return new(y, z, y, x);
        }
    }
    public readonly uint4 yzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 1)));
            else
                return new(y, z, y, y);
        }
    }
    public readonly uint4 gbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 1)));
            else
                return new(y, z, y, y);
        }
    }
    public readonly uint4 yzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 2)));
            else
                return new(y, z, y, z);
        }
    }
    public readonly uint4 gbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 2)));
            else
                return new(y, z, y, z);
        }
    }
    public readonly uint4 yzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 0)));
            else
                return new(y, z, z, x);
        }
    }
    public readonly uint4 gbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 0)));
            else
                return new(y, z, z, x);
        }
    }
    public readonly uint4 yzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 1)));
            else
                return new(y, z, z, y);
        }
    }
    public readonly uint4 gbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 1)));
            else
                return new(y, z, z, y);
        }
    }
    public readonly uint4 yzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 2)));
            else
                return new(y, z, z, z);
        }
    }
    public readonly uint4 gbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 2)));
            else
                return new(y, z, z, z);
        }
    }
    public readonly uint4 zxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 0)));
            else
                return new(z, x, x, x);
        }
    }
    public readonly uint4 brrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 0)));
            else
                return new(z, x, x, x);
        }
    }
    public readonly uint4 zxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 1)));
            else
                return new(z, x, x, y);
        }
    }
    public readonly uint4 brrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 1)));
            else
                return new(z, x, x, y);
        }
    }
    public readonly uint4 zxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 2)));
            else
                return new(z, x, x, z);
        }
    }
    public readonly uint4 brrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 2)));
            else
                return new(z, x, x, z);
        }
    }
    public readonly uint4 zxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 0)));
            else
                return new(z, x, y, x);
        }
    }
    public readonly uint4 brgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 0)));
            else
                return new(z, x, y, x);
        }
    }
    public readonly uint4 zxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 1)));
            else
                return new(z, x, y, y);
        }
    }
    public readonly uint4 brgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 1)));
            else
                return new(z, x, y, y);
        }
    }
    public readonly uint4 zxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 2)));
            else
                return new(z, x, y, z);
        }
    }
    public readonly uint4 brgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 2)));
            else
                return new(z, x, y, z);
        }
    }
    public readonly uint4 zxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 0)));
            else
                return new(z, x, z, x);
        }
    }
    public readonly uint4 brbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 0)));
            else
                return new(z, x, z, x);
        }
    }
    public readonly uint4 zxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 1)));
            else
                return new(z, x, z, y);
        }
    }
    public readonly uint4 brbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 1)));
            else
                return new(z, x, z, y);
        }
    }
    public readonly uint4 zxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 2)));
            else
                return new(z, x, z, z);
        }
    }
    public readonly uint4 brbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 2)));
            else
                return new(z, x, z, z);
        }
    }
    public readonly uint4 zyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 0)));
            else
                return new(z, y, x, x);
        }
    }
    public readonly uint4 bgrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 0)));
            else
                return new(z, y, x, x);
        }
    }
    public readonly uint4 zyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 1)));
            else
                return new(z, y, x, y);
        }
    }
    public readonly uint4 bgrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 1)));
            else
                return new(z, y, x, y);
        }
    }
    public readonly uint4 zyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 2)));
            else
                return new(z, y, x, z);
        }
    }
    public readonly uint4 bgrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 2)));
            else
                return new(z, y, x, z);
        }
    }
    public readonly uint4 zyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 0)));
            else
                return new(z, y, y, x);
        }
    }
    public readonly uint4 bggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 0)));
            else
                return new(z, y, y, x);
        }
    }
    public readonly uint4 zyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 1)));
            else
                return new(z, y, y, y);
        }
    }
    public readonly uint4 bggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 1)));
            else
                return new(z, y, y, y);
        }
    }
    public readonly uint4 zyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 2)));
            else
                return new(z, y, y, z);
        }
    }
    public readonly uint4 bggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 2)));
            else
                return new(z, y, y, z);
        }
    }
    public readonly uint4 zyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 0)));
            else
                return new(z, y, z, x);
        }
    }
    public readonly uint4 bgbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 0)));
            else
                return new(z, y, z, x);
        }
    }
    public readonly uint4 zyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 1)));
            else
                return new(z, y, z, y);
        }
    }
    public readonly uint4 bgbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 1)));
            else
                return new(z, y, z, y);
        }
    }
    public readonly uint4 zyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 2)));
            else
                return new(z, y, z, z);
        }
    }
    public readonly uint4 bgbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 2)));
            else
                return new(z, y, z, z);
        }
    }
    public readonly uint4 zzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 0)));
            else
                return new(z, z, x, x);
        }
    }
    public readonly uint4 bbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 0)));
            else
                return new(z, z, x, x);
        }
    }
    public readonly uint4 zzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 1)));
            else
                return new(z, z, x, y);
        }
    }
    public readonly uint4 bbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 1)));
            else
                return new(z, z, x, y);
        }
    }
    public readonly uint4 zzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 2)));
            else
                return new(z, z, x, z);
        }
    }
    public readonly uint4 bbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 2)));
            else
                return new(z, z, x, z);
        }
    }
    public readonly uint4 zzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 0)));
            else
                return new(z, z, y, x);
        }
    }
    public readonly uint4 bbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 0)));
            else
                return new(z, z, y, x);
        }
    }
    public readonly uint4 zzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 1)));
            else
                return new(z, z, y, y);
        }
    }
    public readonly uint4 bbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 1)));
            else
                return new(z, z, y, y);
        }
    }
    public readonly uint4 zzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 2)));
            else
                return new(z, z, y, z);
        }
    }
    public readonly uint4 bbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 2)));
            else
                return new(z, z, y, z);
        }
    }
    public readonly uint4 zzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 0)));
            else
                return new(z, z, z, x);
        }
    }
    public readonly uint4 bbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 0)));
            else
                return new(z, z, z, x);
        }
    }
    public readonly uint4 zzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 1)));
            else
                return new(z, z, z, y);
        }
    }
    public readonly uint4 bbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 1)));
            else
                return new(z, z, z, y);
        }
    }
    public readonly uint4 zzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 2)));
            else
                return new(z, z, z, z);
        }
    }
    public readonly uint4 bbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 2)));
            else
                return new(z, z, z, z);
        }
    }
}

#endregion // uint3

#region long3

public partial struct long3 
{
    public readonly long4 xxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
            else
                return new(x, x, x, x);
        }
    }
    public readonly long4 rrrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
            else
                return new(x, x, x, x);
        }
    }
    public readonly long4 xxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
            else
                return new(x, x, x, y);
        }
    }
    public readonly long4 rrrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
            else
                return new(x, x, x, y);
        }
    }
    public readonly long4 xxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
            else
                return new(x, x, x, z);
        }
    }
    public readonly long4 rrrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
            else
                return new(x, x, x, z);
        }
    }
    public readonly long4 xxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
            else
                return new(x, x, y, x);
        }
    }
    public readonly long4 rrgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
            else
                return new(x, x, y, x);
        }
    }
    public readonly long4 xxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
            else
                return new(x, x, y, y);
        }
    }
    public readonly long4 rrgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
            else
                return new(x, x, y, y);
        }
    }
    public readonly long4 xxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
            else
                return new(x, x, y, z);
        }
    }
    public readonly long4 rrgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
            else
                return new(x, x, y, z);
        }
    }
    public readonly long4 xxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
            else
                return new(x, x, z, x);
        }
    }
    public readonly long4 rrbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
            else
                return new(x, x, z, x);
        }
    }
    public readonly long4 xxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
            else
                return new(x, x, z, y);
        }
    }
    public readonly long4 rrbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
            else
                return new(x, x, z, y);
        }
    }
    public readonly long4 xxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
            else
                return new(x, x, z, z);
        }
    }
    public readonly long4 rrbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
            else
                return new(x, x, z, z);
        }
    }
    public readonly long4 xyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
            else
                return new(x, y, x, x);
        }
    }
    public readonly long4 rgrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
            else
                return new(x, y, x, x);
        }
    }
    public readonly long4 xyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
            else
                return new(x, y, x, y);
        }
    }
    public readonly long4 rgrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
            else
                return new(x, y, x, y);
        }
    }
    public readonly long4 xyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
            else
                return new(x, y, x, z);
        }
    }
    public readonly long4 rgrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
            else
                return new(x, y, x, z);
        }
    }
    public readonly long4 xyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
            else
                return new(x, y, y, x);
        }
    }
    public readonly long4 rggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
            else
                return new(x, y, y, x);
        }
    }
    public readonly long4 xyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
            else
                return new(x, y, y, y);
        }
    }
    public readonly long4 rggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
            else
                return new(x, y, y, y);
        }
    }
    public readonly long4 xyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
            else
                return new(x, y, y, z);
        }
    }
    public readonly long4 rggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
            else
                return new(x, y, y, z);
        }
    }
    public readonly long4 xyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
            else
                return new(x, y, z, x);
        }
    }
    public readonly long4 rgbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
            else
                return new(x, y, z, x);
        }
    }
    public readonly long4 xyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
            else
                return new(x, y, z, y);
        }
    }
    public readonly long4 rgbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
            else
                return new(x, y, z, y);
        }
    }
    public readonly long4 xyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
            else
                return new(x, y, z, z);
        }
    }
    public readonly long4 rgbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
            else
                return new(x, y, z, z);
        }
    }
    public readonly long4 xzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
            else
                return new(x, z, x, x);
        }
    }
    public readonly long4 rbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
            else
                return new(x, z, x, x);
        }
    }
    public readonly long4 xzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
            else
                return new(x, z, x, y);
        }
    }
    public readonly long4 rbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
            else
                return new(x, z, x, y);
        }
    }
    public readonly long4 xzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
            else
                return new(x, z, x, z);
        }
    }
    public readonly long4 rbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
            else
                return new(x, z, x, z);
        }
    }
    public readonly long4 xzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
            else
                return new(x, z, y, x);
        }
    }
    public readonly long4 rbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
            else
                return new(x, z, y, x);
        }
    }
    public readonly long4 xzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
            else
                return new(x, z, y, y);
        }
    }
    public readonly long4 rbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
            else
                return new(x, z, y, y);
        }
    }
    public readonly long4 xzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
            else
                return new(x, z, y, z);
        }
    }
    public readonly long4 rbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
            else
                return new(x, z, y, z);
        }
    }
    public readonly long4 xzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
            else
                return new(x, z, z, x);
        }
    }
    public readonly long4 rbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
            else
                return new(x, z, z, x);
        }
    }
    public readonly long4 xzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
            else
                return new(x, z, z, y);
        }
    }
    public readonly long4 rbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
            else
                return new(x, z, z, y);
        }
    }
    public readonly long4 xzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
            else
                return new(x, z, z, z);
        }
    }
    public readonly long4 rbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
            else
                return new(x, z, z, z);
        }
    }
    public readonly long4 yxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
            else
                return new(y, x, x, x);
        }
    }
    public readonly long4 grrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
            else
                return new(y, x, x, x);
        }
    }
    public readonly long4 yxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
            else
                return new(y, x, x, y);
        }
    }
    public readonly long4 grrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
            else
                return new(y, x, x, y);
        }
    }
    public readonly long4 yxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
            else
                return new(y, x, x, z);
        }
    }
    public readonly long4 grrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
            else
                return new(y, x, x, z);
        }
    }
    public readonly long4 yxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
            else
                return new(y, x, y, x);
        }
    }
    public readonly long4 grgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
            else
                return new(y, x, y, x);
        }
    }
    public readonly long4 yxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
            else
                return new(y, x, y, y);
        }
    }
    public readonly long4 grgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
            else
                return new(y, x, y, y);
        }
    }
    public readonly long4 yxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
            else
                return new(y, x, y, z);
        }
    }
    public readonly long4 grgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
            else
                return new(y, x, y, z);
        }
    }
    public readonly long4 yxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
            else
                return new(y, x, z, x);
        }
    }
    public readonly long4 grbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
            else
                return new(y, x, z, x);
        }
    }
    public readonly long4 yxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
            else
                return new(y, x, z, y);
        }
    }
    public readonly long4 grbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
            else
                return new(y, x, z, y);
        }
    }
    public readonly long4 yxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
            else
                return new(y, x, z, z);
        }
    }
    public readonly long4 grbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
            else
                return new(y, x, z, z);
        }
    }
    public readonly long4 yyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
            else
                return new(y, y, x, x);
        }
    }
    public readonly long4 ggrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
            else
                return new(y, y, x, x);
        }
    }
    public readonly long4 yyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
            else
                return new(y, y, x, y);
        }
    }
    public readonly long4 ggrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
            else
                return new(y, y, x, y);
        }
    }
    public readonly long4 yyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
            else
                return new(y, y, x, z);
        }
    }
    public readonly long4 ggrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
            else
                return new(y, y, x, z);
        }
    }
    public readonly long4 yyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
            else
                return new(y, y, y, x);
        }
    }
    public readonly long4 gggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
            else
                return new(y, y, y, x);
        }
    }
    public readonly long4 yyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
            else
                return new(y, y, y, y);
        }
    }
    public readonly long4 gggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
            else
                return new(y, y, y, y);
        }
    }
    public readonly long4 yyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
            else
                return new(y, y, y, z);
        }
    }
    public readonly long4 gggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
            else
                return new(y, y, y, z);
        }
    }
    public readonly long4 yyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
            else
                return new(y, y, z, x);
        }
    }
    public readonly long4 ggbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
            else
                return new(y, y, z, x);
        }
    }
    public readonly long4 yyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
            else
                return new(y, y, z, y);
        }
    }
    public readonly long4 ggbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
            else
                return new(y, y, z, y);
        }
    }
    public readonly long4 yyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
            else
                return new(y, y, z, z);
        }
    }
    public readonly long4 ggbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
            else
                return new(y, y, z, z);
        }
    }
    public readonly long4 yzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
            else
                return new(y, z, x, x);
        }
    }
    public readonly long4 gbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
            else
                return new(y, z, x, x);
        }
    }
    public readonly long4 yzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
            else
                return new(y, z, x, y);
        }
    }
    public readonly long4 gbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
            else
                return new(y, z, x, y);
        }
    }
    public readonly long4 yzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
            else
                return new(y, z, x, z);
        }
    }
    public readonly long4 gbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
            else
                return new(y, z, x, z);
        }
    }
    public readonly long4 yzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
            else
                return new(y, z, y, x);
        }
    }
    public readonly long4 gbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
            else
                return new(y, z, y, x);
        }
    }
    public readonly long4 yzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
            else
                return new(y, z, y, y);
        }
    }
    public readonly long4 gbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
            else
                return new(y, z, y, y);
        }
    }
    public readonly long4 yzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
            else
                return new(y, z, y, z);
        }
    }
    public readonly long4 gbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
            else
                return new(y, z, y, z);
        }
    }
    public readonly long4 yzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
            else
                return new(y, z, z, x);
        }
    }
    public readonly long4 gbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
            else
                return new(y, z, z, x);
        }
    }
    public readonly long4 yzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
            else
                return new(y, z, z, y);
        }
    }
    public readonly long4 gbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
            else
                return new(y, z, z, y);
        }
    }
    public readonly long4 yzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
            else
                return new(y, z, z, z);
        }
    }
    public readonly long4 gbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
            else
                return new(y, z, z, z);
        }
    }
    public readonly long4 zxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
            else
                return new(z, x, x, x);
        }
    }
    public readonly long4 brrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
            else
                return new(z, x, x, x);
        }
    }
    public readonly long4 zxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
            else
                return new(z, x, x, y);
        }
    }
    public readonly long4 brrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
            else
                return new(z, x, x, y);
        }
    }
    public readonly long4 zxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
            else
                return new(z, x, x, z);
        }
    }
    public readonly long4 brrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
            else
                return new(z, x, x, z);
        }
    }
    public readonly long4 zxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
            else
                return new(z, x, y, x);
        }
    }
    public readonly long4 brgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
            else
                return new(z, x, y, x);
        }
    }
    public readonly long4 zxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
            else
                return new(z, x, y, y);
        }
    }
    public readonly long4 brgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
            else
                return new(z, x, y, y);
        }
    }
    public readonly long4 zxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
            else
                return new(z, x, y, z);
        }
    }
    public readonly long4 brgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
            else
                return new(z, x, y, z);
        }
    }
    public readonly long4 zxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
            else
                return new(z, x, z, x);
        }
    }
    public readonly long4 brbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
            else
                return new(z, x, z, x);
        }
    }
    public readonly long4 zxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
            else
                return new(z, x, z, y);
        }
    }
    public readonly long4 brbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
            else
                return new(z, x, z, y);
        }
    }
    public readonly long4 zxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
            else
                return new(z, x, z, z);
        }
    }
    public readonly long4 brbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
            else
                return new(z, x, z, z);
        }
    }
    public readonly long4 zyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
            else
                return new(z, y, x, x);
        }
    }
    public readonly long4 bgrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
            else
                return new(z, y, x, x);
        }
    }
    public readonly long4 zyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
            else
                return new(z, y, x, y);
        }
    }
    public readonly long4 bgrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
            else
                return new(z, y, x, y);
        }
    }
    public readonly long4 zyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
            else
                return new(z, y, x, z);
        }
    }
    public readonly long4 bgrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
            else
                return new(z, y, x, z);
        }
    }
    public readonly long4 zyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
            else
                return new(z, y, y, x);
        }
    }
    public readonly long4 bggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
            else
                return new(z, y, y, x);
        }
    }
    public readonly long4 zyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
            else
                return new(z, y, y, y);
        }
    }
    public readonly long4 bggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
            else
                return new(z, y, y, y);
        }
    }
    public readonly long4 zyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
            else
                return new(z, y, y, z);
        }
    }
    public readonly long4 bggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
            else
                return new(z, y, y, z);
        }
    }
    public readonly long4 zyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
            else
                return new(z, y, z, x);
        }
    }
    public readonly long4 bgbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
            else
                return new(z, y, z, x);
        }
    }
    public readonly long4 zyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
            else
                return new(z, y, z, y);
        }
    }
    public readonly long4 bgbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
            else
                return new(z, y, z, y);
        }
    }
    public readonly long4 zyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
            else
                return new(z, y, z, z);
        }
    }
    public readonly long4 bgbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
            else
                return new(z, y, z, z);
        }
    }
    public readonly long4 zzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
            else
                return new(z, z, x, x);
        }
    }
    public readonly long4 bbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
            else
                return new(z, z, x, x);
        }
    }
    public readonly long4 zzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
            else
                return new(z, z, x, y);
        }
    }
    public readonly long4 bbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
            else
                return new(z, z, x, y);
        }
    }
    public readonly long4 zzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
            else
                return new(z, z, x, z);
        }
    }
    public readonly long4 bbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
            else
                return new(z, z, x, z);
        }
    }
    public readonly long4 zzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
            else
                return new(z, z, y, x);
        }
    }
    public readonly long4 bbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
            else
                return new(z, z, y, x);
        }
    }
    public readonly long4 zzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
            else
                return new(z, z, y, y);
        }
    }
    public readonly long4 bbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
            else
                return new(z, z, y, y);
        }
    }
    public readonly long4 zzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
            else
                return new(z, z, y, z);
        }
    }
    public readonly long4 bbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
            else
                return new(z, z, y, z);
        }
    }
    public readonly long4 zzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
            else
                return new(z, z, z, x);
        }
    }
    public readonly long4 bbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
            else
                return new(z, z, z, x);
        }
    }
    public readonly long4 zzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
            else
                return new(z, z, z, y);
        }
    }
    public readonly long4 bbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
            else
                return new(z, z, z, y);
        }
    }
    public readonly long4 zzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
            else
                return new(z, z, z, z);
        }
    }
    public readonly long4 bbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
            else
                return new(z, z, z, z);
        }
    }
}

#endregion // long3

#region ulong3

public partial struct ulong3 
{
    public readonly ulong4 xxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 0)));
            else
                return new(x, x, x, x);
        }
    }
    public readonly ulong4 rrrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 0)));
            else
                return new(x, x, x, x);
        }
    }
    public readonly ulong4 xxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 1)));
            else
                return new(x, x, x, y);
        }
    }
    public readonly ulong4 rrrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 1)));
            else
                return new(x, x, x, y);
        }
    }
    public readonly ulong4 xxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 2)));
            else
                return new(x, x, x, z);
        }
    }
    public readonly ulong4 rrrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 2)));
            else
                return new(x, x, x, z);
        }
    }
    public readonly ulong4 xxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 0)));
            else
                return new(x, x, y, x);
        }
    }
    public readonly ulong4 rrgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 0)));
            else
                return new(x, x, y, x);
        }
    }
    public readonly ulong4 xxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 1)));
            else
                return new(x, x, y, y);
        }
    }
    public readonly ulong4 rrgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 1)));
            else
                return new(x, x, y, y);
        }
    }
    public readonly ulong4 xxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 2)));
            else
                return new(x, x, y, z);
        }
    }
    public readonly ulong4 rrgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 2)));
            else
                return new(x, x, y, z);
        }
    }
    public readonly ulong4 xxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 0)));
            else
                return new(x, x, z, x);
        }
    }
    public readonly ulong4 rrbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 0)));
            else
                return new(x, x, z, x);
        }
    }
    public readonly ulong4 xxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 1)));
            else
                return new(x, x, z, y);
        }
    }
    public readonly ulong4 rrbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 1)));
            else
                return new(x, x, z, y);
        }
    }
    public readonly ulong4 xxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 2)));
            else
                return new(x, x, z, z);
        }
    }
    public readonly ulong4 rrbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 2)));
            else
                return new(x, x, z, z);
        }
    }
    public readonly ulong4 xyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 0)));
            else
                return new(x, y, x, x);
        }
    }
    public readonly ulong4 rgrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 0)));
            else
                return new(x, y, x, x);
        }
    }
    public readonly ulong4 xyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 1)));
            else
                return new(x, y, x, y);
        }
    }
    public readonly ulong4 rgrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 1)));
            else
                return new(x, y, x, y);
        }
    }
    public readonly ulong4 xyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 2)));
            else
                return new(x, y, x, z);
        }
    }
    public readonly ulong4 rgrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 2)));
            else
                return new(x, y, x, z);
        }
    }
    public readonly ulong4 xyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 0)));
            else
                return new(x, y, y, x);
        }
    }
    public readonly ulong4 rggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 0)));
            else
                return new(x, y, y, x);
        }
    }
    public readonly ulong4 xyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 1)));
            else
                return new(x, y, y, y);
        }
    }
    public readonly ulong4 rggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 1)));
            else
                return new(x, y, y, y);
        }
    }
    public readonly ulong4 xyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 2)));
            else
                return new(x, y, y, z);
        }
    }
    public readonly ulong4 rggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 2)));
            else
                return new(x, y, y, z);
        }
    }
    public readonly ulong4 xyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 0)));
            else
                return new(x, y, z, x);
        }
    }
    public readonly ulong4 rgbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 0)));
            else
                return new(x, y, z, x);
        }
    }
    public readonly ulong4 xyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 1)));
            else
                return new(x, y, z, y);
        }
    }
    public readonly ulong4 rgbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 1)));
            else
                return new(x, y, z, y);
        }
    }
    public readonly ulong4 xyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 2)));
            else
                return new(x, y, z, z);
        }
    }
    public readonly ulong4 rgbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 2)));
            else
                return new(x, y, z, z);
        }
    }
    public readonly ulong4 xzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 0)));
            else
                return new(x, z, x, x);
        }
    }
    public readonly ulong4 rbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 0)));
            else
                return new(x, z, x, x);
        }
    }
    public readonly ulong4 xzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 1)));
            else
                return new(x, z, x, y);
        }
    }
    public readonly ulong4 rbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 1)));
            else
                return new(x, z, x, y);
        }
    }
    public readonly ulong4 xzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 2)));
            else
                return new(x, z, x, z);
        }
    }
    public readonly ulong4 rbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 2)));
            else
                return new(x, z, x, z);
        }
    }
    public readonly ulong4 xzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 0)));
            else
                return new(x, z, y, x);
        }
    }
    public readonly ulong4 rbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 0)));
            else
                return new(x, z, y, x);
        }
    }
    public readonly ulong4 xzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 1)));
            else
                return new(x, z, y, y);
        }
    }
    public readonly ulong4 rbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 1)));
            else
                return new(x, z, y, y);
        }
    }
    public readonly ulong4 xzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 2)));
            else
                return new(x, z, y, z);
        }
    }
    public readonly ulong4 rbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 2)));
            else
                return new(x, z, y, z);
        }
    }
    public readonly ulong4 xzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 0)));
            else
                return new(x, z, z, x);
        }
    }
    public readonly ulong4 rbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 0)));
            else
                return new(x, z, z, x);
        }
    }
    public readonly ulong4 xzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 1)));
            else
                return new(x, z, z, y);
        }
    }
    public readonly ulong4 rbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 1)));
            else
                return new(x, z, z, y);
        }
    }
    public readonly ulong4 xzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 2)));
            else
                return new(x, z, z, z);
        }
    }
    public readonly ulong4 rbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 2)));
            else
                return new(x, z, z, z);
        }
    }
    public readonly ulong4 yxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 0)));
            else
                return new(y, x, x, x);
        }
    }
    public readonly ulong4 grrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 0)));
            else
                return new(y, x, x, x);
        }
    }
    public readonly ulong4 yxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 1)));
            else
                return new(y, x, x, y);
        }
    }
    public readonly ulong4 grrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 1)));
            else
                return new(y, x, x, y);
        }
    }
    public readonly ulong4 yxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 2)));
            else
                return new(y, x, x, z);
        }
    }
    public readonly ulong4 grrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 2)));
            else
                return new(y, x, x, z);
        }
    }
    public readonly ulong4 yxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 0)));
            else
                return new(y, x, y, x);
        }
    }
    public readonly ulong4 grgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 0)));
            else
                return new(y, x, y, x);
        }
    }
    public readonly ulong4 yxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 1)));
            else
                return new(y, x, y, y);
        }
    }
    public readonly ulong4 grgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 1)));
            else
                return new(y, x, y, y);
        }
    }
    public readonly ulong4 yxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 2)));
            else
                return new(y, x, y, z);
        }
    }
    public readonly ulong4 grgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 2)));
            else
                return new(y, x, y, z);
        }
    }
    public readonly ulong4 yxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 0)));
            else
                return new(y, x, z, x);
        }
    }
    public readonly ulong4 grbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 0)));
            else
                return new(y, x, z, x);
        }
    }
    public readonly ulong4 yxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 1)));
            else
                return new(y, x, z, y);
        }
    }
    public readonly ulong4 grbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 1)));
            else
                return new(y, x, z, y);
        }
    }
    public readonly ulong4 yxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 2)));
            else
                return new(y, x, z, z);
        }
    }
    public readonly ulong4 grbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 2)));
            else
                return new(y, x, z, z);
        }
    }
    public readonly ulong4 yyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 0)));
            else
                return new(y, y, x, x);
        }
    }
    public readonly ulong4 ggrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 0)));
            else
                return new(y, y, x, x);
        }
    }
    public readonly ulong4 yyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 1)));
            else
                return new(y, y, x, y);
        }
    }
    public readonly ulong4 ggrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 1)));
            else
                return new(y, y, x, y);
        }
    }
    public readonly ulong4 yyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 2)));
            else
                return new(y, y, x, z);
        }
    }
    public readonly ulong4 ggrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 2)));
            else
                return new(y, y, x, z);
        }
    }
    public readonly ulong4 yyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 0)));
            else
                return new(y, y, y, x);
        }
    }
    public readonly ulong4 gggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 0)));
            else
                return new(y, y, y, x);
        }
    }
    public readonly ulong4 yyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 1)));
            else
                return new(y, y, y, y);
        }
    }
    public readonly ulong4 gggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 1)));
            else
                return new(y, y, y, y);
        }
    }
    public readonly ulong4 yyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 2)));
            else
                return new(y, y, y, z);
        }
    }
    public readonly ulong4 gggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 2)));
            else
                return new(y, y, y, z);
        }
    }
    public readonly ulong4 yyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 0)));
            else
                return new(y, y, z, x);
        }
    }
    public readonly ulong4 ggbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 0)));
            else
                return new(y, y, z, x);
        }
    }
    public readonly ulong4 yyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 1)));
            else
                return new(y, y, z, y);
        }
    }
    public readonly ulong4 ggbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 1)));
            else
                return new(y, y, z, y);
        }
    }
    public readonly ulong4 yyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 2)));
            else
                return new(y, y, z, z);
        }
    }
    public readonly ulong4 ggbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 2)));
            else
                return new(y, y, z, z);
        }
    }
    public readonly ulong4 yzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 0)));
            else
                return new(y, z, x, x);
        }
    }
    public readonly ulong4 gbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 0)));
            else
                return new(y, z, x, x);
        }
    }
    public readonly ulong4 yzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 1)));
            else
                return new(y, z, x, y);
        }
    }
    public readonly ulong4 gbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 1)));
            else
                return new(y, z, x, y);
        }
    }
    public readonly ulong4 yzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 2)));
            else
                return new(y, z, x, z);
        }
    }
    public readonly ulong4 gbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 2)));
            else
                return new(y, z, x, z);
        }
    }
    public readonly ulong4 yzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 0)));
            else
                return new(y, z, y, x);
        }
    }
    public readonly ulong4 gbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 0)));
            else
                return new(y, z, y, x);
        }
    }
    public readonly ulong4 yzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 1)));
            else
                return new(y, z, y, y);
        }
    }
    public readonly ulong4 gbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 1)));
            else
                return new(y, z, y, y);
        }
    }
    public readonly ulong4 yzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 2)));
            else
                return new(y, z, y, z);
        }
    }
    public readonly ulong4 gbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 2)));
            else
                return new(y, z, y, z);
        }
    }
    public readonly ulong4 yzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 0)));
            else
                return new(y, z, z, x);
        }
    }
    public readonly ulong4 gbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 0)));
            else
                return new(y, z, z, x);
        }
    }
    public readonly ulong4 yzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 1)));
            else
                return new(y, z, z, y);
        }
    }
    public readonly ulong4 gbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 1)));
            else
                return new(y, z, z, y);
        }
    }
    public readonly ulong4 yzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 2)));
            else
                return new(y, z, z, z);
        }
    }
    public readonly ulong4 gbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 2)));
            else
                return new(y, z, z, z);
        }
    }
    public readonly ulong4 zxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 0)));
            else
                return new(z, x, x, x);
        }
    }
    public readonly ulong4 brrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 0)));
            else
                return new(z, x, x, x);
        }
    }
    public readonly ulong4 zxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 1)));
            else
                return new(z, x, x, y);
        }
    }
    public readonly ulong4 brrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 1)));
            else
                return new(z, x, x, y);
        }
    }
    public readonly ulong4 zxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 2)));
            else
                return new(z, x, x, z);
        }
    }
    public readonly ulong4 brrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 2)));
            else
                return new(z, x, x, z);
        }
    }
    public readonly ulong4 zxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 0)));
            else
                return new(z, x, y, x);
        }
    }
    public readonly ulong4 brgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 0)));
            else
                return new(z, x, y, x);
        }
    }
    public readonly ulong4 zxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 1)));
            else
                return new(z, x, y, y);
        }
    }
    public readonly ulong4 brgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 1)));
            else
                return new(z, x, y, y);
        }
    }
    public readonly ulong4 zxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 2)));
            else
                return new(z, x, y, z);
        }
    }
    public readonly ulong4 brgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 2)));
            else
                return new(z, x, y, z);
        }
    }
    public readonly ulong4 zxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 0)));
            else
                return new(z, x, z, x);
        }
    }
    public readonly ulong4 brbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 0)));
            else
                return new(z, x, z, x);
        }
    }
    public readonly ulong4 zxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 1)));
            else
                return new(z, x, z, y);
        }
    }
    public readonly ulong4 brbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 1)));
            else
                return new(z, x, z, y);
        }
    }
    public readonly ulong4 zxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 2)));
            else
                return new(z, x, z, z);
        }
    }
    public readonly ulong4 brbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 2)));
            else
                return new(z, x, z, z);
        }
    }
    public readonly ulong4 zyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 0)));
            else
                return new(z, y, x, x);
        }
    }
    public readonly ulong4 bgrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 0)));
            else
                return new(z, y, x, x);
        }
    }
    public readonly ulong4 zyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 1)));
            else
                return new(z, y, x, y);
        }
    }
    public readonly ulong4 bgrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 1)));
            else
                return new(z, y, x, y);
        }
    }
    public readonly ulong4 zyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 2)));
            else
                return new(z, y, x, z);
        }
    }
    public readonly ulong4 bgrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 2)));
            else
                return new(z, y, x, z);
        }
    }
    public readonly ulong4 zyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 0)));
            else
                return new(z, y, y, x);
        }
    }
    public readonly ulong4 bggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 0)));
            else
                return new(z, y, y, x);
        }
    }
    public readonly ulong4 zyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 1)));
            else
                return new(z, y, y, y);
        }
    }
    public readonly ulong4 bggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 1)));
            else
                return new(z, y, y, y);
        }
    }
    public readonly ulong4 zyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 2)));
            else
                return new(z, y, y, z);
        }
    }
    public readonly ulong4 bggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 2)));
            else
                return new(z, y, y, z);
        }
    }
    public readonly ulong4 zyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 0)));
            else
                return new(z, y, z, x);
        }
    }
    public readonly ulong4 bgbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 0)));
            else
                return new(z, y, z, x);
        }
    }
    public readonly ulong4 zyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 1)));
            else
                return new(z, y, z, y);
        }
    }
    public readonly ulong4 bgbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 1)));
            else
                return new(z, y, z, y);
        }
    }
    public readonly ulong4 zyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 2)));
            else
                return new(z, y, z, z);
        }
    }
    public readonly ulong4 bgbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 2)));
            else
                return new(z, y, z, z);
        }
    }
    public readonly ulong4 zzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 0)));
            else
                return new(z, z, x, x);
        }
    }
    public readonly ulong4 bbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 0)));
            else
                return new(z, z, x, x);
        }
    }
    public readonly ulong4 zzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 1)));
            else
                return new(z, z, x, y);
        }
    }
    public readonly ulong4 bbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 1)));
            else
                return new(z, z, x, y);
        }
    }
    public readonly ulong4 zzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 2)));
            else
                return new(z, z, x, z);
        }
    }
    public readonly ulong4 bbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 2)));
            else
                return new(z, z, x, z);
        }
    }
    public readonly ulong4 zzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 0)));
            else
                return new(z, z, y, x);
        }
    }
    public readonly ulong4 bbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 0)));
            else
                return new(z, z, y, x);
        }
    }
    public readonly ulong4 zzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 1)));
            else
                return new(z, z, y, y);
        }
    }
    public readonly ulong4 bbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 1)));
            else
                return new(z, z, y, y);
        }
    }
    public readonly ulong4 zzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 2)));
            else
                return new(z, z, y, z);
        }
    }
    public readonly ulong4 bbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 2)));
            else
                return new(z, z, y, z);
        }
    }
    public readonly ulong4 zzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 0)));
            else
                return new(z, z, z, x);
        }
    }
    public readonly ulong4 bbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 0)));
            else
                return new(z, z, z, x);
        }
    }
    public readonly ulong4 zzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 1)));
            else
                return new(z, z, z, y);
        }
    }
    public readonly ulong4 bbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 1)));
            else
                return new(z, z, z, y);
        }
    }
    public readonly ulong4 zzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 2)));
            else
                return new(z, z, z, z);
        }
    }
    public readonly ulong4 bbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 2)));
            else
                return new(z, z, z, z);
        }
    }
}

#endregion // ulong3

#region decimal3

public partial struct decimal3 
{
    public readonly decimal4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly decimal4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly decimal4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly decimal4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly decimal4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly decimal4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly decimal4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly decimal4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly decimal4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly decimal4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly decimal4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly decimal4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly decimal4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly decimal4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly decimal4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly decimal4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly decimal4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly decimal4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly decimal4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly decimal4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly decimal4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly decimal4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly decimal4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly decimal4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly decimal4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly decimal4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly decimal4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly decimal4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly decimal4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly decimal4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly decimal4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly decimal4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly decimal4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly decimal4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly decimal4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly decimal4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly decimal4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly decimal4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly decimal4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly decimal4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly decimal4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly decimal4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly decimal4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly decimal4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly decimal4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly decimal4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly decimal4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly decimal4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly decimal4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly decimal4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly decimal4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly decimal4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly decimal4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly decimal4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly decimal4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly decimal4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly decimal4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly decimal4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly decimal4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly decimal4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly decimal4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly decimal4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly decimal4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly decimal4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly decimal4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly decimal4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly decimal4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly decimal4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly decimal4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly decimal4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly decimal4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly decimal4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly decimal4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly decimal4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly decimal4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly decimal4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly decimal4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly decimal4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly decimal4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly decimal4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly decimal4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly decimal4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly decimal4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly decimal4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly decimal4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly decimal4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly decimal4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly decimal4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly decimal4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly decimal4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly decimal4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly decimal4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly decimal4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly decimal4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly decimal4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly decimal4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly decimal4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly decimal4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly decimal4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly decimal4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly decimal4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly decimal4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly decimal4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly decimal4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly decimal4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly decimal4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly decimal4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly decimal4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly decimal4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly decimal4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly decimal4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly decimal4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly decimal4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly decimal4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly decimal4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly decimal4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly decimal4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly decimal4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly decimal4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly decimal4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly decimal4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly decimal4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly decimal4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly decimal4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly decimal4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly decimal4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly decimal4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly decimal4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly decimal4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly decimal4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly decimal4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly decimal4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly decimal4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly decimal4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly decimal4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly decimal4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly decimal4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly decimal4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly decimal4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly decimal4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly decimal4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly decimal4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly decimal4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly decimal4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly decimal4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly decimal4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly decimal4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly decimal4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly decimal4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly decimal4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly decimal4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly decimal4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly decimal4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly decimal4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly decimal4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly decimal4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly decimal4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly decimal4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly decimal4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly decimal4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly decimal4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly decimal4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // decimal3

#region half3

public partial struct half3 
{
    public readonly half4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly half4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly half4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly half4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly half4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly half4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly half4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly half4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly half4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly half4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly half4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly half4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly half4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly half4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly half4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly half4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly half4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly half4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly half4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly half4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly half4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly half4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly half4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly half4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly half4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly half4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly half4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly half4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly half4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly half4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly half4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly half4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly half4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly half4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly half4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly half4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly half4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly half4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly half4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly half4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly half4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly half4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly half4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly half4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly half4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly half4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly half4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly half4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly half4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly half4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly half4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly half4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly half4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly half4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly half4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly half4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly half4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly half4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly half4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly half4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly half4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly half4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly half4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly half4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly half4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly half4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly half4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly half4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly half4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly half4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly half4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly half4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly half4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly half4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly half4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly half4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly half4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly half4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly half4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly half4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly half4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly half4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly half4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly half4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly half4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly half4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly half4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly half4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly half4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly half4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly half4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly half4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly half4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly half4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly half4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly half4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly half4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly half4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly half4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly half4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly half4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly half4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly half4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly half4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly half4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly half4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly half4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly half4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly half4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly half4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly half4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly half4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly half4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly half4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly half4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly half4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly half4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly half4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly half4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly half4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly half4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly half4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly half4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly half4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly half4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly half4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly half4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly half4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly half4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly half4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly half4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly half4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly half4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly half4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly half4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly half4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly half4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly half4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly half4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly half4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly half4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly half4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly half4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly half4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly half4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly half4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly half4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly half4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly half4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly half4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly half4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly half4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly half4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly half4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly half4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly half4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly half4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly half4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly half4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly half4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly half4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly half4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // half3

#region b16v3

public partial struct b16v3 
{
    public readonly b16v4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b16v4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b16v4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b16v4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b16v4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b16v4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b16v4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b16v4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b16v4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b16v4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b16v4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b16v4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b16v4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b16v4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b16v4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b16v4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b16v4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b16v4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b16v4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b16v4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b16v4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b16v4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b16v4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b16v4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b16v4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b16v4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b16v4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b16v4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b16v4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b16v4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b16v4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b16v4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b16v4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b16v4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b16v4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b16v4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b16v4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b16v4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b16v4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b16v4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b16v4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b16v4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b16v4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b16v4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b16v4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b16v4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b16v4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b16v4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b16v4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b16v4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b16v4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b16v4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b16v4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b16v4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b16v4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b16v4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b16v4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b16v4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b16v4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b16v4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b16v4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b16v4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b16v4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b16v4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b16v4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b16v4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b16v4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b16v4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b16v4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b16v4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b16v4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b16v4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b16v4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b16v4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b16v4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b16v4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b16v4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b16v4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b16v4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b16v4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b16v4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b16v4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b16v4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b16v4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b16v4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b16v4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b16v4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b16v4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b16v4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b16v4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b16v4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b16v4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b16v4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b16v4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b16v4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b16v4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b16v4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b16v4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b16v4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b16v4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b16v4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b16v4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b16v4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b16v4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b16v4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b16v4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b16v4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b16v4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b16v4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b16v4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b16v4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b16v4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b16v4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b16v4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b16v4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b16v4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b16v4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b16v4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b16v4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b16v4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b16v4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b16v4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b16v4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b16v4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b16v4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b16v4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b16v4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b16v4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b16v4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b16v4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b16v4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b16v4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b16v4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b16v4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b16v4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b16v4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b16v4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b16v4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b16v4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b16v4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b16v4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b16v4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b16v4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b16v4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b16v4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b16v4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b16v4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b16v4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b16v4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b16v4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b16v4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b16v4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b16v4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b16v4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b16v4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b16v4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b16v4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b16v4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b16v4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b16v4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b16v4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly b16v4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // b16v3

#region b32v3

public partial struct b32v3 
{
    public readonly b32v4 xxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 0)));
            else
                return new(x, x, x, x);
        }
    }
    public readonly b32v4 rrrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 0)));
            else
                return new(x, x, x, x);
        }
    }
    public readonly b32v4 xxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 1)));
            else
                return new(x, x, x, y);
        }
    }
    public readonly b32v4 rrrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 1)));
            else
                return new(x, x, x, y);
        }
    }
    public readonly b32v4 xxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 2)));
            else
                return new(x, x, x, z);
        }
    }
    public readonly b32v4 rrrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 2)));
            else
                return new(x, x, x, z);
        }
    }
    public readonly b32v4 xxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 0)));
            else
                return new(x, x, y, x);
        }
    }
    public readonly b32v4 rrgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 0)));
            else
                return new(x, x, y, x);
        }
    }
    public readonly b32v4 xxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 1)));
            else
                return new(x, x, y, y);
        }
    }
    public readonly b32v4 rrgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 1)));
            else
                return new(x, x, y, y);
        }
    }
    public readonly b32v4 xxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 2)));
            else
                return new(x, x, y, z);
        }
    }
    public readonly b32v4 rrgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 2)));
            else
                return new(x, x, y, z);
        }
    }
    public readonly b32v4 xxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 0)));
            else
                return new(x, x, z, x);
        }
    }
    public readonly b32v4 rrbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 0)));
            else
                return new(x, x, z, x);
        }
    }
    public readonly b32v4 xxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 1)));
            else
                return new(x, x, z, y);
        }
    }
    public readonly b32v4 rrbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 1)));
            else
                return new(x, x, z, y);
        }
    }
    public readonly b32v4 xxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 2)));
            else
                return new(x, x, z, z);
        }
    }
    public readonly b32v4 rrbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 2)));
            else
                return new(x, x, z, z);
        }
    }
    public readonly b32v4 xyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 0)));
            else
                return new(x, y, x, x);
        }
    }
    public readonly b32v4 rgrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 0)));
            else
                return new(x, y, x, x);
        }
    }
    public readonly b32v4 xyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 1)));
            else
                return new(x, y, x, y);
        }
    }
    public readonly b32v4 rgrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 1)));
            else
                return new(x, y, x, y);
        }
    }
    public readonly b32v4 xyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 2)));
            else
                return new(x, y, x, z);
        }
    }
    public readonly b32v4 rgrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 2)));
            else
                return new(x, y, x, z);
        }
    }
    public readonly b32v4 xyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 0)));
            else
                return new(x, y, y, x);
        }
    }
    public readonly b32v4 rggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 0)));
            else
                return new(x, y, y, x);
        }
    }
    public readonly b32v4 xyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 1)));
            else
                return new(x, y, y, y);
        }
    }
    public readonly b32v4 rggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 1)));
            else
                return new(x, y, y, y);
        }
    }
    public readonly b32v4 xyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 2)));
            else
                return new(x, y, y, z);
        }
    }
    public readonly b32v4 rggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 2)));
            else
                return new(x, y, y, z);
        }
    }
    public readonly b32v4 xyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 0)));
            else
                return new(x, y, z, x);
        }
    }
    public readonly b32v4 rgbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 0)));
            else
                return new(x, y, z, x);
        }
    }
    public readonly b32v4 xyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 1)));
            else
                return new(x, y, z, y);
        }
    }
    public readonly b32v4 rgbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 1)));
            else
                return new(x, y, z, y);
        }
    }
    public readonly b32v4 xyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 2)));
            else
                return new(x, y, z, z);
        }
    }
    public readonly b32v4 rgbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 2)));
            else
                return new(x, y, z, z);
        }
    }
    public readonly b32v4 xzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 0)));
            else
                return new(x, z, x, x);
        }
    }
    public readonly b32v4 rbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 0)));
            else
                return new(x, z, x, x);
        }
    }
    public readonly b32v4 xzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 1)));
            else
                return new(x, z, x, y);
        }
    }
    public readonly b32v4 rbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 1)));
            else
                return new(x, z, x, y);
        }
    }
    public readonly b32v4 xzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 2)));
            else
                return new(x, z, x, z);
        }
    }
    public readonly b32v4 rbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 2)));
            else
                return new(x, z, x, z);
        }
    }
    public readonly b32v4 xzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 0)));
            else
                return new(x, z, y, x);
        }
    }
    public readonly b32v4 rbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 0)));
            else
                return new(x, z, y, x);
        }
    }
    public readonly b32v4 xzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 1)));
            else
                return new(x, z, y, y);
        }
    }
    public readonly b32v4 rbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 1)));
            else
                return new(x, z, y, y);
        }
    }
    public readonly b32v4 xzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 2)));
            else
                return new(x, z, y, z);
        }
    }
    public readonly b32v4 rbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 2)));
            else
                return new(x, z, y, z);
        }
    }
    public readonly b32v4 xzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 0)));
            else
                return new(x, z, z, x);
        }
    }
    public readonly b32v4 rbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 0)));
            else
                return new(x, z, z, x);
        }
    }
    public readonly b32v4 xzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 1)));
            else
                return new(x, z, z, y);
        }
    }
    public readonly b32v4 rbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 1)));
            else
                return new(x, z, z, y);
        }
    }
    public readonly b32v4 xzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 2)));
            else
                return new(x, z, z, z);
        }
    }
    public readonly b32v4 rbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 2)));
            else
                return new(x, z, z, z);
        }
    }
    public readonly b32v4 yxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 0)));
            else
                return new(y, x, x, x);
        }
    }
    public readonly b32v4 grrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 0)));
            else
                return new(y, x, x, x);
        }
    }
    public readonly b32v4 yxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 1)));
            else
                return new(y, x, x, y);
        }
    }
    public readonly b32v4 grrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 1)));
            else
                return new(y, x, x, y);
        }
    }
    public readonly b32v4 yxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 2)));
            else
                return new(y, x, x, z);
        }
    }
    public readonly b32v4 grrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 2)));
            else
                return new(y, x, x, z);
        }
    }
    public readonly b32v4 yxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 0)));
            else
                return new(y, x, y, x);
        }
    }
    public readonly b32v4 grgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 0)));
            else
                return new(y, x, y, x);
        }
    }
    public readonly b32v4 yxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 1)));
            else
                return new(y, x, y, y);
        }
    }
    public readonly b32v4 grgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 1)));
            else
                return new(y, x, y, y);
        }
    }
    public readonly b32v4 yxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 2)));
            else
                return new(y, x, y, z);
        }
    }
    public readonly b32v4 grgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 2)));
            else
                return new(y, x, y, z);
        }
    }
    public readonly b32v4 yxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 0)));
            else
                return new(y, x, z, x);
        }
    }
    public readonly b32v4 grbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 0)));
            else
                return new(y, x, z, x);
        }
    }
    public readonly b32v4 yxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 1)));
            else
                return new(y, x, z, y);
        }
    }
    public readonly b32v4 grbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 1)));
            else
                return new(y, x, z, y);
        }
    }
    public readonly b32v4 yxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 2)));
            else
                return new(y, x, z, z);
        }
    }
    public readonly b32v4 grbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 2)));
            else
                return new(y, x, z, z);
        }
    }
    public readonly b32v4 yyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 0)));
            else
                return new(y, y, x, x);
        }
    }
    public readonly b32v4 ggrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 0)));
            else
                return new(y, y, x, x);
        }
    }
    public readonly b32v4 yyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 1)));
            else
                return new(y, y, x, y);
        }
    }
    public readonly b32v4 ggrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 1)));
            else
                return new(y, y, x, y);
        }
    }
    public readonly b32v4 yyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 2)));
            else
                return new(y, y, x, z);
        }
    }
    public readonly b32v4 ggrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 2)));
            else
                return new(y, y, x, z);
        }
    }
    public readonly b32v4 yyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 0)));
            else
                return new(y, y, y, x);
        }
    }
    public readonly b32v4 gggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 0)));
            else
                return new(y, y, y, x);
        }
    }
    public readonly b32v4 yyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 1)));
            else
                return new(y, y, y, y);
        }
    }
    public readonly b32v4 gggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 1)));
            else
                return new(y, y, y, y);
        }
    }
    public readonly b32v4 yyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 2)));
            else
                return new(y, y, y, z);
        }
    }
    public readonly b32v4 gggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 2)));
            else
                return new(y, y, y, z);
        }
    }
    public readonly b32v4 yyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 0)));
            else
                return new(y, y, z, x);
        }
    }
    public readonly b32v4 ggbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 0)));
            else
                return new(y, y, z, x);
        }
    }
    public readonly b32v4 yyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 1)));
            else
                return new(y, y, z, y);
        }
    }
    public readonly b32v4 ggbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 1)));
            else
                return new(y, y, z, y);
        }
    }
    public readonly b32v4 yyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 2)));
            else
                return new(y, y, z, z);
        }
    }
    public readonly b32v4 ggbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 2)));
            else
                return new(y, y, z, z);
        }
    }
    public readonly b32v4 yzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 0)));
            else
                return new(y, z, x, x);
        }
    }
    public readonly b32v4 gbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 0)));
            else
                return new(y, z, x, x);
        }
    }
    public readonly b32v4 yzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 1)));
            else
                return new(y, z, x, y);
        }
    }
    public readonly b32v4 gbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 1)));
            else
                return new(y, z, x, y);
        }
    }
    public readonly b32v4 yzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 2)));
            else
                return new(y, z, x, z);
        }
    }
    public readonly b32v4 gbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 2)));
            else
                return new(y, z, x, z);
        }
    }
    public readonly b32v4 yzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 0)));
            else
                return new(y, z, y, x);
        }
    }
    public readonly b32v4 gbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 0)));
            else
                return new(y, z, y, x);
        }
    }
    public readonly b32v4 yzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 1)));
            else
                return new(y, z, y, y);
        }
    }
    public readonly b32v4 gbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 1)));
            else
                return new(y, z, y, y);
        }
    }
    public readonly b32v4 yzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 2)));
            else
                return new(y, z, y, z);
        }
    }
    public readonly b32v4 gbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 2)));
            else
                return new(y, z, y, z);
        }
    }
    public readonly b32v4 yzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 0)));
            else
                return new(y, z, z, x);
        }
    }
    public readonly b32v4 gbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 0)));
            else
                return new(y, z, z, x);
        }
    }
    public readonly b32v4 yzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 1)));
            else
                return new(y, z, z, y);
        }
    }
    public readonly b32v4 gbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 1)));
            else
                return new(y, z, z, y);
        }
    }
    public readonly b32v4 yzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 2)));
            else
                return new(y, z, z, z);
        }
    }
    public readonly b32v4 gbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 2)));
            else
                return new(y, z, z, z);
        }
    }
    public readonly b32v4 zxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 0)));
            else
                return new(z, x, x, x);
        }
    }
    public readonly b32v4 brrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 0)));
            else
                return new(z, x, x, x);
        }
    }
    public readonly b32v4 zxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 1)));
            else
                return new(z, x, x, y);
        }
    }
    public readonly b32v4 brrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 1)));
            else
                return new(z, x, x, y);
        }
    }
    public readonly b32v4 zxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 2)));
            else
                return new(z, x, x, z);
        }
    }
    public readonly b32v4 brrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 2)));
            else
                return new(z, x, x, z);
        }
    }
    public readonly b32v4 zxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 0)));
            else
                return new(z, x, y, x);
        }
    }
    public readonly b32v4 brgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 0)));
            else
                return new(z, x, y, x);
        }
    }
    public readonly b32v4 zxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 1)));
            else
                return new(z, x, y, y);
        }
    }
    public readonly b32v4 brgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 1)));
            else
                return new(z, x, y, y);
        }
    }
    public readonly b32v4 zxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 2)));
            else
                return new(z, x, y, z);
        }
    }
    public readonly b32v4 brgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 2)));
            else
                return new(z, x, y, z);
        }
    }
    public readonly b32v4 zxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 0)));
            else
                return new(z, x, z, x);
        }
    }
    public readonly b32v4 brbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 0)));
            else
                return new(z, x, z, x);
        }
    }
    public readonly b32v4 zxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 1)));
            else
                return new(z, x, z, y);
        }
    }
    public readonly b32v4 brbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 1)));
            else
                return new(z, x, z, y);
        }
    }
    public readonly b32v4 zxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 2)));
            else
                return new(z, x, z, z);
        }
    }
    public readonly b32v4 brbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 2)));
            else
                return new(z, x, z, z);
        }
    }
    public readonly b32v4 zyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 0)));
            else
                return new(z, y, x, x);
        }
    }
    public readonly b32v4 bgrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 0)));
            else
                return new(z, y, x, x);
        }
    }
    public readonly b32v4 zyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 1)));
            else
                return new(z, y, x, y);
        }
    }
    public readonly b32v4 bgrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 1)));
            else
                return new(z, y, x, y);
        }
    }
    public readonly b32v4 zyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 2)));
            else
                return new(z, y, x, z);
        }
    }
    public readonly b32v4 bgrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 2)));
            else
                return new(z, y, x, z);
        }
    }
    public readonly b32v4 zyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 0)));
            else
                return new(z, y, y, x);
        }
    }
    public readonly b32v4 bggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 0)));
            else
                return new(z, y, y, x);
        }
    }
    public readonly b32v4 zyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 1)));
            else
                return new(z, y, y, y);
        }
    }
    public readonly b32v4 bggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 1)));
            else
                return new(z, y, y, y);
        }
    }
    public readonly b32v4 zyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 2)));
            else
                return new(z, y, y, z);
        }
    }
    public readonly b32v4 bggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 2)));
            else
                return new(z, y, y, z);
        }
    }
    public readonly b32v4 zyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 0)));
            else
                return new(z, y, z, x);
        }
    }
    public readonly b32v4 bgbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 0)));
            else
                return new(z, y, z, x);
        }
    }
    public readonly b32v4 zyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 1)));
            else
                return new(z, y, z, y);
        }
    }
    public readonly b32v4 bgbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 1)));
            else
                return new(z, y, z, y);
        }
    }
    public readonly b32v4 zyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 2)));
            else
                return new(z, y, z, z);
        }
    }
    public readonly b32v4 bgbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 2)));
            else
                return new(z, y, z, z);
        }
    }
    public readonly b32v4 zzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 0)));
            else
                return new(z, z, x, x);
        }
    }
    public readonly b32v4 bbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 0)));
            else
                return new(z, z, x, x);
        }
    }
    public readonly b32v4 zzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 1)));
            else
                return new(z, z, x, y);
        }
    }
    public readonly b32v4 bbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 1)));
            else
                return new(z, z, x, y);
        }
    }
    public readonly b32v4 zzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 2)));
            else
                return new(z, z, x, z);
        }
    }
    public readonly b32v4 bbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 2)));
            else
                return new(z, z, x, z);
        }
    }
    public readonly b32v4 zzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 0)));
            else
                return new(z, z, y, x);
        }
    }
    public readonly b32v4 bbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 0)));
            else
                return new(z, z, y, x);
        }
    }
    public readonly b32v4 zzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 1)));
            else
                return new(z, z, y, y);
        }
    }
    public readonly b32v4 bbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 1)));
            else
                return new(z, z, y, y);
        }
    }
    public readonly b32v4 zzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 2)));
            else
                return new(z, z, y, z);
        }
    }
    public readonly b32v4 bbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 2)));
            else
                return new(z, z, y, z);
        }
    }
    public readonly b32v4 zzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 0)));
            else
                return new(z, z, z, x);
        }
    }
    public readonly b32v4 bbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 0)));
            else
                return new(z, z, z, x);
        }
    }
    public readonly b32v4 zzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 1)));
            else
                return new(z, z, z, y);
        }
    }
    public readonly b32v4 bbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 1)));
            else
                return new(z, z, z, y);
        }
    }
    public readonly b32v4 zzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 2)));
            else
                return new(z, z, z, z);
        }
    }
    public readonly b32v4 bbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector128.IsHardwareAccelerated)
                return new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 2)));
            else
                return new(z, z, z, z);
        }
    }
}

#endregion // b32v3

#region b64v3

public partial struct b64v3 
{
    public readonly b64v4 xxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 0)));
            else
                return new(x, x, x, x);
        }
    }
    public readonly b64v4 rrrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 0)));
            else
                return new(x, x, x, x);
        }
    }
    public readonly b64v4 xxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 1)));
            else
                return new(x, x, x, y);
        }
    }
    public readonly b64v4 rrrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 1)));
            else
                return new(x, x, x, y);
        }
    }
    public readonly b64v4 xxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 2)));
            else
                return new(x, x, x, z);
        }
    }
    public readonly b64v4 rrrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 2)));
            else
                return new(x, x, x, z);
        }
    }
    public readonly b64v4 xxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 0)));
            else
                return new(x, x, y, x);
        }
    }
    public readonly b64v4 rrgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 0)));
            else
                return new(x, x, y, x);
        }
    }
    public readonly b64v4 xxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 1)));
            else
                return new(x, x, y, y);
        }
    }
    public readonly b64v4 rrgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 1)));
            else
                return new(x, x, y, y);
        }
    }
    public readonly b64v4 xxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 2)));
            else
                return new(x, x, y, z);
        }
    }
    public readonly b64v4 rrgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 2)));
            else
                return new(x, x, y, z);
        }
    }
    public readonly b64v4 xxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 0)));
            else
                return new(x, x, z, x);
        }
    }
    public readonly b64v4 rrbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 0)));
            else
                return new(x, x, z, x);
        }
    }
    public readonly b64v4 xxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 1)));
            else
                return new(x, x, z, y);
        }
    }
    public readonly b64v4 rrbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 1)));
            else
                return new(x, x, z, y);
        }
    }
    public readonly b64v4 xxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 2)));
            else
                return new(x, x, z, z);
        }
    }
    public readonly b64v4 rrbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 2)));
            else
                return new(x, x, z, z);
        }
    }
    public readonly b64v4 xyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 0)));
            else
                return new(x, y, x, x);
        }
    }
    public readonly b64v4 rgrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 0)));
            else
                return new(x, y, x, x);
        }
    }
    public readonly b64v4 xyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 1)));
            else
                return new(x, y, x, y);
        }
    }
    public readonly b64v4 rgrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 1)));
            else
                return new(x, y, x, y);
        }
    }
    public readonly b64v4 xyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 2)));
            else
                return new(x, y, x, z);
        }
    }
    public readonly b64v4 rgrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 2)));
            else
                return new(x, y, x, z);
        }
    }
    public readonly b64v4 xyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 0)));
            else
                return new(x, y, y, x);
        }
    }
    public readonly b64v4 rggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 0)));
            else
                return new(x, y, y, x);
        }
    }
    public readonly b64v4 xyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 1)));
            else
                return new(x, y, y, y);
        }
    }
    public readonly b64v4 rggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 1)));
            else
                return new(x, y, y, y);
        }
    }
    public readonly b64v4 xyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 2)));
            else
                return new(x, y, y, z);
        }
    }
    public readonly b64v4 rggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 2)));
            else
                return new(x, y, y, z);
        }
    }
    public readonly b64v4 xyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 0)));
            else
                return new(x, y, z, x);
        }
    }
    public readonly b64v4 rgbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 0)));
            else
                return new(x, y, z, x);
        }
    }
    public readonly b64v4 xyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 1)));
            else
                return new(x, y, z, y);
        }
    }
    public readonly b64v4 rgbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 1)));
            else
                return new(x, y, z, y);
        }
    }
    public readonly b64v4 xyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 2)));
            else
                return new(x, y, z, z);
        }
    }
    public readonly b64v4 rgbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 2)));
            else
                return new(x, y, z, z);
        }
    }
    public readonly b64v4 xzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 0)));
            else
                return new(x, z, x, x);
        }
    }
    public readonly b64v4 rbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 0)));
            else
                return new(x, z, x, x);
        }
    }
    public readonly b64v4 xzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 1)));
            else
                return new(x, z, x, y);
        }
    }
    public readonly b64v4 rbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 1)));
            else
                return new(x, z, x, y);
        }
    }
    public readonly b64v4 xzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 2)));
            else
                return new(x, z, x, z);
        }
    }
    public readonly b64v4 rbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 2)));
            else
                return new(x, z, x, z);
        }
    }
    public readonly b64v4 xzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 0)));
            else
                return new(x, z, y, x);
        }
    }
    public readonly b64v4 rbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 0)));
            else
                return new(x, z, y, x);
        }
    }
    public readonly b64v4 xzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 1)));
            else
                return new(x, z, y, y);
        }
    }
    public readonly b64v4 rbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 1)));
            else
                return new(x, z, y, y);
        }
    }
    public readonly b64v4 xzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 2)));
            else
                return new(x, z, y, z);
        }
    }
    public readonly b64v4 rbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 2)));
            else
                return new(x, z, y, z);
        }
    }
    public readonly b64v4 xzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 0)));
            else
                return new(x, z, z, x);
        }
    }
    public readonly b64v4 rbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 0)));
            else
                return new(x, z, z, x);
        }
    }
    public readonly b64v4 xzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 1)));
            else
                return new(x, z, z, y);
        }
    }
    public readonly b64v4 rbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 1)));
            else
                return new(x, z, z, y);
        }
    }
    public readonly b64v4 xzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 2)));
            else
                return new(x, z, z, z);
        }
    }
    public readonly b64v4 rbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 2)));
            else
                return new(x, z, z, z);
        }
    }
    public readonly b64v4 yxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 0)));
            else
                return new(y, x, x, x);
        }
    }
    public readonly b64v4 grrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 0)));
            else
                return new(y, x, x, x);
        }
    }
    public readonly b64v4 yxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 1)));
            else
                return new(y, x, x, y);
        }
    }
    public readonly b64v4 grrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 1)));
            else
                return new(y, x, x, y);
        }
    }
    public readonly b64v4 yxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 2)));
            else
                return new(y, x, x, z);
        }
    }
    public readonly b64v4 grrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 2)));
            else
                return new(y, x, x, z);
        }
    }
    public readonly b64v4 yxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 0)));
            else
                return new(y, x, y, x);
        }
    }
    public readonly b64v4 grgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 0)));
            else
                return new(y, x, y, x);
        }
    }
    public readonly b64v4 yxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 1)));
            else
                return new(y, x, y, y);
        }
    }
    public readonly b64v4 grgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 1)));
            else
                return new(y, x, y, y);
        }
    }
    public readonly b64v4 yxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 2)));
            else
                return new(y, x, y, z);
        }
    }
    public readonly b64v4 grgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 2)));
            else
                return new(y, x, y, z);
        }
    }
    public readonly b64v4 yxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 0)));
            else
                return new(y, x, z, x);
        }
    }
    public readonly b64v4 grbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 0)));
            else
                return new(y, x, z, x);
        }
    }
    public readonly b64v4 yxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 1)));
            else
                return new(y, x, z, y);
        }
    }
    public readonly b64v4 grbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 1)));
            else
                return new(y, x, z, y);
        }
    }
    public readonly b64v4 yxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 2)));
            else
                return new(y, x, z, z);
        }
    }
    public readonly b64v4 grbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 2)));
            else
                return new(y, x, z, z);
        }
    }
    public readonly b64v4 yyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 0)));
            else
                return new(y, y, x, x);
        }
    }
    public readonly b64v4 ggrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 0)));
            else
                return new(y, y, x, x);
        }
    }
    public readonly b64v4 yyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 1)));
            else
                return new(y, y, x, y);
        }
    }
    public readonly b64v4 ggrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 1)));
            else
                return new(y, y, x, y);
        }
    }
    public readonly b64v4 yyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 2)));
            else
                return new(y, y, x, z);
        }
    }
    public readonly b64v4 ggrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 2)));
            else
                return new(y, y, x, z);
        }
    }
    public readonly b64v4 yyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 0)));
            else
                return new(y, y, y, x);
        }
    }
    public readonly b64v4 gggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 0)));
            else
                return new(y, y, y, x);
        }
    }
    public readonly b64v4 yyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 1)));
            else
                return new(y, y, y, y);
        }
    }
    public readonly b64v4 gggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 1)));
            else
                return new(y, y, y, y);
        }
    }
    public readonly b64v4 yyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 2)));
            else
                return new(y, y, y, z);
        }
    }
    public readonly b64v4 gggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 2)));
            else
                return new(y, y, y, z);
        }
    }
    public readonly b64v4 yyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 0)));
            else
                return new(y, y, z, x);
        }
    }
    public readonly b64v4 ggbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 0)));
            else
                return new(y, y, z, x);
        }
    }
    public readonly b64v4 yyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 1)));
            else
                return new(y, y, z, y);
        }
    }
    public readonly b64v4 ggbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 1)));
            else
                return new(y, y, z, y);
        }
    }
    public readonly b64v4 yyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 2)));
            else
                return new(y, y, z, z);
        }
    }
    public readonly b64v4 ggbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 2)));
            else
                return new(y, y, z, z);
        }
    }
    public readonly b64v4 yzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 0)));
            else
                return new(y, z, x, x);
        }
    }
    public readonly b64v4 gbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 0)));
            else
                return new(y, z, x, x);
        }
    }
    public readonly b64v4 yzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 1)));
            else
                return new(y, z, x, y);
        }
    }
    public readonly b64v4 gbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 1)));
            else
                return new(y, z, x, y);
        }
    }
    public readonly b64v4 yzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 2)));
            else
                return new(y, z, x, z);
        }
    }
    public readonly b64v4 gbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 2)));
            else
                return new(y, z, x, z);
        }
    }
    public readonly b64v4 yzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 0)));
            else
                return new(y, z, y, x);
        }
    }
    public readonly b64v4 gbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 0)));
            else
                return new(y, z, y, x);
        }
    }
    public readonly b64v4 yzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 1)));
            else
                return new(y, z, y, y);
        }
    }
    public readonly b64v4 gbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 1)));
            else
                return new(y, z, y, y);
        }
    }
    public readonly b64v4 yzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 2)));
            else
                return new(y, z, y, z);
        }
    }
    public readonly b64v4 gbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 2)));
            else
                return new(y, z, y, z);
        }
    }
    public readonly b64v4 yzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 0)));
            else
                return new(y, z, z, x);
        }
    }
    public readonly b64v4 gbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 0)));
            else
                return new(y, z, z, x);
        }
    }
    public readonly b64v4 yzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 1)));
            else
                return new(y, z, z, y);
        }
    }
    public readonly b64v4 gbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 1)));
            else
                return new(y, z, z, y);
        }
    }
    public readonly b64v4 yzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 2)));
            else
                return new(y, z, z, z);
        }
    }
    public readonly b64v4 gbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 2)));
            else
                return new(y, z, z, z);
        }
    }
    public readonly b64v4 zxxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 0)));
            else
                return new(z, x, x, x);
        }
    }
    public readonly b64v4 brrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 0)));
            else
                return new(z, x, x, x);
        }
    }
    public readonly b64v4 zxxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 1)));
            else
                return new(z, x, x, y);
        }
    }
    public readonly b64v4 brrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 1)));
            else
                return new(z, x, x, y);
        }
    }
    public readonly b64v4 zxxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 2)));
            else
                return new(z, x, x, z);
        }
    }
    public readonly b64v4 brrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 2)));
            else
                return new(z, x, x, z);
        }
    }
    public readonly b64v4 zxyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 0)));
            else
                return new(z, x, y, x);
        }
    }
    public readonly b64v4 brgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 0)));
            else
                return new(z, x, y, x);
        }
    }
    public readonly b64v4 zxyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 1)));
            else
                return new(z, x, y, y);
        }
    }
    public readonly b64v4 brgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 1)));
            else
                return new(z, x, y, y);
        }
    }
    public readonly b64v4 zxyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 2)));
            else
                return new(z, x, y, z);
        }
    }
    public readonly b64v4 brgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 2)));
            else
                return new(z, x, y, z);
        }
    }
    public readonly b64v4 zxzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 0)));
            else
                return new(z, x, z, x);
        }
    }
    public readonly b64v4 brbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 0)));
            else
                return new(z, x, z, x);
        }
    }
    public readonly b64v4 zxzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 1)));
            else
                return new(z, x, z, y);
        }
    }
    public readonly b64v4 brbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 1)));
            else
                return new(z, x, z, y);
        }
    }
    public readonly b64v4 zxzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 2)));
            else
                return new(z, x, z, z);
        }
    }
    public readonly b64v4 brbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 2)));
            else
                return new(z, x, z, z);
        }
    }
    public readonly b64v4 zyxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 0)));
            else
                return new(z, y, x, x);
        }
    }
    public readonly b64v4 bgrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 0)));
            else
                return new(z, y, x, x);
        }
    }
    public readonly b64v4 zyxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 1)));
            else
                return new(z, y, x, y);
        }
    }
    public readonly b64v4 bgrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 1)));
            else
                return new(z, y, x, y);
        }
    }
    public readonly b64v4 zyxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 2)));
            else
                return new(z, y, x, z);
        }
    }
    public readonly b64v4 bgrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 2)));
            else
                return new(z, y, x, z);
        }
    }
    public readonly b64v4 zyyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 0)));
            else
                return new(z, y, y, x);
        }
    }
    public readonly b64v4 bggr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 0)));
            else
                return new(z, y, y, x);
        }
    }
    public readonly b64v4 zyyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 1)));
            else
                return new(z, y, y, y);
        }
    }
    public readonly b64v4 bggg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 1)));
            else
                return new(z, y, y, y);
        }
    }
    public readonly b64v4 zyyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 2)));
            else
                return new(z, y, y, z);
        }
    }
    public readonly b64v4 bggb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 2)));
            else
                return new(z, y, y, z);
        }
    }
    public readonly b64v4 zyzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 0)));
            else
                return new(z, y, z, x);
        }
    }
    public readonly b64v4 bgbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 0)));
            else
                return new(z, y, z, x);
        }
    }
    public readonly b64v4 zyzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 1)));
            else
                return new(z, y, z, y);
        }
    }
    public readonly b64v4 bgbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 1)));
            else
                return new(z, y, z, y);
        }
    }
    public readonly b64v4 zyzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 2)));
            else
                return new(z, y, z, z);
        }
    }
    public readonly b64v4 bgbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 2)));
            else
                return new(z, y, z, z);
        }
    }
    public readonly b64v4 zzxx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 0)));
            else
                return new(z, z, x, x);
        }
    }
    public readonly b64v4 bbrr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 0)));
            else
                return new(z, z, x, x);
        }
    }
    public readonly b64v4 zzxy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 1)));
            else
                return new(z, z, x, y);
        }
    }
    public readonly b64v4 bbrg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 1)));
            else
                return new(z, z, x, y);
        }
    }
    public readonly b64v4 zzxz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 2)));
            else
                return new(z, z, x, z);
        }
    }
    public readonly b64v4 bbrb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 2)));
            else
                return new(z, z, x, z);
        }
    }
    public readonly b64v4 zzyx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 0)));
            else
                return new(z, z, y, x);
        }
    }
    public readonly b64v4 bbgr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 0)));
            else
                return new(z, z, y, x);
        }
    }
    public readonly b64v4 zzyy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 1)));
            else
                return new(z, z, y, y);
        }
    }
    public readonly b64v4 bbgg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 1)));
            else
                return new(z, z, y, y);
        }
    }
    public readonly b64v4 zzyz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 2)));
            else
                return new(z, z, y, z);
        }
    }
    public readonly b64v4 bbgb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 2)));
            else
                return new(z, z, y, z);
        }
    }
    public readonly b64v4 zzzx
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 0)));
            else
                return new(z, z, z, x);
        }
    }
    public readonly b64v4 bbbr
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 0)));
            else
                return new(z, z, z, x);
        }
    }
    public readonly b64v4 zzzy
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 1)));
            else
                return new(z, z, z, y);
        }
    }
    public readonly b64v4 bbbg
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 1)));
            else
                return new(z, z, z, y);
        }
    }
    public readonly b64v4 zzzz
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 2)));
            else
                return new(z, z, z, z);
        }
    }
    public readonly b64v4 bbbb
    {
        [MethodImpl(256 | 512)]
        get
        {
            if (Vector256.IsHardwareAccelerated)
                return new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 2)));
            else
                return new(z, z, z, z);
        }
    }
}

#endregion // b64v3
