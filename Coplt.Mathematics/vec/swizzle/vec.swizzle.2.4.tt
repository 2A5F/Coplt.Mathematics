<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    int[] a01 = [0,1];
    var car_pd_2_3 = (
        from a in a01.AsParallel().AsOrdered()
        from b in a01.AsParallel().AsOrdered()
        from c in a01.AsParallel().AsOrdered()
        from d in a01.AsParallel().AsOrdered()
        select (a, b, c, d)
        ).ToList();
    foreach (var typ in Typ.Typs)
    {
        var byteSize2 = typ.size * 2;
        var bitSize2 = 8 * byteSize2;

        var byteSize4 = typ.size * 4;
        var bitSize4 = 8 * byteSize4;

        var typeName = $"{typ.name}2";
        var retTypeName = $"{typ.name}4";
#>

#region <#= typeName #>

public partial struct <#= typeName #> 
{
<#
        foreach (var (a, b, c, d) in car_pd_2_3)
        {
            var xyzw = $"{Typ.xyzw[a]}{Typ.xyzw[b]}{Typ.xyzw[c]}{Typ.xyzw[d]}";
            var rgba = $"{Typ.rgba[a]}{Typ.rgba[b]}{Typ.rgba[c]}{Typ.rgba[d]}";
            for (var t = 0; t < 2; t++)
            {
#>
    public <#= retTypeName #> <#= t == 0 ? xyzw : rgba #>
    {
<#
                if (typ.simd)
                {
                    WriteLine("#if NET8_0_OR_GREATER");
#>
        [MethodImpl(256 | 512)]
        get => new(Vector<#= bitSize4 #>.Shuffle(vector.ToVector<#= bitSize4 #>(), Vector<#= bitSize4 #>.Create(<#= typ.shuffleCast #><#= a #>, <#= b #>, <#= c #>, <#= d #>)));
<#
                    WriteLine("#else // NET8_0_OR_GREATER");
                }
#>
        [MethodImpl(256 | 512)]
        get => new(<#= Typ.xyzw[a] #>, <#= Typ.xyzw[b] #>, <#= Typ.xyzw[c] #>, <#= Typ.xyzw[d] #>);
<#
                if (typ.simd) WriteLine("#endif // NET8_0_OR_GREATER");
#>
    }
<#
            }
        }
#>
}

#endregion // <#= typeName #>
<#
    }
#>
