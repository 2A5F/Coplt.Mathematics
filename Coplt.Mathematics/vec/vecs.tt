<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    void NoSimdComps(Typ typ, int size)
    {
        for (var c = 0; c < size; c++)
        {
            var comp = Typ.xyzw[c];
            WriteLine($"    private {typ.compType} _{comp};");
            WriteLine($"    public {typ.compType} {comp}");
            WriteLine($"    {{");
            WriteLine($"        [MethodImpl(256 | 512)]");
            WriteLine($"        readonly get => _{comp};");
            WriteLine($"        [MethodImpl(256 | 512)]");
            WriteLine($"        set => _{comp} = value;");
            WriteLine($"    }}");
        }
        if (size == 3)
        {
            WriteLine($"    private {typ.compType} _align;");
        }
    }

    void SimdComps(Typ typ, int size)
    {
        for (var c = 0; c < size; c++)
        {
            var comp = Typ.xyzw[c];
            WriteLine($"    public {typ.compType} {comp}");
            WriteLine($"    {{");
            WriteLine($"        [MethodImpl(256 | 512)]");
            WriteLine($"        readonly get => vector.GetElement({c});");
            WriteLine($"        [MethodImpl(256 | 512)]");
            WriteLine($"        set => vector = vector.WithElement({c}, value);");
            WriteLine($"    }}");
        }
    }

    void ColorComps(Typ typ, int size)
    {
        for (var c = 0; c < size; c++)
        {
            var xyzw = Typ.xyzw[c];
            var rgba = Typ.rgba[c];
            WriteLine($"    public {typ.compType} {rgba}");
            WriteLine($"    {{");
            WriteLine($"        [MethodImpl(256 | 512)]");
            WriteLine($"        readonly get => {xyzw};");
            WriteLine($"        [MethodImpl(256 | 512)]");
            WriteLine($"        set => {xyzw} = value;");
            WriteLine($"    }}");
        }
    }

    void NoSimdCtor(int size)
    {
        for (var c = 0; c < size; c++)
        {
            var comp = Typ.xyzw[c];
            WriteLine($"        this.{comp} = {comp};");
        }
    }

    void SimdCtor(int size, int bitSize)
    {
        Write($"        vector = Vector{bitSize}.Create(");
        var first = true;
        for (var c = 0; c < size; c++)
        {
            if (first) first = false;
            else Write($", ");
            var comp = Typ.xyzw[c];
            Write($"{comp}");
        }
        if (size == 3) Write($", default");
        WriteLine($");");
    }

    void NoSimdCtorSame(int size)
    {
        for (var c = 0; c < size; c++)
        {
            var comp = Typ.xyzw[c];
            WriteLine($"        {comp} = value;");
        }
    }

    void SimdCtorSame(int size, int bitSize, string cast)
    {
        if (size == 3) WriteLine($"        vector = Vector{bitSize}.Create({cast}value, value, value, default);");
        else WriteLine($"        vector = Vector{bitSize}.Create({cast}value);");
    }

    foreach (var typ in Typ.Typs)
    {
        for (var i = 2; i <= 4; i++)
        {
            var byteSize = typ.size * (i is 3 ? 4 : i);
            var bitSize = 8 * byteSize;

            var typeName = $"{typ.name}{i}";
#>
#region <#= typeName #>

[Serializable]
[JsonConverter(typeof(<#= typeName #>JsonConverter))]
public partial struct <#= typeName #> : 
    IVector<#= i #><<#= typ.compType #>>, IVectorSelf<<#= typeName #>>, IVectorSelf<<#= typ.compType #>, <#= typeName #>>
{

    #region Static

    public static bool IsSimdAccelerated
    { 
        [MethodImpl(256 | 512)]
        get => <#= typ.simd ? "true" : "false" #>;
    }
    public static int Length
    { 
        [MethodImpl(256 | 512)]
        get => <#= i #>;
    }
    public static int SizeByte
    { 
        [MethodImpl(256 | 512)]
        get => <#= byteSize #>;
    }
    public static int SizeBit
    { 
        [MethodImpl(256 | 512)]
        get => <#= bitSize #>;
    }

    public static <#= typeName #> Zero
    { 
        [MethodImpl(256 | 512)]
        get => default;
    }

    public static <#= typeName #> One
    { 
        [MethodImpl(256 | 512)]
        get => new(<#= typ.one #>);
    }

    #endregion

    #region fields

<#
            if (typ.simd)
            {
#>
    internal Vector<#= bitSize #><<#= typ.simdComp #>> vector;
    
    #region Unsafe Inner

    [MethodImpl(256 | 512)]
    public static explicit operator Vector<#= bitSize #><<#= typ.simdComp #>>(<#= typeName #> self) => self.vector;

    [MethodImpl(256 | 512), CpuOnly]
    public readonly Vector<#= bitSize #><<#= typ.simdComp #>> UnsafeGetInner() => vector;
    [MethodImpl(256 | 512), UnscopedRef, CpuOnly]
    public ref Vector<#= bitSize #><<#= typ.simdComp #>> UnsafeGetInnerRef() => ref vector;
    [MethodImpl(256 | 512), UnscopedRef, CpuOnly]
    public readonly ref readonly Vector<#= bitSize #><<#= typ.simdComp #>> UnsafeGetInnerRefRo() => ref vector;
    [MethodImpl(256 | 512), CpuOnly]
    public void UnsafeSetInner(Vector<#= bitSize #><<#= typ.simdComp #>> vector) => this.vector = vector;
   
    #endregion // Unsafe Inner    

<#
                SimdComps(typ, i);
            }
            else
            {
                NoSimdComps(typ, i);
            }
            ColorComps(typ, i);
#>

    #endregion

    #region ctors

<#
            if (typ.simd)
            {
#>
    [MethodImpl(256 | 512), CpuOnly]
    internal <#= typeName #>(Vector<#= bitSize #><<#= typ.simdComp #>> vector) => this.vector = vector;
    [MethodImpl(256 | 512), CpuOnly]
    public static <#= typeName #> UnsafeFromInner(Vector<#= bitSize #><<#= typ.simdComp #>> vector) => new(vector);
<#
            }
#>

    [MethodImpl(256 | 512)]
    public <#= typeName #>(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"{typ.compType} {Typ.xyzw[n]}")) #>)
    {
<#
            if (typ.simd)
            {
                SimdCtor(i, bitSize);
            }
            else
            {
                NoSimdCtor(i);
            }
#>
    }

    [MethodImpl(256 | 512)]
    public <#= typeName #>((<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"{typ.compType} {Typ.xyzw[n]}")) #>) tuple) : this(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"tuple.{Typ.xyzw[n]}")) #>) {}

    [MethodImpl(256 | 512)]
    public static implicit operator <#= typeName #>((<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"{typ.compType} {Typ.xyzw[n]}")) #>) tuple) => new(tuple);

    [MethodImpl(256 | 512)]
    public static implicit operator <#= typeName #>(<#= typ.compType #> value) => new(value);

    [MethodImpl(256 | 512)]
    public <#= typeName #>(<#= typ.compType #> value)
    {
<#
            if (typ.simd)
            {
                SimdCtorSame(i, bitSize, typ.shuffleCast);
            }
            else
            {
                NoSimdCtorSame(i);
            }
#>
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> Scalar(<#= typ.compType #> value) => new(value, new is_scalar());

    [MethodImpl(256 | 512)]
    internal <#= typeName #>(<#= typ.compType #> value, is_scalar _)
    {
<#
            if (typ.simd)
            {
#>
        vector = Vector<#= bitSize #>.CreateScalar(<#= typ.bol ? $"({typ.simdComp})" : "" #>value);
<#
            }
            else
            {
#>
        this.x = value;
<#
            }
#>
    }

    [MethodImpl(256 | 512), CpuOnly]
    public static <#= typeName #> Load(ReadOnlySpan<<#= typ.compType #>> span) => new(span);

    [MethodImpl(256 | 512), CpuOnly]
    public <#= typeName #>(ReadOnlySpan<<#= typ.compType #>> span)
    {
<#
            if (typ.simd)
            {
#>
        vector = Vector<#= bitSize #>.LoadUnsafe(in MemoryMarshal.Cast<<#= typ.compType #>, <#= typ.simdComp #>>(span)[0]);
<#
            }
            else
            {
                for (var n = 0; n < i; n++)
                {
#>
        this.<#= Typ.xyzw[n] #> = span[<#= n #>];
<#
                }
            }
#>
    }

    [MethodImpl(256 | 512), CpuOnly]
    public static unsafe <#= typeName #> Load(<#= typ.compType #>* ptr) => new(ptr);

    [MethodImpl(256 | 512), CpuOnly]
    public unsafe <#= typeName #>(<#= typ.compType #>* ptr)
    {
<#
            if (typ.simd)
            {
#>
        vector = Vector<#= bitSize #>.Load((<#= typ.simdComp #>*)ptr);
<#
            }
            else
            {
                for (var n = 0; n < i; n++)
                {
#>
        this.<#= Typ.xyzw[n] #> = ptr[<#= n #>];
<#
                }
            }
#>
    }

    #endregion // ctors

    #region deconstruct

    [MethodImpl(256 | 512)]
    public readonly void Deconstruct(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"out {typ.compType} {Typ.xyzw[n]}")) #>)
    {
<#
            for (var n = 0; n < i; n++)
            {
#>
        <#= Typ.xyzw[n] #> = this.<#= Typ.xyzw[n] #>;
<#
            }
#>
    }

    #endregion // deconstruct

    #region index

    public <#= typ.compType #> this[int i]
    {
        [MethodImpl(256 | 512)]
        readonly get => i switch
        {
<#
            for (var j = 0; j < i; j++)
            {
#>
            <#= j #> => <#= Typ.xyzw[j] #>,
<#
            }
#>
            _ => throw new IndexOutOfRangeException(nameof(i)),
        };
        [MethodImpl(256 | 512)]
        set
        {
            switch (i)
            {
<#
            for (var j = 0; j < i; j++)
            {
#>
                case <#= j #>:
                    <#= Typ.xyzw[j] #> = value;
                    break;
<#
            }
#>
                default:
                    throw new IndexOutOfRangeException(nameof(i));
            }
        }
    }

    #endregion // index
}

public static partial class ctor
{
    [MethodImpl(256 | 512)]
    public static <#= typeName #> <#= typeName #>(<#= typ.compType #> value) => new(value);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> <#= typeName #>(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"{typ.compType} {Typ.xyzw[n]}")) #>) => new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]}")) #>);
}

#endregion // <#= typeName #>
<#
        }
    }
#>
