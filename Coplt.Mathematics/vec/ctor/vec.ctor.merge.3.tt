<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        var typeName = $"{typ.name}3";
        var typeName2 = $"{typ.name}2";
        var type = typ.compType;

        var byteSize = typ.size * 4;
        var bitSize = 8 * byteSize;

        var byteSize2 = typ.size * 2;
        var bitSize2 = 8 * byteSize2;
#>

#region <#= typeName #>

public partial struct <#= typeName #> 
{
    [MethodImpl(256 | 512)]
    public <#= typeName #>(<#= typeName2 #> xy, <#= type #> z)
    {
<#
        if (typ.simd)
        {
#>
        vector = Vector<#= bitSize #>.Create(xy.vector, Vector<#= bitSize2 #>.Create(z, default));
<#
        }
        else
        {
#>
        this.x = xy.x;
        this.y = xy.y;
        this.z = z;
<#
        }
#>
    }

    [MethodImpl(256 | 512)]
    public <#= typeName #>(<#= type #> x, <#= typeName2 #> yz)
    {
<#
        if (typ.simd)
        {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            vector = Vector<#= bitSize #>.Shuffle(
                Vector<#= bitSize #>.Create(Vector<#= bitSize2 #>.Create(x, default), yz.vector),
                Vector<#= bitSize #>.Create(<#= typ.shuffleCast #>0, 2, 3, 1)
            );
        else
            this = new(x, yz.x, yz.y);
<#
        }
        else
        {
#>
        this.x = x;
        this.y = yz.x;
        this.z = yz.y;
<#
        }
#>
    }

    [MethodImpl(256 | 512)]
    internal <#= typeName #>(<#= typeName2 #> xz, <#= type #> y, insert_y _)
    {
<#
        if (typ.simd)
        {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            vector = Vector<#= bitSize #>.Shuffle(
                Vector<#= bitSize #>.Create(xz.vector, Vector<#= bitSize2 #>.Create(y, default)),
                Vector<#= bitSize #>.Create(<#= typ.shuffleCast #>0, 2, 1, 3)
            );
        else
            this = new(xz.x, y, xz.y);
<#
        }
        else
        {
#>
        this.x = xz.x;
        this.y = y;
        this.z = xz.y;
<#
        }
#>
    }
}

public static partial class ctor
{
    [MethodImpl(256 | 512)]
    public static <#= typeName #> <#= typeName #>(<#= typeName2 #> xy, <#= type #> z) => new(xy, z);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> <#= typeName #>(<#= type #> x, <#= typeName2 #> yz) => new(x, yz);
}

public static partial class math_ex
{
    /// <summary>
    /// Insert X component
    /// <code>X -> (y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Ix(this <#= typeName2 #> yz, <#= type #> x) => new(x, yz);

    /// <summary>
    /// Insert Y component
    /// <code>Y -> (x, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Iy(this <#= typeName2 #> xz, <#= type #> y) => new(xz, y, new insert_y());

    /// <summary>
    /// Insert Z component
    /// <code>Z -> (x, y) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Iz(this <#= typeName2 #> xy, <#= type #> z) => new(xy, z);
}

#endregion // <#= typeName #>
<#
    }
#>
