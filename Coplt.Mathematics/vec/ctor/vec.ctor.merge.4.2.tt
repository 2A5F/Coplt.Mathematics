<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        var typeName = $"{typ.name}4";
        var typeName2 = $"{typ.name}2";
        var type = typ.compType;

        var byteSize = typ.size * 4;
        var bitSize = 8 * byteSize;
        
        var byteSize2 = typ.size * 2;
        var bitSize2 = 8 * byteSize2;
#>

#region <#= typeName #>

public partial struct <#= typeName #> 
{
    [MethodImpl(256 | 512)]
    public <#= typeName #>(<#= typeName2 #> xy, <#= typeName2 #> zw)
    {
<#
        if (typ.simd)
        {
#>
        #if NET8_0_OR_GREATER
        vector = Vector<#= bitSize #>.Create(xy.vector, zw.vector);
        #else // NET8_0_OR_GREATER
<#
        }
#>
        this.x = xy.x;
        this.y = xy.y;
        this.z = zw.x;
        this.w = zw.y;
<#
        if (typ.simd)
        {
#>
        #endif // NET8_0_OR_GREATER
<#
        }
#>
    }

    [MethodImpl(256 | 512)]
    public <#= typeName #>(<#= typeName2 #> xy, <#= type #> z, <#= type #> w)
    {
<#
        if (typ.simd)
        {
#>
        #if NET8_0_OR_GREATER
        vector = Vector<#= bitSize #>.Create(xy.vector, Vector<#= bitSize2 #>.Create(z, w));
        #else // NET8_0_OR_GREATER
<#
        }
#>
        this.x = xy.x;
        this.y = xy.y;
        this.z = z;
        this.w = w;
<#
        if (typ.simd)
        {
#>
        #endif // NET8_0_OR_GREATER
<#
        }
#>
    }

    [MethodImpl(256 | 512)]
    public <#= typeName #>(<#= type #> x, <#= type #> y, <#= typeName2 #> zw)
    {
<#
        if (typ.simd)
        {
#>
        #if NET8_0_OR_GREATER
        vector = Vector<#= bitSize #>.Create(Vector<#= bitSize2 #>.Create(x, y), zw.vector);
        #else // NET8_0_OR_GREATER
<#
        }
#>
        this.x = x;
        this.y = y;
        this.z = zw.x;
        this.w = zw.y;
<#
        if (typ.simd)
        {
#>
        #endif // NET8_0_OR_GREATER
<#
        }
#>
    }

    [MethodImpl(256 | 512)]
    public <#= typeName #>(<#= type #> x, <#= typeName2 #> yz, <#= type #> w)
    {
<#
        if (typ.simd)
        {
#>
        #if NET8_0_OR_GREATER
        vector = Vector<#= bitSize #>.Shuffle(
            Vector<#= bitSize #>.Create(Vector<#= bitSize2 #>.Create(x, w), yz.vector),
            Vector<#= bitSize #>.Create(<#= typ.shuffleCast #>0, 2, 3, 1)
        );
        #else // NET8_0_OR_GREATER
<#
        }
#>
        this.x = x;
        this.y = yz.x;
        this.z = yz.y;
        this.w = w;
<#
        if (typ.simd)
        {
#>
        #endif // NET8_0_OR_GREATER
<#
        }
#>
    }

    [MethodImpl(256 | 512)]
    internal <#= typeName #>(<#= typeName2 #> xw, <#= typeName2 #> yz, merge_xw_yz _)
    {
<#
        if (typ.simd)
        {
#>
        #if NET8_0_OR_GREATER
        vector = Vector<#= bitSize #>.Shuffle(
            Vector<#= bitSize #>.Create(xw.vector, yz.vector),
            Vector<#= bitSize #>.Create(<#= typ.shuffleCast #>0, 2, 3, 1)
        );
        #else // NET8_0_OR_GREATER
<#
        }
#>
        this.x = xw.x;
        this.y = yz.x;
        this.z = yz.y;
        this.w = xw.y;
<#
        if (typ.simd)
        {
#>
        #endif // NET8_0_OR_GREATER
<#
        }
#>
    }

    [MethodImpl(256 | 512)]
    internal <#= typeName #>(<#= typeName2 #> xw, <#= type #> y, <#= type #> z, insert_yz _)
    {
<#
        if (typ.simd)
        {
#>
        #if NET8_0_OR_GREATER
        vector = Vector<#= bitSize #>.Shuffle(
            Vector<#= bitSize #>.Create(xw.vector, Vector<#= bitSize2 #>.Create(y, z)),
            Vector<#= bitSize #>.Create(<#= typ.shuffleCast #>0, 2, 3, 1)
        );
        #else // NET8_0_OR_GREATER
<#
        }
#>
        this.x = xw.x;
        this.y = y;
        this.z = z;
        this.w = xw.y;
<#
        if (typ.simd)
        {
#>
        #endif // NET8_0_OR_GREATER
<#
        }
#>
    }

    [MethodImpl(256 | 512)]
    internal <#= typeName #>(<#= typeName2 #> xz, <#= typeName2 #> yw, merge_xz_yw _)
    {
<#
        if (typ.simd)
        {
#>
        #if NET8_0_OR_GREATER
        vector = Vector<#= bitSize #>.Shuffle(
            Vector<#= bitSize #>.Create(xz.vector, yw.vector),
            Vector<#= bitSize #>.Create(<#= typ.shuffleCast #>0, 2, 1, 3)
        );
        #else // NET8_0_OR_GREATER
<#
        }
#>
        this.x = xz.x;
        this.y = yw.x;
        this.z = xz.y;
        this.w = yw.y;
<#
        if (typ.simd)
        {
#>
        #endif // NET8_0_OR_GREATER
<#
        }
#>
    }

    [MethodImpl(256 | 512)]
    internal <#= typeName #>(<#= typeName2 #> xz, <#= type #> y, <#= type #> w, insert_yw _)
    {
<#
        if (typ.simd)
        {
#>
        #if NET8_0_OR_GREATER
        vector = Vector<#= bitSize #>.Shuffle(
            Vector<#= bitSize #>.Create(xz.vector, Vector<#= bitSize2 #>.Create(y, w)),
            Vector<#= bitSize #>.Create(<#= typ.shuffleCast #>0, 2, 1, 3)
        );
        #else // NET8_0_OR_GREATER
<#
        }
#>
        this.x = xz.x;
        this.y = y;
        this.z = xz.y;
        this.w = w;
<#
        if (typ.simd)
        {
#>
        #endif // NET8_0_OR_GREATER
<#
        }
#>
    }

    [MethodImpl(256 | 512)]
    internal <#= typeName #>(<#= typeName2 #> yw, <#= type #> x, <#= type #> z, insert_xz _)
    {
<#
        if (typ.simd)
        {
#>
        #if NET8_0_OR_GREATER
        vector = Vector<#= bitSize #>.Shuffle(
            Vector<#= bitSize #>.Create(Vector<#= bitSize2 #>.Create(x, z), yw.vector),
            Vector<#= bitSize #>.Create(<#= typ.shuffleCast #>0, 2, 1, 3)
        );
        #else // NET8_0_OR_GREATER
<#
        }
#>
        this.x = x;
        this.y = yw.x;
        this.z = z;
        this.w = yw.y;
<#
        if (typ.simd)
        {
#>
        #endif // NET8_0_OR_GREATER
<#
        }
#>
    }
}

public static partial class math
{
    /// <summary>
    /// Insert Z W component
    /// <code>(Z, W) -> (x, y) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Izw(this <#= typeName2 #> xy, <#= typeName2 #> zw) => new(xy, zw);

    /// <summary>
    /// Insert X Y component
    /// <code>(X, Y) -> (z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Ixy(this <#= typeName2 #> zw, <#= typeName2 #> xy) => new(xy, zw);

    /// <summary>
    /// Insert Y Z component
    /// <code>(Y, Z) -> (x, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Iyz(this <#= typeName2 #> xw, <#= typeName2 #> yz) => new(xw, yz, new merge_xw_yz());

    /// <summary>
    /// Insert X W component
    /// <code>(X, W) -> (y, z) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Ixw(this <#= typeName2 #> yz, <#= typeName2 #> xw) => new(xw, yz, new merge_xw_yz());

    /// <summary>
    /// Insert Y W component
    /// <code>(Y, W) -> (x, z) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Iyw(this <#= typeName2 #> xz, <#= typeName2 #> yw) => new(xz, yw, new merge_xz_yw());

    /// <summary>
    /// Insert X Z component
    /// <code>(X, Z) -> (y, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Ixz(this <#= typeName2 #> yw, <#= typeName2 #> xz) => new(xz, yw, new merge_xz_yw());

    /// <summary>
    /// Insert Z W component
    /// <code>Z W -> (x, y) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Izw(this <#= typeName2 #> xy, <#= type #> z, <#= type #> w) => new(xy, z, w);

    /// <summary>
    /// Insert X Y component
    /// <code>X Y -> (z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Ixy(this <#= typeName2 #> zw, <#= type #> x, <#= type #> y) => new(x, y, zw);

    /// <summary>
    /// Insert Y Z component
    /// <code>Y Z -> (x, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Iyz(this <#= typeName2 #> xw, <#= type #> y, <#= type #> z) => new(xw, y, z, new insert_yz());

    /// <summary>
    /// Insert X W component
    /// <code>X W -> (y, z) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Ixw(this <#= typeName2 #> yz, <#= type #> x, <#= type #> w) => new(x, yz, w);

    /// <summary>
    /// Insert Y W component
    /// <code>Y W -> (x, z) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Iyw(this <#= typeName2 #> xz, <#= type #> y, <#= type #> w) => new(xz, y, w, new insert_yw());

    /// <summary>
    /// Insert X Z component
    /// <code>X Z -> (y, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Ixz(this <#= typeName2 #> yw, <#= type #> x, <#= type #> z) => new(yw, x, z, new insert_xz());
}

#endregion // <#= typeName #>
<#
    }
#>
