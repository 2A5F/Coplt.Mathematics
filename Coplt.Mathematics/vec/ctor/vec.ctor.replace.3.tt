<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        var typeName = $"{typ.name}3";
        var typeName2 = $"{typ.name}2";
        var type = typ.compType;

        var byteSize = typ.size * 4;
        var bitSize = 8 * byteSize;
        
        var byteSize2 = typ.size * 2;
        var bitSize2 = 8 * byteSize2;
#>

#region <#= typeName #>

public static partial class math_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Rx(this <#= typeName #> self, <#= type #> x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Ry(this <#= typeName #> self, <#= type #> y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Rz(this <#= typeName #> self, <#= type #> z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Rxy(this <#= typeName #> self, <#= typeName2 #> xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Ryz(this <#= typeName #> self, <#= typeName2 #> yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Rxz(this <#= typeName #> self, <#= typeName2 #> xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // <#= typeName #>
<#
    }
#>
