// generated by template, do not modify manually

namespace Coplt.Mathematics;

#region float3

public static partial class math
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3 Rx(this float3 self, float x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3 Ry(this float3 self, float y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3 Rz(this float3 self, float z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3 Rxy(this float3 self, float2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3 Ryz(this float3 self, float2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3 Rxz(this float3 self, float2 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // float3

#region double3

public static partial class math
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3 Rx(this double3 self, double x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3 Ry(this double3 self, double y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3 Rz(this double3 self, double z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3 Rxy(this double3 self, double2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3 Ryz(this double3 self, double2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3 Rxz(this double3 self, double2 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // double3

#region short3

public static partial class math
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short3 Rx(this short3 self, short x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short3 Ry(this short3 self, short y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short3 Rz(this short3 self, short z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short3 Rxy(this short3 self, short2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short3 Ryz(this short3 self, short2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short3 Rxz(this short3 self, short2 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // short3

#region ushort3

public static partial class math
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort3 Rx(this ushort3 self, ushort x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort3 Ry(this ushort3 self, ushort y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort3 Rz(this ushort3 self, ushort z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort3 Rxy(this ushort3 self, ushort2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort3 Ryz(this ushort3 self, ushort2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort3 Rxz(this ushort3 self, ushort2 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // ushort3

#region int3

public static partial class math
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3 Rx(this int3 self, int x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3 Ry(this int3 self, int y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3 Rz(this int3 self, int z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3 Rxy(this int3 self, int2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3 Ryz(this int3 self, int2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3 Rxz(this int3 self, int2 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // int3

#region uint3

public static partial class math
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3 Rx(this uint3 self, uint x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3 Ry(this uint3 self, uint y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3 Rz(this uint3 self, uint z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3 Rxy(this uint3 self, uint2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3 Ryz(this uint3 self, uint2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3 Rxz(this uint3 self, uint2 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // uint3

#region long3

public static partial class math
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3 Rx(this long3 self, long x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3 Ry(this long3 self, long y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3 Rz(this long3 self, long z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3 Rxy(this long3 self, long2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3 Ryz(this long3 self, long2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3 Rxz(this long3 self, long2 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // long3

#region ulong3

public static partial class math
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3 Rx(this ulong3 self, ulong x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3 Ry(this ulong3 self, ulong y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3 Rz(this ulong3 self, ulong z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3 Rxy(this ulong3 self, ulong2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3 Ryz(this ulong3 self, ulong2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3 Rxz(this ulong3 self, ulong2 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // ulong3

#region decimal3

public static partial class math
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal3 Rx(this decimal3 self, decimal x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal3 Ry(this decimal3 self, decimal y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal3 Rz(this decimal3 self, decimal z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal3 Rxy(this decimal3 self, decimal2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal3 Ryz(this decimal3 self, decimal2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal3 Rxz(this decimal3 self, decimal2 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // decimal3

#region half3

public static partial class math
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half3 Rx(this half3 self, half x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half3 Ry(this half3 self, half y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half3 Rz(this half3 self, half z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half3 Rxy(this half3 self, half2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half3 Ryz(this half3 self, half2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half3 Rxz(this half3 self, half2 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // half3

#region b16v3

public static partial class math
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v3 Rx(this b16v3 self, b16 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v3 Ry(this b16v3 self, b16 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v3 Rz(this b16v3 self, b16 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v3 Rxy(this b16v3 self, b16v2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v3 Ryz(this b16v3 self, b16v2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v3 Rxz(this b16v3 self, b16v2 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // b16v3

#region b32v3

public static partial class math
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3 Rx(this b32v3 self, b32 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3 Ry(this b32v3 self, b32 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3 Rz(this b32v3 self, b32 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3 Rxy(this b32v3 self, b32v2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3 Ryz(this b32v3 self, b32v2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3 Rxz(this b32v3 self, b32v2 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // b32v3

#region b64v3

public static partial class math
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3 Rx(this b64v3 self, b64 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3 Ry(this b64v3 self, b64 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3 Rz(this b64v3 self, b64 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3 Rxy(this b64v3 self, b64v2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3 Ryz(this b64v3 self, b64v2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3 Rxz(this b64v3 self, b64v2 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // b64v3
