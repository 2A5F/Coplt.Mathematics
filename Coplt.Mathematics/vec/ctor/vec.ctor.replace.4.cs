// generated by template, do not modify manually

namespace Coplt.Mathematics;

#region float4

public static partial class math_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 Rx(this float4 self, float x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 Ry(this float4 self, float y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 Rz(this float4 self, float z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 Rw(this float4 self, float w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 Rxy(this float4 self, float2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 Ryz(this float4 self, float2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 Rzw(this float4 self, float2 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 Rxz(this float4 self, float2 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 Ryw(this float4 self, float2 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 Rxw(this float4 self, float2 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 Rxyz(this float4 self, float3 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 Ryzw(this float4 self, float3 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 Rxyw(this float4 self, float3 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4 Rxzw(this float4 self, float3 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // float4

#region double4

public static partial class math_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 Rx(this double4 self, double x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 Ry(this double4 self, double y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 Rz(this double4 self, double z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 Rw(this double4 self, double w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 Rxy(this double4 self, double2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 Ryz(this double4 self, double2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 Rzw(this double4 self, double2 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 Rxz(this double4 self, double2 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 Ryw(this double4 self, double2 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 Rxw(this double4 self, double2 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 Rxyz(this double4 self, double3 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 Ryzw(this double4 self, double3 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 Rxyw(this double4 self, double3 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4 Rxzw(this double4 self, double3 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // double4

#region short4

public static partial class math_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 Rx(this short4 self, short x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 Ry(this short4 self, short y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 Rz(this short4 self, short z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 Rw(this short4 self, short w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 Rxy(this short4 self, short2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 Ryz(this short4 self, short2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 Rzw(this short4 self, short2 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 Rxz(this short4 self, short2 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 Ryw(this short4 self, short2 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 Rxw(this short4 self, short2 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 Rxyz(this short4 self, short3 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 Ryzw(this short4 self, short3 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 Rxyw(this short4 self, short3 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static short4 Rxzw(this short4 self, short3 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // short4

#region ushort4

public static partial class math_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 Rx(this ushort4 self, ushort x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 Ry(this ushort4 self, ushort y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 Rz(this ushort4 self, ushort z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 Rw(this ushort4 self, ushort w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 Rxy(this ushort4 self, ushort2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 Ryz(this ushort4 self, ushort2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 Rzw(this ushort4 self, ushort2 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 Rxz(this ushort4 self, ushort2 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 Ryw(this ushort4 self, ushort2 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 Rxw(this ushort4 self, ushort2 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 Rxyz(this ushort4 self, ushort3 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 Ryzw(this ushort4 self, ushort3 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 Rxyw(this ushort4 self, ushort3 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ushort4 Rxzw(this ushort4 self, ushort3 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // ushort4

#region int4

public static partial class math_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 Rx(this int4 self, int x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 Ry(this int4 self, int y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 Rz(this int4 self, int z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 Rw(this int4 self, int w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 Rxy(this int4 self, int2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 Ryz(this int4 self, int2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 Rzw(this int4 self, int2 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 Rxz(this int4 self, int2 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 Ryw(this int4 self, int2 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 Rxw(this int4 self, int2 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 Rxyz(this int4 self, int3 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 Ryzw(this int4 self, int3 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 Rxyw(this int4 self, int3 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4 Rxzw(this int4 self, int3 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // int4

#region uint4

public static partial class math_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 Rx(this uint4 self, uint x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 Ry(this uint4 self, uint y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 Rz(this uint4 self, uint z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 Rw(this uint4 self, uint w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 Rxy(this uint4 self, uint2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 Ryz(this uint4 self, uint2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 Rzw(this uint4 self, uint2 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 Rxz(this uint4 self, uint2 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 Ryw(this uint4 self, uint2 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 Rxw(this uint4 self, uint2 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 Rxyz(this uint4 self, uint3 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 Ryzw(this uint4 self, uint3 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 Rxyw(this uint4 self, uint3 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4 Rxzw(this uint4 self, uint3 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // uint4

#region long4

public static partial class math_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 Rx(this long4 self, long x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 Ry(this long4 self, long y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 Rz(this long4 self, long z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 Rw(this long4 self, long w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 Rxy(this long4 self, long2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 Ryz(this long4 self, long2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 Rzw(this long4 self, long2 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 Rxz(this long4 self, long2 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 Ryw(this long4 self, long2 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 Rxw(this long4 self, long2 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 Rxyz(this long4 self, long3 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 Ryzw(this long4 self, long3 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 Rxyw(this long4 self, long3 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4 Rxzw(this long4 self, long3 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // long4

#region ulong4

public static partial class math_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 Rx(this ulong4 self, ulong x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 Ry(this ulong4 self, ulong y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 Rz(this ulong4 self, ulong z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 Rw(this ulong4 self, ulong w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 Rxy(this ulong4 self, ulong2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 Ryz(this ulong4 self, ulong2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 Rzw(this ulong4 self, ulong2 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 Rxz(this ulong4 self, ulong2 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 Ryw(this ulong4 self, ulong2 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 Rxw(this ulong4 self, ulong2 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 Rxyz(this ulong4 self, ulong3 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 Ryzw(this ulong4 self, ulong3 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 Rxyw(this ulong4 self, ulong3 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4 Rxzw(this ulong4 self, ulong3 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // ulong4

#region decimal4

public static partial class math_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 Rx(this decimal4 self, decimal x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 Ry(this decimal4 self, decimal y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 Rz(this decimal4 self, decimal z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 Rw(this decimal4 self, decimal w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 Rxy(this decimal4 self, decimal2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 Ryz(this decimal4 self, decimal2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 Rzw(this decimal4 self, decimal2 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 Rxz(this decimal4 self, decimal2 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 Ryw(this decimal4 self, decimal2 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 Rxw(this decimal4 self, decimal2 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 Rxyz(this decimal4 self, decimal3 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 Ryzw(this decimal4 self, decimal3 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 Rxyw(this decimal4 self, decimal3 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static decimal4 Rxzw(this decimal4 self, decimal3 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // decimal4

#region half4

public static partial class math_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 Rx(this half4 self, half x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 Ry(this half4 self, half y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 Rz(this half4 self, half z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 Rw(this half4 self, half w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 Rxy(this half4 self, half2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 Ryz(this half4 self, half2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 Rzw(this half4 self, half2 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 Rxz(this half4 self, half2 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 Ryw(this half4 self, half2 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 Rxw(this half4 self, half2 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 Rxyz(this half4 self, half3 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 Ryzw(this half4 self, half3 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 Rxyw(this half4 self, half3 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static half4 Rxzw(this half4 self, half3 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // half4

#region b16v4

public static partial class math_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 Rx(this b16v4 self, b16 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 Ry(this b16v4 self, b16 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 Rz(this b16v4 self, b16 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 Rw(this b16v4 self, b16 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 Rxy(this b16v4 self, b16v2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 Ryz(this b16v4 self, b16v2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 Rzw(this b16v4 self, b16v2 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 Rxz(this b16v4 self, b16v2 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 Ryw(this b16v4 self, b16v2 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 Rxw(this b16v4 self, b16v2 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 Rxyz(this b16v4 self, b16v3 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 Ryzw(this b16v4 self, b16v3 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 Rxyw(this b16v4 self, b16v3 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b16v4 Rxzw(this b16v4 self, b16v3 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // b16v4

#region b32v4

public static partial class math_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 Rx(this b32v4 self, b32 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 Ry(this b32v4 self, b32 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 Rz(this b32v4 self, b32 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 Rw(this b32v4 self, b32 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 Rxy(this b32v4 self, b32v2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 Ryz(this b32v4 self, b32v2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 Rzw(this b32v4 self, b32v2 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 Rxz(this b32v4 self, b32v2 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 Ryw(this b32v4 self, b32v2 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 Rxw(this b32v4 self, b32v2 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 Rxyz(this b32v4 self, b32v3 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 Ryzw(this b32v4 self, b32v3 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 Rxyw(this b32v4 self, b32v3 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4 Rxzw(this b32v4 self, b32v3 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // b32v4

#region b64v4

public static partial class math_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 Rx(this b64v4 self, b64 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 Ry(this b64v4 self, b64 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 Rz(this b64v4 self, b64 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 Rw(this b64v4 self, b64 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 Rxy(this b64v4 self, b64v2 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 Ryz(this b64v4 self, b64v2 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 Rzw(this b64v4 self, b64v2 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 Rxz(this b64v4 self, b64v2 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 Ryw(this b64v4 self, b64v2 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 Rxw(this b64v4 self, b64v2 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 Rxyz(this b64v4 self, b64v3 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 Ryzw(this b64v4 self, b64v3 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 Rxyw(this b64v4 self, b64v3 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4 Rxzw(this b64v4 self, b64v3 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // b64v4
