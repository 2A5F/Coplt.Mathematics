// generated by template, do not modify manually

namespace Coplt.Mathematics;

#region float2

public partial struct float2 
{
    public float4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // float2

#region double2

public partial struct double2 
{
    public double4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // double2

#region int2

public partial struct int2 
{
    public int4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // int2

#region uint2

public partial struct uint2 
{
    public uint4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // uint2

#region long2

public partial struct long2 
{
    public long4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // long2

#region ulong2

public partial struct ulong2 
{
    public ulong4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong2

#region decimal2

public partial struct decimal2 
{
    public decimal4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public decimal4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public decimal4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public decimal4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public decimal4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public decimal4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public decimal4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public decimal4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public decimal4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public decimal4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public decimal4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public decimal4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public decimal4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public decimal4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public decimal4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public decimal4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public decimal4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public decimal4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public decimal4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public decimal4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public decimal4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public decimal4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public decimal4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public decimal4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public decimal4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public decimal4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public decimal4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public decimal4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public decimal4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public decimal4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public decimal4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public decimal4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
}

#endregion // decimal2

#region half2

public partial struct half2 
{
    public half4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public half4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public half4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public half4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public half4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public half4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public half4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public half4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public half4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public half4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public half4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public half4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public half4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public half4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public half4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public half4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public half4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public half4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public half4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public half4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public half4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public half4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public half4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public half4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public half4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public half4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public half4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public half4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public half4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public half4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public half4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public half4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
}

#endregion // half2

#region b16v2

public partial struct b16v2 
{
    public b16v4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public b16v4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public b16v4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public b16v4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public b16v4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public b16v4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public b16v4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public b16v4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public b16v4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public b16v4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public b16v4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public b16v4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public b16v4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public b16v4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public b16v4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public b16v4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public b16v4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public b16v4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public b16v4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public b16v4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public b16v4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public b16v4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public b16v4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public b16v4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public b16v4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public b16v4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public b16v4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public b16v4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public b16v4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public b16v4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public b16v4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public b16v4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
}

#endregion // b16v2

#region b32v2

public partial struct b32v2 
{
    public b32v4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector.ToVector128(), Vector128.Create((uint)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // b32v2

#region b64v2

public partial struct b64v2 
{
    public b64v4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector.ToVector256(), Vector256.Create((ulong)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // b64v2
