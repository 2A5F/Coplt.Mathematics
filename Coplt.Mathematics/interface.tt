<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;

public interface IVectorBitops;

public interface IVector 
{
    #if NET8_0_OR_GREATER
    public static abstract bool IsSimdAccelerated { get; }
    public static abstract int Length { get; }
    public static abstract int SizeByte { get; }
    public static abstract int SizeBit { get; }
    #endif
}

public interface IVector2 : IVector;
public interface IVector3 : IVector;
public interface IVector4 : IVector;

public interface IVector<T> : IVector;

public interface IVector2<T> : IVector<T>, IVector2;
public interface IVector3<T> : IVector<T>, IVector3;
public interface IVector4<T> : IVector<T>, IVector4;

public interface IVectorSelf<out Self> where Self : IVectorSelf<Self>
{
#if NET8_0_OR_GREATER
    public static abstract Self Zero { get; }
    public static abstract Self One { get; }
#endif
}

public interface IMatrixBitops;

public interface IMatrix
{
    #if NET8_0_OR_GREATER
    public static abstract bool IsSimdAccelerated { get; }
    public static abstract int Length { get; }
    public static abstract int2 Size { get; }
    #endif
}

public interface IMatrix<T> : IMatrix;

<#
    for (var n = 2; n <= 4; n++)
    {
        for (var m = 2; m <= 4; m++)
        {
#>
public interface IMatrix<#= n #>x<#= m #> : IMatrix;
public interface IMatrix<#= n #>x<#= m #><T> : IMatrix<T>, IMatrix<#= n #>x<#= m #>;
<#
        }
    }
#>

public interface IMatrixSelf<out Self> where Self : IMatrixSelf<Self>
{
#if NET8_0_OR_GREATER
    public static abstract Self Zero { get; }
    public static abstract Self One { get; }
    public static abstract Self Identity { get; }
#endif
}
