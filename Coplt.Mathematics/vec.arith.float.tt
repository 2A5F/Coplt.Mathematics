<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        if (!typ.f) continue;
        if (!typ.arith) continue;

        for (var i = 2; i <= 4; i++)
        {
            var typeName = $"{typ.name}{i}";

            var byteSize = typ.size * (i is 3 ? 4 : i);
            var bitSize = 8 * byteSize;
#>

#region <#= typeName #>

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static <#= typeName #> ceil(this <#= typeName #> a)
    {
<#
            if (typ.simd)
            {
#>
        #if NET8_0_OR_GREATER
        return new(Vector<#= bitSize #>.Ceiling(a.vector));
        #else // NET8_0_OR_GREATER
<#
            }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.ceil()")) #>);
<#
            if (typ.simd)
            {
#>
        #endif // NET8_0_OR_GREATER
<#
            }
#>
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> floor(this <#= typeName #> a)
    {
<#
            if (typ.simd)
            {
#>
        #if NET8_0_OR_GREATER
        return new(Vector<#= bitSize #>.Floor(a.vector));
        #else // NET8_0_OR_GREATER
<#
            }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.floor()")) #>);
<#
            if (typ.simd)
            {
#>
        #endif // NET8_0_OR_GREATER
<#
            }
#>
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> round(this <#= typeName #> a)
    {
<#
            if (typ.simd)
            {
#>
        #if NET8_0_OR_GREATER
        return new(simd.Round(a.vector));
        #else // NET8_0_OR_GREATER
<#
            }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.round()")) #>);
<#
            if (typ.simd)
            {
#>
        #endif // NET8_0_OR_GREATER
<#
            }
#>
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> trunc(this <#= typeName #> a)
    {
<#
            if (typ.simd)
            {
#>
        #if NET8_0_OR_GREATER
        return new(simd.Truncate(a.vector));
        #else // NET8_0_OR_GREATER
<#
            }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.trunc()")) #>);
<#
            if (typ.simd)
            {
#>
        #endif // NET8_0_OR_GREATER
<#
            }
#>
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> frac(this <#= typeName #> a)
    {
<#
            if (typ.simd)
            {
#>
        #if NET8_0_OR_GREATER
        return new(a.vector - Vector<#= bitSize #>.Floor(a.vector));
        #else // NET8_0_OR_GREATER
<#
            }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.frac()")) #>);
<#
            if (typ.simd)
            {
#>
        #endif // NET8_0_OR_GREATER
<#
            }
#>
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> rcp(this <#= typeName #> a)
    {
<#
            if (typ.simd)
            {
#>
        #if NET8_0_OR_GREATER
        return <#= typeName #>.One / a;
        #else // NET8_0_OR_GREATER
<#
            }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.rcp()")) #>);
<#
            if (typ.simd)
            {
#>
        #endif // NET8_0_OR_GREATER
<#
            }
#>
    }
}

#endregion // <#= typeName #>
<#
        }
    }
#>
