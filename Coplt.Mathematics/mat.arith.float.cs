// generated by template, do not modify manually

namespace Coplt.Mathematics;

#region float2x2

public partial struct float2x2
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float2x2 ceil(this float2x2 a) => 
        new(a.c0.ceil(), a.c1.ceil());

    [MethodImpl(256 | 512)]
    public static float2x2 floor(this float2x2 a) => 
        new(a.c0.floor(), a.c1.floor());

    [MethodImpl(256 | 512)]
    public static float2x2 round(this float2x2 a) => 
        new(a.c0.round(), a.c1.round());

    [MethodImpl(256 | 512)]
    public static float2x2 trunc(this float2x2 a) => 
        new(a.c0.trunc(), a.c1.trunc());

    [MethodImpl(256 | 512)]
    public static float2x2 frac(this float2x2 a) => 
        new(a.c0.frac(), a.c1.frac());

    [MethodImpl(256 | 512)]
    public static float2x2 modf(this float2x2 a, out float2x2 i)
    {
        float2x2 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1));
        i = new(i0, i1);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static float2x2 rcp(this float2x2 a) => 
        new(a.c0.rcp(), a.c1.rcp());

    [MethodImpl(256 | 512)]
    public static float2x2 saturate(this float2x2 a) => 
        new(a.c0.saturate(), a.c1.saturate());

    [MethodImpl(256 | 512)]
    public static float2x2 smoothstep(this float2x2 a, float2x2 min, float2x2 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static float2x2 radians(this float2x2 a) => 
        new(a.c0.radians(), a.c1.radians());

    [MethodImpl(256 | 512)]
    public static float2x2 degrees(this float2x2 a) => 
        new(a.c0.degrees(), a.c1.degrees());
}

#endregion // float2x2

#region float2x3

public partial struct float2x3
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float2x3 ceil(this float2x3 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil());

    [MethodImpl(256 | 512)]
    public static float2x3 floor(this float2x3 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor());

    [MethodImpl(256 | 512)]
    public static float2x3 round(this float2x3 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round());

    [MethodImpl(256 | 512)]
    public static float2x3 trunc(this float2x3 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc());

    [MethodImpl(256 | 512)]
    public static float2x3 frac(this float2x3 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac());

    [MethodImpl(256 | 512)]
    public static float2x3 modf(this float2x3 a, out float2x3 i)
    {
        float2x3 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2));
        i = new(i0, i1, i2);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static float2x3 rcp(this float2x3 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp());

    [MethodImpl(256 | 512)]
    public static float2x3 saturate(this float2x3 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate());

    [MethodImpl(256 | 512)]
    public static float2x3 smoothstep(this float2x3 a, float2x3 min, float2x3 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static float2x3 radians(this float2x3 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians());

    [MethodImpl(256 | 512)]
    public static float2x3 degrees(this float2x3 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees());
}

#endregion // float2x3

#region float2x4

public partial struct float2x4
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float2x4 ceil(this float2x4 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil(), a.c3.ceil());

    [MethodImpl(256 | 512)]
    public static float2x4 floor(this float2x4 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor(), a.c3.floor());

    [MethodImpl(256 | 512)]
    public static float2x4 round(this float2x4 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round(), a.c3.round());

    [MethodImpl(256 | 512)]
    public static float2x4 trunc(this float2x4 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc(), a.c3.trunc());

    [MethodImpl(256 | 512)]
    public static float2x4 frac(this float2x4 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac(), a.c3.frac());

    [MethodImpl(256 | 512)]
    public static float2x4 modf(this float2x4 a, out float2x4 i)
    {
        float2x4 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2), a.c3.modf(out var i3));
        i = new(i0, i1, i2, i3);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static float2x4 rcp(this float2x4 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp(), a.c3.rcp());

    [MethodImpl(256 | 512)]
    public static float2x4 saturate(this float2x4 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate(), a.c3.saturate());

    [MethodImpl(256 | 512)]
    public static float2x4 smoothstep(this float2x4 a, float2x4 min, float2x4 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2), a.c3.smoothstep(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static float2x4 radians(this float2x4 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians(), a.c3.radians());

    [MethodImpl(256 | 512)]
    public static float2x4 degrees(this float2x4 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees(), a.c3.degrees());
}

#endregion // float2x4

#region float3x2

public partial struct float3x2
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float3x2 ceil(this float3x2 a) => 
        new(a.c0.ceil(), a.c1.ceil());

    [MethodImpl(256 | 512)]
    public static float3x2 floor(this float3x2 a) => 
        new(a.c0.floor(), a.c1.floor());

    [MethodImpl(256 | 512)]
    public static float3x2 round(this float3x2 a) => 
        new(a.c0.round(), a.c1.round());

    [MethodImpl(256 | 512)]
    public static float3x2 trunc(this float3x2 a) => 
        new(a.c0.trunc(), a.c1.trunc());

    [MethodImpl(256 | 512)]
    public static float3x2 frac(this float3x2 a) => 
        new(a.c0.frac(), a.c1.frac());

    [MethodImpl(256 | 512)]
    public static float3x2 modf(this float3x2 a, out float3x2 i)
    {
        float3x2 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1));
        i = new(i0, i1);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static float3x2 rcp(this float3x2 a) => 
        new(a.c0.rcp(), a.c1.rcp());

    [MethodImpl(256 | 512)]
    public static float3x2 saturate(this float3x2 a) => 
        new(a.c0.saturate(), a.c1.saturate());

    [MethodImpl(256 | 512)]
    public static float3x2 smoothstep(this float3x2 a, float3x2 min, float3x2 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static float3x2 radians(this float3x2 a) => 
        new(a.c0.radians(), a.c1.radians());

    [MethodImpl(256 | 512)]
    public static float3x2 degrees(this float3x2 a) => 
        new(a.c0.degrees(), a.c1.degrees());
}

#endregion // float3x2

#region float3x3

public partial struct float3x3
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float3x3 ceil(this float3x3 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil());

    [MethodImpl(256 | 512)]
    public static float3x3 floor(this float3x3 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor());

    [MethodImpl(256 | 512)]
    public static float3x3 round(this float3x3 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round());

    [MethodImpl(256 | 512)]
    public static float3x3 trunc(this float3x3 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc());

    [MethodImpl(256 | 512)]
    public static float3x3 frac(this float3x3 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac());

    [MethodImpl(256 | 512)]
    public static float3x3 modf(this float3x3 a, out float3x3 i)
    {
        float3x3 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2));
        i = new(i0, i1, i2);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static float3x3 rcp(this float3x3 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp());

    [MethodImpl(256 | 512)]
    public static float3x3 saturate(this float3x3 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate());

    [MethodImpl(256 | 512)]
    public static float3x3 smoothstep(this float3x3 a, float3x3 min, float3x3 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static float3x3 radians(this float3x3 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians());

    [MethodImpl(256 | 512)]
    public static float3x3 degrees(this float3x3 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees());
}

#endregion // float3x3

#region float3x4

public partial struct float3x4
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float3x4 ceil(this float3x4 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil(), a.c3.ceil());

    [MethodImpl(256 | 512)]
    public static float3x4 floor(this float3x4 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor(), a.c3.floor());

    [MethodImpl(256 | 512)]
    public static float3x4 round(this float3x4 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round(), a.c3.round());

    [MethodImpl(256 | 512)]
    public static float3x4 trunc(this float3x4 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc(), a.c3.trunc());

    [MethodImpl(256 | 512)]
    public static float3x4 frac(this float3x4 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac(), a.c3.frac());

    [MethodImpl(256 | 512)]
    public static float3x4 modf(this float3x4 a, out float3x4 i)
    {
        float3x4 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2), a.c3.modf(out var i3));
        i = new(i0, i1, i2, i3);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static float3x4 rcp(this float3x4 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp(), a.c3.rcp());

    [MethodImpl(256 | 512)]
    public static float3x4 saturate(this float3x4 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate(), a.c3.saturate());

    [MethodImpl(256 | 512)]
    public static float3x4 smoothstep(this float3x4 a, float3x4 min, float3x4 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2), a.c3.smoothstep(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static float3x4 radians(this float3x4 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians(), a.c3.radians());

    [MethodImpl(256 | 512)]
    public static float3x4 degrees(this float3x4 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees(), a.c3.degrees());
}

#endregion // float3x4

#region float4x2

public partial struct float4x2
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float4x2 ceil(this float4x2 a) => 
        new(a.c0.ceil(), a.c1.ceil());

    [MethodImpl(256 | 512)]
    public static float4x2 floor(this float4x2 a) => 
        new(a.c0.floor(), a.c1.floor());

    [MethodImpl(256 | 512)]
    public static float4x2 round(this float4x2 a) => 
        new(a.c0.round(), a.c1.round());

    [MethodImpl(256 | 512)]
    public static float4x2 trunc(this float4x2 a) => 
        new(a.c0.trunc(), a.c1.trunc());

    [MethodImpl(256 | 512)]
    public static float4x2 frac(this float4x2 a) => 
        new(a.c0.frac(), a.c1.frac());

    [MethodImpl(256 | 512)]
    public static float4x2 modf(this float4x2 a, out float4x2 i)
    {
        float4x2 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1));
        i = new(i0, i1);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static float4x2 rcp(this float4x2 a) => 
        new(a.c0.rcp(), a.c1.rcp());

    [MethodImpl(256 | 512)]
    public static float4x2 saturate(this float4x2 a) => 
        new(a.c0.saturate(), a.c1.saturate());

    [MethodImpl(256 | 512)]
    public static float4x2 smoothstep(this float4x2 a, float4x2 min, float4x2 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static float4x2 radians(this float4x2 a) => 
        new(a.c0.radians(), a.c1.radians());

    [MethodImpl(256 | 512)]
    public static float4x2 degrees(this float4x2 a) => 
        new(a.c0.degrees(), a.c1.degrees());
}

#endregion // float4x2

#region float4x3

public partial struct float4x3
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float4x3 ceil(this float4x3 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil());

    [MethodImpl(256 | 512)]
    public static float4x3 floor(this float4x3 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor());

    [MethodImpl(256 | 512)]
    public static float4x3 round(this float4x3 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round());

    [MethodImpl(256 | 512)]
    public static float4x3 trunc(this float4x3 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc());

    [MethodImpl(256 | 512)]
    public static float4x3 frac(this float4x3 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac());

    [MethodImpl(256 | 512)]
    public static float4x3 modf(this float4x3 a, out float4x3 i)
    {
        float4x3 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2));
        i = new(i0, i1, i2);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static float4x3 rcp(this float4x3 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp());

    [MethodImpl(256 | 512)]
    public static float4x3 saturate(this float4x3 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate());

    [MethodImpl(256 | 512)]
    public static float4x3 smoothstep(this float4x3 a, float4x3 min, float4x3 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static float4x3 radians(this float4x3 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians());

    [MethodImpl(256 | 512)]
    public static float4x3 degrees(this float4x3 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees());
}

#endregion // float4x3

#region float4x4

public partial struct float4x4
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static float4x4 ceil(this float4x4 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil(), a.c3.ceil());

    [MethodImpl(256 | 512)]
    public static float4x4 floor(this float4x4 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor(), a.c3.floor());

    [MethodImpl(256 | 512)]
    public static float4x4 round(this float4x4 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round(), a.c3.round());

    [MethodImpl(256 | 512)]
    public static float4x4 trunc(this float4x4 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc(), a.c3.trunc());

    [MethodImpl(256 | 512)]
    public static float4x4 frac(this float4x4 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac(), a.c3.frac());

    [MethodImpl(256 | 512)]
    public static float4x4 modf(this float4x4 a, out float4x4 i)
    {
        float4x4 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2), a.c3.modf(out var i3));
        i = new(i0, i1, i2, i3);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static float4x4 rcp(this float4x4 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp(), a.c3.rcp());

    [MethodImpl(256 | 512)]
    public static float4x4 saturate(this float4x4 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate(), a.c3.saturate());

    [MethodImpl(256 | 512)]
    public static float4x4 smoothstep(this float4x4 a, float4x4 min, float4x4 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2), a.c3.smoothstep(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static float4x4 radians(this float4x4 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians(), a.c3.radians());

    [MethodImpl(256 | 512)]
    public static float4x4 degrees(this float4x4 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees(), a.c3.degrees());
}

#endregion // float4x4

#region double2x2

public partial struct double2x2
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double2x2 ceil(this double2x2 a) => 
        new(a.c0.ceil(), a.c1.ceil());

    [MethodImpl(256 | 512)]
    public static double2x2 floor(this double2x2 a) => 
        new(a.c0.floor(), a.c1.floor());

    [MethodImpl(256 | 512)]
    public static double2x2 round(this double2x2 a) => 
        new(a.c0.round(), a.c1.round());

    [MethodImpl(256 | 512)]
    public static double2x2 trunc(this double2x2 a) => 
        new(a.c0.trunc(), a.c1.trunc());

    [MethodImpl(256 | 512)]
    public static double2x2 frac(this double2x2 a) => 
        new(a.c0.frac(), a.c1.frac());

    [MethodImpl(256 | 512)]
    public static double2x2 modf(this double2x2 a, out double2x2 i)
    {
        double2x2 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1));
        i = new(i0, i1);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static double2x2 rcp(this double2x2 a) => 
        new(a.c0.rcp(), a.c1.rcp());

    [MethodImpl(256 | 512)]
    public static double2x2 saturate(this double2x2 a) => 
        new(a.c0.saturate(), a.c1.saturate());

    [MethodImpl(256 | 512)]
    public static double2x2 smoothstep(this double2x2 a, double2x2 min, double2x2 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static double2x2 radians(this double2x2 a) => 
        new(a.c0.radians(), a.c1.radians());

    [MethodImpl(256 | 512)]
    public static double2x2 degrees(this double2x2 a) => 
        new(a.c0.degrees(), a.c1.degrees());
}

#endregion // double2x2

#region double2x3

public partial struct double2x3
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double2x3 ceil(this double2x3 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil());

    [MethodImpl(256 | 512)]
    public static double2x3 floor(this double2x3 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor());

    [MethodImpl(256 | 512)]
    public static double2x3 round(this double2x3 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round());

    [MethodImpl(256 | 512)]
    public static double2x3 trunc(this double2x3 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc());

    [MethodImpl(256 | 512)]
    public static double2x3 frac(this double2x3 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac());

    [MethodImpl(256 | 512)]
    public static double2x3 modf(this double2x3 a, out double2x3 i)
    {
        double2x3 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2));
        i = new(i0, i1, i2);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static double2x3 rcp(this double2x3 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp());

    [MethodImpl(256 | 512)]
    public static double2x3 saturate(this double2x3 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate());

    [MethodImpl(256 | 512)]
    public static double2x3 smoothstep(this double2x3 a, double2x3 min, double2x3 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static double2x3 radians(this double2x3 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians());

    [MethodImpl(256 | 512)]
    public static double2x3 degrees(this double2x3 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees());
}

#endregion // double2x3

#region double2x4

public partial struct double2x4
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double2x4 ceil(this double2x4 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil(), a.c3.ceil());

    [MethodImpl(256 | 512)]
    public static double2x4 floor(this double2x4 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor(), a.c3.floor());

    [MethodImpl(256 | 512)]
    public static double2x4 round(this double2x4 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round(), a.c3.round());

    [MethodImpl(256 | 512)]
    public static double2x4 trunc(this double2x4 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc(), a.c3.trunc());

    [MethodImpl(256 | 512)]
    public static double2x4 frac(this double2x4 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac(), a.c3.frac());

    [MethodImpl(256 | 512)]
    public static double2x4 modf(this double2x4 a, out double2x4 i)
    {
        double2x4 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2), a.c3.modf(out var i3));
        i = new(i0, i1, i2, i3);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static double2x4 rcp(this double2x4 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp(), a.c3.rcp());

    [MethodImpl(256 | 512)]
    public static double2x4 saturate(this double2x4 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate(), a.c3.saturate());

    [MethodImpl(256 | 512)]
    public static double2x4 smoothstep(this double2x4 a, double2x4 min, double2x4 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2), a.c3.smoothstep(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static double2x4 radians(this double2x4 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians(), a.c3.radians());

    [MethodImpl(256 | 512)]
    public static double2x4 degrees(this double2x4 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees(), a.c3.degrees());
}

#endregion // double2x4

#region double3x2

public partial struct double3x2
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double3x2 ceil(this double3x2 a) => 
        new(a.c0.ceil(), a.c1.ceil());

    [MethodImpl(256 | 512)]
    public static double3x2 floor(this double3x2 a) => 
        new(a.c0.floor(), a.c1.floor());

    [MethodImpl(256 | 512)]
    public static double3x2 round(this double3x2 a) => 
        new(a.c0.round(), a.c1.round());

    [MethodImpl(256 | 512)]
    public static double3x2 trunc(this double3x2 a) => 
        new(a.c0.trunc(), a.c1.trunc());

    [MethodImpl(256 | 512)]
    public static double3x2 frac(this double3x2 a) => 
        new(a.c0.frac(), a.c1.frac());

    [MethodImpl(256 | 512)]
    public static double3x2 modf(this double3x2 a, out double3x2 i)
    {
        double3x2 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1));
        i = new(i0, i1);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static double3x2 rcp(this double3x2 a) => 
        new(a.c0.rcp(), a.c1.rcp());

    [MethodImpl(256 | 512)]
    public static double3x2 saturate(this double3x2 a) => 
        new(a.c0.saturate(), a.c1.saturate());

    [MethodImpl(256 | 512)]
    public static double3x2 smoothstep(this double3x2 a, double3x2 min, double3x2 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static double3x2 radians(this double3x2 a) => 
        new(a.c0.radians(), a.c1.radians());

    [MethodImpl(256 | 512)]
    public static double3x2 degrees(this double3x2 a) => 
        new(a.c0.degrees(), a.c1.degrees());
}

#endregion // double3x2

#region double3x3

public partial struct double3x3
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double3x3 ceil(this double3x3 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil());

    [MethodImpl(256 | 512)]
    public static double3x3 floor(this double3x3 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor());

    [MethodImpl(256 | 512)]
    public static double3x3 round(this double3x3 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round());

    [MethodImpl(256 | 512)]
    public static double3x3 trunc(this double3x3 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc());

    [MethodImpl(256 | 512)]
    public static double3x3 frac(this double3x3 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac());

    [MethodImpl(256 | 512)]
    public static double3x3 modf(this double3x3 a, out double3x3 i)
    {
        double3x3 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2));
        i = new(i0, i1, i2);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static double3x3 rcp(this double3x3 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp());

    [MethodImpl(256 | 512)]
    public static double3x3 saturate(this double3x3 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate());

    [MethodImpl(256 | 512)]
    public static double3x3 smoothstep(this double3x3 a, double3x3 min, double3x3 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static double3x3 radians(this double3x3 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians());

    [MethodImpl(256 | 512)]
    public static double3x3 degrees(this double3x3 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees());
}

#endregion // double3x3

#region double3x4

public partial struct double3x4
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double3x4 ceil(this double3x4 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil(), a.c3.ceil());

    [MethodImpl(256 | 512)]
    public static double3x4 floor(this double3x4 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor(), a.c3.floor());

    [MethodImpl(256 | 512)]
    public static double3x4 round(this double3x4 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round(), a.c3.round());

    [MethodImpl(256 | 512)]
    public static double3x4 trunc(this double3x4 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc(), a.c3.trunc());

    [MethodImpl(256 | 512)]
    public static double3x4 frac(this double3x4 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac(), a.c3.frac());

    [MethodImpl(256 | 512)]
    public static double3x4 modf(this double3x4 a, out double3x4 i)
    {
        double3x4 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2), a.c3.modf(out var i3));
        i = new(i0, i1, i2, i3);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static double3x4 rcp(this double3x4 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp(), a.c3.rcp());

    [MethodImpl(256 | 512)]
    public static double3x4 saturate(this double3x4 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate(), a.c3.saturate());

    [MethodImpl(256 | 512)]
    public static double3x4 smoothstep(this double3x4 a, double3x4 min, double3x4 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2), a.c3.smoothstep(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static double3x4 radians(this double3x4 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians(), a.c3.radians());

    [MethodImpl(256 | 512)]
    public static double3x4 degrees(this double3x4 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees(), a.c3.degrees());
}

#endregion // double3x4

#region double4x2

public partial struct double4x2
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double4x2 ceil(this double4x2 a) => 
        new(a.c0.ceil(), a.c1.ceil());

    [MethodImpl(256 | 512)]
    public static double4x2 floor(this double4x2 a) => 
        new(a.c0.floor(), a.c1.floor());

    [MethodImpl(256 | 512)]
    public static double4x2 round(this double4x2 a) => 
        new(a.c0.round(), a.c1.round());

    [MethodImpl(256 | 512)]
    public static double4x2 trunc(this double4x2 a) => 
        new(a.c0.trunc(), a.c1.trunc());

    [MethodImpl(256 | 512)]
    public static double4x2 frac(this double4x2 a) => 
        new(a.c0.frac(), a.c1.frac());

    [MethodImpl(256 | 512)]
    public static double4x2 modf(this double4x2 a, out double4x2 i)
    {
        double4x2 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1));
        i = new(i0, i1);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static double4x2 rcp(this double4x2 a) => 
        new(a.c0.rcp(), a.c1.rcp());

    [MethodImpl(256 | 512)]
    public static double4x2 saturate(this double4x2 a) => 
        new(a.c0.saturate(), a.c1.saturate());

    [MethodImpl(256 | 512)]
    public static double4x2 smoothstep(this double4x2 a, double4x2 min, double4x2 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static double4x2 radians(this double4x2 a) => 
        new(a.c0.radians(), a.c1.radians());

    [MethodImpl(256 | 512)]
    public static double4x2 degrees(this double4x2 a) => 
        new(a.c0.degrees(), a.c1.degrees());
}

#endregion // double4x2

#region double4x3

public partial struct double4x3
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double4x3 ceil(this double4x3 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil());

    [MethodImpl(256 | 512)]
    public static double4x3 floor(this double4x3 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor());

    [MethodImpl(256 | 512)]
    public static double4x3 round(this double4x3 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round());

    [MethodImpl(256 | 512)]
    public static double4x3 trunc(this double4x3 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc());

    [MethodImpl(256 | 512)]
    public static double4x3 frac(this double4x3 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac());

    [MethodImpl(256 | 512)]
    public static double4x3 modf(this double4x3 a, out double4x3 i)
    {
        double4x3 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2));
        i = new(i0, i1, i2);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static double4x3 rcp(this double4x3 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp());

    [MethodImpl(256 | 512)]
    public static double4x3 saturate(this double4x3 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate());

    [MethodImpl(256 | 512)]
    public static double4x3 smoothstep(this double4x3 a, double4x3 min, double4x3 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static double4x3 radians(this double4x3 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians());

    [MethodImpl(256 | 512)]
    public static double4x3 degrees(this double4x3 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees());
}

#endregion // double4x3

#region double4x4

public partial struct double4x4
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static double4x4 ceil(this double4x4 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil(), a.c3.ceil());

    [MethodImpl(256 | 512)]
    public static double4x4 floor(this double4x4 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor(), a.c3.floor());

    [MethodImpl(256 | 512)]
    public static double4x4 round(this double4x4 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round(), a.c3.round());

    [MethodImpl(256 | 512)]
    public static double4x4 trunc(this double4x4 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc(), a.c3.trunc());

    [MethodImpl(256 | 512)]
    public static double4x4 frac(this double4x4 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac(), a.c3.frac());

    [MethodImpl(256 | 512)]
    public static double4x4 modf(this double4x4 a, out double4x4 i)
    {
        double4x4 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2), a.c3.modf(out var i3));
        i = new(i0, i1, i2, i3);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static double4x4 rcp(this double4x4 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp(), a.c3.rcp());

    [MethodImpl(256 | 512)]
    public static double4x4 saturate(this double4x4 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate(), a.c3.saturate());

    [MethodImpl(256 | 512)]
    public static double4x4 smoothstep(this double4x4 a, double4x4 min, double4x4 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2), a.c3.smoothstep(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static double4x4 radians(this double4x4 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians(), a.c3.radians());

    [MethodImpl(256 | 512)]
    public static double4x4 degrees(this double4x4 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees(), a.c3.degrees());
}

#endregion // double4x4

#region decimal2x2

public partial struct decimal2x2
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal2x2 ceil(this decimal2x2 a) => 
        new(a.c0.ceil(), a.c1.ceil());

    [MethodImpl(256 | 512)]
    public static decimal2x2 floor(this decimal2x2 a) => 
        new(a.c0.floor(), a.c1.floor());

    [MethodImpl(256 | 512)]
    public static decimal2x2 round(this decimal2x2 a) => 
        new(a.c0.round(), a.c1.round());

    [MethodImpl(256 | 512)]
    public static decimal2x2 trunc(this decimal2x2 a) => 
        new(a.c0.trunc(), a.c1.trunc());

    [MethodImpl(256 | 512)]
    public static decimal2x2 frac(this decimal2x2 a) => 
        new(a.c0.frac(), a.c1.frac());

    [MethodImpl(256 | 512)]
    public static decimal2x2 modf(this decimal2x2 a, out decimal2x2 i)
    {
        decimal2x2 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1));
        i = new(i0, i1);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static decimal2x2 rcp(this decimal2x2 a) => 
        new(a.c0.rcp(), a.c1.rcp());

    [MethodImpl(256 | 512)]
    public static decimal2x2 saturate(this decimal2x2 a) => 
        new(a.c0.saturate(), a.c1.saturate());

    [MethodImpl(256 | 512)]
    public static decimal2x2 smoothstep(this decimal2x2 a, decimal2x2 min, decimal2x2 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static decimal2x2 radians(this decimal2x2 a) => 
        new(a.c0.radians(), a.c1.radians());

    [MethodImpl(256 | 512)]
    public static decimal2x2 degrees(this decimal2x2 a) => 
        new(a.c0.degrees(), a.c1.degrees());
}

#endregion // decimal2x2

#region decimal2x3

public partial struct decimal2x3
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal2x3 ceil(this decimal2x3 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil());

    [MethodImpl(256 | 512)]
    public static decimal2x3 floor(this decimal2x3 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor());

    [MethodImpl(256 | 512)]
    public static decimal2x3 round(this decimal2x3 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round());

    [MethodImpl(256 | 512)]
    public static decimal2x3 trunc(this decimal2x3 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc());

    [MethodImpl(256 | 512)]
    public static decimal2x3 frac(this decimal2x3 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac());

    [MethodImpl(256 | 512)]
    public static decimal2x3 modf(this decimal2x3 a, out decimal2x3 i)
    {
        decimal2x3 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2));
        i = new(i0, i1, i2);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static decimal2x3 rcp(this decimal2x3 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp());

    [MethodImpl(256 | 512)]
    public static decimal2x3 saturate(this decimal2x3 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate());

    [MethodImpl(256 | 512)]
    public static decimal2x3 smoothstep(this decimal2x3 a, decimal2x3 min, decimal2x3 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static decimal2x3 radians(this decimal2x3 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians());

    [MethodImpl(256 | 512)]
    public static decimal2x3 degrees(this decimal2x3 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees());
}

#endregion // decimal2x3

#region decimal2x4

public partial struct decimal2x4
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal2x4 ceil(this decimal2x4 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil(), a.c3.ceil());

    [MethodImpl(256 | 512)]
    public static decimal2x4 floor(this decimal2x4 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor(), a.c3.floor());

    [MethodImpl(256 | 512)]
    public static decimal2x4 round(this decimal2x4 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round(), a.c3.round());

    [MethodImpl(256 | 512)]
    public static decimal2x4 trunc(this decimal2x4 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc(), a.c3.trunc());

    [MethodImpl(256 | 512)]
    public static decimal2x4 frac(this decimal2x4 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac(), a.c3.frac());

    [MethodImpl(256 | 512)]
    public static decimal2x4 modf(this decimal2x4 a, out decimal2x4 i)
    {
        decimal2x4 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2), a.c3.modf(out var i3));
        i = new(i0, i1, i2, i3);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static decimal2x4 rcp(this decimal2x4 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp(), a.c3.rcp());

    [MethodImpl(256 | 512)]
    public static decimal2x4 saturate(this decimal2x4 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate(), a.c3.saturate());

    [MethodImpl(256 | 512)]
    public static decimal2x4 smoothstep(this decimal2x4 a, decimal2x4 min, decimal2x4 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2), a.c3.smoothstep(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static decimal2x4 radians(this decimal2x4 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians(), a.c3.radians());

    [MethodImpl(256 | 512)]
    public static decimal2x4 degrees(this decimal2x4 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees(), a.c3.degrees());
}

#endregion // decimal2x4

#region decimal3x2

public partial struct decimal3x2
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal3x2 ceil(this decimal3x2 a) => 
        new(a.c0.ceil(), a.c1.ceil());

    [MethodImpl(256 | 512)]
    public static decimal3x2 floor(this decimal3x2 a) => 
        new(a.c0.floor(), a.c1.floor());

    [MethodImpl(256 | 512)]
    public static decimal3x2 round(this decimal3x2 a) => 
        new(a.c0.round(), a.c1.round());

    [MethodImpl(256 | 512)]
    public static decimal3x2 trunc(this decimal3x2 a) => 
        new(a.c0.trunc(), a.c1.trunc());

    [MethodImpl(256 | 512)]
    public static decimal3x2 frac(this decimal3x2 a) => 
        new(a.c0.frac(), a.c1.frac());

    [MethodImpl(256 | 512)]
    public static decimal3x2 modf(this decimal3x2 a, out decimal3x2 i)
    {
        decimal3x2 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1));
        i = new(i0, i1);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static decimal3x2 rcp(this decimal3x2 a) => 
        new(a.c0.rcp(), a.c1.rcp());

    [MethodImpl(256 | 512)]
    public static decimal3x2 saturate(this decimal3x2 a) => 
        new(a.c0.saturate(), a.c1.saturate());

    [MethodImpl(256 | 512)]
    public static decimal3x2 smoothstep(this decimal3x2 a, decimal3x2 min, decimal3x2 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static decimal3x2 radians(this decimal3x2 a) => 
        new(a.c0.radians(), a.c1.radians());

    [MethodImpl(256 | 512)]
    public static decimal3x2 degrees(this decimal3x2 a) => 
        new(a.c0.degrees(), a.c1.degrees());
}

#endregion // decimal3x2

#region decimal3x3

public partial struct decimal3x3
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal3x3 ceil(this decimal3x3 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil());

    [MethodImpl(256 | 512)]
    public static decimal3x3 floor(this decimal3x3 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor());

    [MethodImpl(256 | 512)]
    public static decimal3x3 round(this decimal3x3 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round());

    [MethodImpl(256 | 512)]
    public static decimal3x3 trunc(this decimal3x3 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc());

    [MethodImpl(256 | 512)]
    public static decimal3x3 frac(this decimal3x3 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac());

    [MethodImpl(256 | 512)]
    public static decimal3x3 modf(this decimal3x3 a, out decimal3x3 i)
    {
        decimal3x3 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2));
        i = new(i0, i1, i2);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static decimal3x3 rcp(this decimal3x3 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp());

    [MethodImpl(256 | 512)]
    public static decimal3x3 saturate(this decimal3x3 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate());

    [MethodImpl(256 | 512)]
    public static decimal3x3 smoothstep(this decimal3x3 a, decimal3x3 min, decimal3x3 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static decimal3x3 radians(this decimal3x3 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians());

    [MethodImpl(256 | 512)]
    public static decimal3x3 degrees(this decimal3x3 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees());
}

#endregion // decimal3x3

#region decimal3x4

public partial struct decimal3x4
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal3x4 ceil(this decimal3x4 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil(), a.c3.ceil());

    [MethodImpl(256 | 512)]
    public static decimal3x4 floor(this decimal3x4 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor(), a.c3.floor());

    [MethodImpl(256 | 512)]
    public static decimal3x4 round(this decimal3x4 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round(), a.c3.round());

    [MethodImpl(256 | 512)]
    public static decimal3x4 trunc(this decimal3x4 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc(), a.c3.trunc());

    [MethodImpl(256 | 512)]
    public static decimal3x4 frac(this decimal3x4 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac(), a.c3.frac());

    [MethodImpl(256 | 512)]
    public static decimal3x4 modf(this decimal3x4 a, out decimal3x4 i)
    {
        decimal3x4 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2), a.c3.modf(out var i3));
        i = new(i0, i1, i2, i3);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static decimal3x4 rcp(this decimal3x4 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp(), a.c3.rcp());

    [MethodImpl(256 | 512)]
    public static decimal3x4 saturate(this decimal3x4 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate(), a.c3.saturate());

    [MethodImpl(256 | 512)]
    public static decimal3x4 smoothstep(this decimal3x4 a, decimal3x4 min, decimal3x4 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2), a.c3.smoothstep(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static decimal3x4 radians(this decimal3x4 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians(), a.c3.radians());

    [MethodImpl(256 | 512)]
    public static decimal3x4 degrees(this decimal3x4 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees(), a.c3.degrees());
}

#endregion // decimal3x4

#region decimal4x2

public partial struct decimal4x2
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal4x2 ceil(this decimal4x2 a) => 
        new(a.c0.ceil(), a.c1.ceil());

    [MethodImpl(256 | 512)]
    public static decimal4x2 floor(this decimal4x2 a) => 
        new(a.c0.floor(), a.c1.floor());

    [MethodImpl(256 | 512)]
    public static decimal4x2 round(this decimal4x2 a) => 
        new(a.c0.round(), a.c1.round());

    [MethodImpl(256 | 512)]
    public static decimal4x2 trunc(this decimal4x2 a) => 
        new(a.c0.trunc(), a.c1.trunc());

    [MethodImpl(256 | 512)]
    public static decimal4x2 frac(this decimal4x2 a) => 
        new(a.c0.frac(), a.c1.frac());

    [MethodImpl(256 | 512)]
    public static decimal4x2 modf(this decimal4x2 a, out decimal4x2 i)
    {
        decimal4x2 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1));
        i = new(i0, i1);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static decimal4x2 rcp(this decimal4x2 a) => 
        new(a.c0.rcp(), a.c1.rcp());

    [MethodImpl(256 | 512)]
    public static decimal4x2 saturate(this decimal4x2 a) => 
        new(a.c0.saturate(), a.c1.saturate());

    [MethodImpl(256 | 512)]
    public static decimal4x2 smoothstep(this decimal4x2 a, decimal4x2 min, decimal4x2 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static decimal4x2 radians(this decimal4x2 a) => 
        new(a.c0.radians(), a.c1.radians());

    [MethodImpl(256 | 512)]
    public static decimal4x2 degrees(this decimal4x2 a) => 
        new(a.c0.degrees(), a.c1.degrees());
}

#endregion // decimal4x2

#region decimal4x3

public partial struct decimal4x3
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal4x3 ceil(this decimal4x3 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil());

    [MethodImpl(256 | 512)]
    public static decimal4x3 floor(this decimal4x3 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor());

    [MethodImpl(256 | 512)]
    public static decimal4x3 round(this decimal4x3 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round());

    [MethodImpl(256 | 512)]
    public static decimal4x3 trunc(this decimal4x3 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc());

    [MethodImpl(256 | 512)]
    public static decimal4x3 frac(this decimal4x3 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac());

    [MethodImpl(256 | 512)]
    public static decimal4x3 modf(this decimal4x3 a, out decimal4x3 i)
    {
        decimal4x3 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2));
        i = new(i0, i1, i2);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static decimal4x3 rcp(this decimal4x3 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp());

    [MethodImpl(256 | 512)]
    public static decimal4x3 saturate(this decimal4x3 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate());

    [MethodImpl(256 | 512)]
    public static decimal4x3 smoothstep(this decimal4x3 a, decimal4x3 min, decimal4x3 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static decimal4x3 radians(this decimal4x3 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians());

    [MethodImpl(256 | 512)]
    public static decimal4x3 degrees(this decimal4x3 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees());
}

#endregion // decimal4x3

#region decimal4x4

public partial struct decimal4x4
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static decimal4x4 ceil(this decimal4x4 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil(), a.c3.ceil());

    [MethodImpl(256 | 512)]
    public static decimal4x4 floor(this decimal4x4 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor(), a.c3.floor());

    [MethodImpl(256 | 512)]
    public static decimal4x4 round(this decimal4x4 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round(), a.c3.round());

    [MethodImpl(256 | 512)]
    public static decimal4x4 trunc(this decimal4x4 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc(), a.c3.trunc());

    [MethodImpl(256 | 512)]
    public static decimal4x4 frac(this decimal4x4 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac(), a.c3.frac());

    [MethodImpl(256 | 512)]
    public static decimal4x4 modf(this decimal4x4 a, out decimal4x4 i)
    {
        decimal4x4 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2), a.c3.modf(out var i3));
        i = new(i0, i1, i2, i3);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static decimal4x4 rcp(this decimal4x4 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp(), a.c3.rcp());

    [MethodImpl(256 | 512)]
    public static decimal4x4 saturate(this decimal4x4 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate(), a.c3.saturate());

    [MethodImpl(256 | 512)]
    public static decimal4x4 smoothstep(this decimal4x4 a, decimal4x4 min, decimal4x4 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2), a.c3.smoothstep(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static decimal4x4 radians(this decimal4x4 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians(), a.c3.radians());

    [MethodImpl(256 | 512)]
    public static decimal4x4 degrees(this decimal4x4 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees(), a.c3.degrees());
}

#endregion // decimal4x4

#region half2x2

public partial struct half2x2
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half2x2 ceil(this half2x2 a) => 
        new(a.c0.ceil(), a.c1.ceil());

    [MethodImpl(256 | 512)]
    public static half2x2 floor(this half2x2 a) => 
        new(a.c0.floor(), a.c1.floor());

    [MethodImpl(256 | 512)]
    public static half2x2 round(this half2x2 a) => 
        new(a.c0.round(), a.c1.round());

    [MethodImpl(256 | 512)]
    public static half2x2 trunc(this half2x2 a) => 
        new(a.c0.trunc(), a.c1.trunc());

    [MethodImpl(256 | 512)]
    public static half2x2 frac(this half2x2 a) => 
        new(a.c0.frac(), a.c1.frac());

    [MethodImpl(256 | 512)]
    public static half2x2 modf(this half2x2 a, out half2x2 i)
    {
        half2x2 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1));
        i = new(i0, i1);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static half2x2 rcp(this half2x2 a) => 
        new(a.c0.rcp(), a.c1.rcp());

    [MethodImpl(256 | 512)]
    public static half2x2 saturate(this half2x2 a) => 
        new(a.c0.saturate(), a.c1.saturate());

    [MethodImpl(256 | 512)]
    public static half2x2 smoothstep(this half2x2 a, half2x2 min, half2x2 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static half2x2 radians(this half2x2 a) => 
        new(a.c0.radians(), a.c1.radians());

    [MethodImpl(256 | 512)]
    public static half2x2 degrees(this half2x2 a) => 
        new(a.c0.degrees(), a.c1.degrees());
}

#endregion // half2x2

#region half2x3

public partial struct half2x3
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half2x3 ceil(this half2x3 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil());

    [MethodImpl(256 | 512)]
    public static half2x3 floor(this half2x3 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor());

    [MethodImpl(256 | 512)]
    public static half2x3 round(this half2x3 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round());

    [MethodImpl(256 | 512)]
    public static half2x3 trunc(this half2x3 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc());

    [MethodImpl(256 | 512)]
    public static half2x3 frac(this half2x3 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac());

    [MethodImpl(256 | 512)]
    public static half2x3 modf(this half2x3 a, out half2x3 i)
    {
        half2x3 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2));
        i = new(i0, i1, i2);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static half2x3 rcp(this half2x3 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp());

    [MethodImpl(256 | 512)]
    public static half2x3 saturate(this half2x3 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate());

    [MethodImpl(256 | 512)]
    public static half2x3 smoothstep(this half2x3 a, half2x3 min, half2x3 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static half2x3 radians(this half2x3 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians());

    [MethodImpl(256 | 512)]
    public static half2x3 degrees(this half2x3 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees());
}

#endregion // half2x3

#region half2x4

public partial struct half2x4
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half2x4 ceil(this half2x4 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil(), a.c3.ceil());

    [MethodImpl(256 | 512)]
    public static half2x4 floor(this half2x4 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor(), a.c3.floor());

    [MethodImpl(256 | 512)]
    public static half2x4 round(this half2x4 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round(), a.c3.round());

    [MethodImpl(256 | 512)]
    public static half2x4 trunc(this half2x4 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc(), a.c3.trunc());

    [MethodImpl(256 | 512)]
    public static half2x4 frac(this half2x4 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac(), a.c3.frac());

    [MethodImpl(256 | 512)]
    public static half2x4 modf(this half2x4 a, out half2x4 i)
    {
        half2x4 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2), a.c3.modf(out var i3));
        i = new(i0, i1, i2, i3);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static half2x4 rcp(this half2x4 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp(), a.c3.rcp());

    [MethodImpl(256 | 512)]
    public static half2x4 saturate(this half2x4 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate(), a.c3.saturate());

    [MethodImpl(256 | 512)]
    public static half2x4 smoothstep(this half2x4 a, half2x4 min, half2x4 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2), a.c3.smoothstep(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static half2x4 radians(this half2x4 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians(), a.c3.radians());

    [MethodImpl(256 | 512)]
    public static half2x4 degrees(this half2x4 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees(), a.c3.degrees());
}

#endregion // half2x4

#region half3x2

public partial struct half3x2
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half3x2 ceil(this half3x2 a) => 
        new(a.c0.ceil(), a.c1.ceil());

    [MethodImpl(256 | 512)]
    public static half3x2 floor(this half3x2 a) => 
        new(a.c0.floor(), a.c1.floor());

    [MethodImpl(256 | 512)]
    public static half3x2 round(this half3x2 a) => 
        new(a.c0.round(), a.c1.round());

    [MethodImpl(256 | 512)]
    public static half3x2 trunc(this half3x2 a) => 
        new(a.c0.trunc(), a.c1.trunc());

    [MethodImpl(256 | 512)]
    public static half3x2 frac(this half3x2 a) => 
        new(a.c0.frac(), a.c1.frac());

    [MethodImpl(256 | 512)]
    public static half3x2 modf(this half3x2 a, out half3x2 i)
    {
        half3x2 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1));
        i = new(i0, i1);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static half3x2 rcp(this half3x2 a) => 
        new(a.c0.rcp(), a.c1.rcp());

    [MethodImpl(256 | 512)]
    public static half3x2 saturate(this half3x2 a) => 
        new(a.c0.saturate(), a.c1.saturate());

    [MethodImpl(256 | 512)]
    public static half3x2 smoothstep(this half3x2 a, half3x2 min, half3x2 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static half3x2 radians(this half3x2 a) => 
        new(a.c0.radians(), a.c1.radians());

    [MethodImpl(256 | 512)]
    public static half3x2 degrees(this half3x2 a) => 
        new(a.c0.degrees(), a.c1.degrees());
}

#endregion // half3x2

#region half3x3

public partial struct half3x3
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half3x3 ceil(this half3x3 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil());

    [MethodImpl(256 | 512)]
    public static half3x3 floor(this half3x3 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor());

    [MethodImpl(256 | 512)]
    public static half3x3 round(this half3x3 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round());

    [MethodImpl(256 | 512)]
    public static half3x3 trunc(this half3x3 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc());

    [MethodImpl(256 | 512)]
    public static half3x3 frac(this half3x3 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac());

    [MethodImpl(256 | 512)]
    public static half3x3 modf(this half3x3 a, out half3x3 i)
    {
        half3x3 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2));
        i = new(i0, i1, i2);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static half3x3 rcp(this half3x3 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp());

    [MethodImpl(256 | 512)]
    public static half3x3 saturate(this half3x3 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate());

    [MethodImpl(256 | 512)]
    public static half3x3 smoothstep(this half3x3 a, half3x3 min, half3x3 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static half3x3 radians(this half3x3 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians());

    [MethodImpl(256 | 512)]
    public static half3x3 degrees(this half3x3 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees());
}

#endregion // half3x3

#region half3x4

public partial struct half3x4
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half3x4 ceil(this half3x4 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil(), a.c3.ceil());

    [MethodImpl(256 | 512)]
    public static half3x4 floor(this half3x4 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor(), a.c3.floor());

    [MethodImpl(256 | 512)]
    public static half3x4 round(this half3x4 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round(), a.c3.round());

    [MethodImpl(256 | 512)]
    public static half3x4 trunc(this half3x4 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc(), a.c3.trunc());

    [MethodImpl(256 | 512)]
    public static half3x4 frac(this half3x4 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac(), a.c3.frac());

    [MethodImpl(256 | 512)]
    public static half3x4 modf(this half3x4 a, out half3x4 i)
    {
        half3x4 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2), a.c3.modf(out var i3));
        i = new(i0, i1, i2, i3);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static half3x4 rcp(this half3x4 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp(), a.c3.rcp());

    [MethodImpl(256 | 512)]
    public static half3x4 saturate(this half3x4 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate(), a.c3.saturate());

    [MethodImpl(256 | 512)]
    public static half3x4 smoothstep(this half3x4 a, half3x4 min, half3x4 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2), a.c3.smoothstep(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static half3x4 radians(this half3x4 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians(), a.c3.radians());

    [MethodImpl(256 | 512)]
    public static half3x4 degrees(this half3x4 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees(), a.c3.degrees());
}

#endregion // half3x4

#region half4x2

public partial struct half4x2
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half4x2 ceil(this half4x2 a) => 
        new(a.c0.ceil(), a.c1.ceil());

    [MethodImpl(256 | 512)]
    public static half4x2 floor(this half4x2 a) => 
        new(a.c0.floor(), a.c1.floor());

    [MethodImpl(256 | 512)]
    public static half4x2 round(this half4x2 a) => 
        new(a.c0.round(), a.c1.round());

    [MethodImpl(256 | 512)]
    public static half4x2 trunc(this half4x2 a) => 
        new(a.c0.trunc(), a.c1.trunc());

    [MethodImpl(256 | 512)]
    public static half4x2 frac(this half4x2 a) => 
        new(a.c0.frac(), a.c1.frac());

    [MethodImpl(256 | 512)]
    public static half4x2 modf(this half4x2 a, out half4x2 i)
    {
        half4x2 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1));
        i = new(i0, i1);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static half4x2 rcp(this half4x2 a) => 
        new(a.c0.rcp(), a.c1.rcp());

    [MethodImpl(256 | 512)]
    public static half4x2 saturate(this half4x2 a) => 
        new(a.c0.saturate(), a.c1.saturate());

    [MethodImpl(256 | 512)]
    public static half4x2 smoothstep(this half4x2 a, half4x2 min, half4x2 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static half4x2 radians(this half4x2 a) => 
        new(a.c0.radians(), a.c1.radians());

    [MethodImpl(256 | 512)]
    public static half4x2 degrees(this half4x2 a) => 
        new(a.c0.degrees(), a.c1.degrees());
}

#endregion // half4x2

#region half4x3

public partial struct half4x3
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half4x3 ceil(this half4x3 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil());

    [MethodImpl(256 | 512)]
    public static half4x3 floor(this half4x3 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor());

    [MethodImpl(256 | 512)]
    public static half4x3 round(this half4x3 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round());

    [MethodImpl(256 | 512)]
    public static half4x3 trunc(this half4x3 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc());

    [MethodImpl(256 | 512)]
    public static half4x3 frac(this half4x3 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac());

    [MethodImpl(256 | 512)]
    public static half4x3 modf(this half4x3 a, out half4x3 i)
    {
        half4x3 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2));
        i = new(i0, i1, i2);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static half4x3 rcp(this half4x3 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp());

    [MethodImpl(256 | 512)]
    public static half4x3 saturate(this half4x3 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate());

    [MethodImpl(256 | 512)]
    public static half4x3 smoothstep(this half4x3 a, half4x3 min, half4x3 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static half4x3 radians(this half4x3 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians());

    [MethodImpl(256 | 512)]
    public static half4x3 degrees(this half4x3 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees());
}

#endregion // half4x3

#region half4x4

public partial struct half4x4
{
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static half4x4 ceil(this half4x4 a) => 
        new(a.c0.ceil(), a.c1.ceil(), a.c2.ceil(), a.c3.ceil());

    [MethodImpl(256 | 512)]
    public static half4x4 floor(this half4x4 a) => 
        new(a.c0.floor(), a.c1.floor(), a.c2.floor(), a.c3.floor());

    [MethodImpl(256 | 512)]
    public static half4x4 round(this half4x4 a) => 
        new(a.c0.round(), a.c1.round(), a.c2.round(), a.c3.round());

    [MethodImpl(256 | 512)]
    public static half4x4 trunc(this half4x4 a) => 
        new(a.c0.trunc(), a.c1.trunc(), a.c2.trunc(), a.c3.trunc());

    [MethodImpl(256 | 512)]
    public static half4x4 frac(this half4x4 a) => 
        new(a.c0.frac(), a.c1.frac(), a.c2.frac(), a.c3.frac());

    [MethodImpl(256 | 512)]
    public static half4x4 modf(this half4x4 a, out half4x4 i)
    {
        half4x4 r = new(a.c0.modf(out var i0), a.c1.modf(out var i1), a.c2.modf(out var i2), a.c3.modf(out var i3));
        i = new(i0, i1, i2, i3);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static half4x4 rcp(this half4x4 a) => 
        new(a.c0.rcp(), a.c1.rcp(), a.c2.rcp(), a.c3.rcp());

    [MethodImpl(256 | 512)]
    public static half4x4 saturate(this half4x4 a) => 
        new(a.c0.saturate(), a.c1.saturate(), a.c2.saturate(), a.c3.saturate());

    [MethodImpl(256 | 512)]
    public static half4x4 smoothstep(this half4x4 a, half4x4 min, half4x4 max) => 
        new(a.c0.smoothstep(min.c0, max.c0), a.c1.smoothstep(min.c1, max.c1), a.c2.smoothstep(min.c2, max.c2), a.c3.smoothstep(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static half4x4 radians(this half4x4 a) => 
        new(a.c0.radians(), a.c1.radians(), a.c2.radians(), a.c3.radians());

    [MethodImpl(256 | 512)]
    public static half4x4 degrees(this half4x4 a) => 
        new(a.c0.degrees(), a.c1.degrees(), a.c2.degrees(), a.c3.degrees());
}

#endregion // half4x4
