// generated by template, do not modify manually

namespace Coplt.Mathematics;

#region float4

public partial struct float4 
{
    public float4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rrab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 rraa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xyzw
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public float4 rgba
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public float4 xywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public float4 rgab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public float4 xyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 rgaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public float4 rbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public float4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public float4 rbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public float4 xzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 rbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 xwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rarr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 rarg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rarb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 rara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 xwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 ragr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 ragg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public float4 ragb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public float4 xwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 raga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 xwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 rabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public float4 rabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public float4 xwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 rabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 raba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 xwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 raar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 xwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 raag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 xwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 raab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 xwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 raaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 grra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 grga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public float4 grba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public float4 yxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 grar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 grag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public float4 grab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public float4 yxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 graa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 yywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 ggaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public float4 gbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public float4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public float4 gbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public float4 yzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 yzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 gbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 ywxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 garr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 ywxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 garg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 ywxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public float4 garb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public float4 ywxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 gara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 ywyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 gagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 ywyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 gagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 ywyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 gagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 ywyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 gaga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 ywzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public float4 gabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public float4 ywzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 gabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 ywzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 gabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 ywzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 gaba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 ywwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 gaar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 ywwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 gaag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 ywwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 gaab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 ywww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 gaaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 brra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public float4 brga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public float4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 brba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 brar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public float4 brag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public float4 zxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 brab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 braa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public float4 bgra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public float4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 zywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public float4 bgar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public float4 zywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 bgaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 bbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 zwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 barr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public float4 barg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public float4 zwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 barb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 bara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 zwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public float4 bagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public float4 zwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 bagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 bagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 baga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 zwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 babr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 babg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 babb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 baba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 zwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 baar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 zwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 baag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 zwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 baab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 zwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 baaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 wxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 arrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 wxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 arrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 wxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 arrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 wxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 arra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 wxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 argr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 wxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 argg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 wxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public float4 argb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public float4 wxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 arga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 wxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 arbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 wxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public float4 arbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public float4 wxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 arbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 wxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 arba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 wxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 arar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 wxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 arag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 wxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 arab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 wxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 araa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 wyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 agrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 wyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 agrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 wyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public float4 agrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public float4 wyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 agra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 wyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 aggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 wyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 aggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 wyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 aggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 wyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 agga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 wyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public float4 agbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public float4 wyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 agbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 wyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 agbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 wyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 agba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 wywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 agar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 wywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 agag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 wywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 agab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 wyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 agaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 wzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 abrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 wzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public float4 abrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public float4 wzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 abrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 wzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 abra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 wzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public float4 abgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public float4 wzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 abgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 wzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 abgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 wzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 abga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 wzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 abbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 wzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 abbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 wzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 abbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 wzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 abba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 wzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 abar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 wzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 abag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 wzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 abab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 wzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 abaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 wwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 aarr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 wwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 aarg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 wwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 aarb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 wwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 aara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 wwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 aagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 wwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 aagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 wwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 aagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 wwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 aaga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 wwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 aabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 wwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 aabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 wwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 aabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 wwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 aaba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 wwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 aaar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public float4 wwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 aaag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public float4 wwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 aaab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public float4 wwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public float4 aaaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // float4

#region double4

public partial struct double4 
{
    public double4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rrab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 rraa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xyzw
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public double4 rgba
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public double4 xywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public double4 rgab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public double4 xyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 rgaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public double4 rbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public double4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public double4 rbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public double4 xzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 rbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 xwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rarr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 rarg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rarb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 rara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 xwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 ragr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 ragg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public double4 ragb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public double4 xwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 raga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 xwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 rabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public double4 rabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public double4 xwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 rabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 raba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 xwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 raar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 xwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 raag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 xwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 raab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 xwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 raaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 grra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 grga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public double4 grba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public double4 yxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 grar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 grag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public double4 grab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public double4 yxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 graa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 yywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 ggaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public double4 gbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public double4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public double4 gbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public double4 yzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 yzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 gbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 ywxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 garr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 ywxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 garg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 ywxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public double4 garb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public double4 ywxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 gara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 ywyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 gagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 ywyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 gagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 ywyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 gagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 ywyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 gaga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 ywzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public double4 gabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public double4 ywzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 gabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 ywzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 gabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 ywzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 gaba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 ywwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 gaar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 ywwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 gaag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 ywwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 gaab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 ywww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 gaaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 brra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public double4 brga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public double4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 brba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 brar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public double4 brag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public double4 zxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 brab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 braa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public double4 bgra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public double4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 zywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public double4 bgar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public double4 zywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 bgaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 bbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 zwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 barr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public double4 barg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public double4 zwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 barb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 bara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 zwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public double4 bagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public double4 zwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 bagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 bagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 baga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 zwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 babr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 babg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 babb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 baba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 zwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 baar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 zwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 baag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 zwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 baab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 zwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 baaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 wxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 arrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 wxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 arrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 wxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 arrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 wxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 arra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 wxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 argr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 wxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 argg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 wxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public double4 argb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public double4 wxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 arga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 wxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 arbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 wxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public double4 arbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public double4 wxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 arbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 wxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 arba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 wxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 arar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 wxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 arag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 wxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 arab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 wxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 araa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 wyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 agrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 wyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 agrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 wyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public double4 agrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public double4 wyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 agra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 wyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 aggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 wyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 aggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 wyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 aggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 wyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 agga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 wyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public double4 agbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public double4 wyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 agbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 wyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 agbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 wyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 agba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 wywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 agar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 wywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 agag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 wywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 agab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 wyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 agaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 wzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 abrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 wzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public double4 abrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public double4 wzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 abrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 wzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 abra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 wzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public double4 abgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public double4 wzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 abgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 wzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 abgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 wzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 abga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 wzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 abbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 wzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 abbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 wzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 abbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 wzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 abba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 wzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 abar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 wzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 abag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 wzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 abab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 wzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 abaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 wwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 aarr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 wwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 aarg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 wwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 aarb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 wwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 aara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 wwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 aagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 wwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 aagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 wwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 aagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 wwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 aaga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 wwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 aabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 wwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 aabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 wwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 aabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 wwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 aaba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 wwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 aaar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public double4 wwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 aaag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public double4 wwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 aaab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public double4 wwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public double4 aaaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // double4

#region short4

public partial struct short4 
{
    public short4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public short4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public short4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public short4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public short4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public short4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public short4 xxxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public short4 rrra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public short4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public short4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public short4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public short4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public short4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public short4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public short4 xxyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public short4 rrga
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public short4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public short4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public short4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public short4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public short4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public short4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public short4 xxzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public short4 rrba
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public short4 xxwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public short4 rrar
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public short4 xxwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public short4 rrag
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public short4 xxwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public short4 rrab
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public short4 xxww
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public short4 rraa
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public short4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public short4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public short4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public short4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public short4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public short4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public short4 xyxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public short4 rgra
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public short4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public short4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public short4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public short4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public short4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public short4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public short4 xyyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public short4 rgga
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public short4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public short4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public short4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public short4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public short4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public short4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public short4 xyzw
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public short4 rgba
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public short4 xywx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public short4 rgar
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public short4 xywy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public short4 rgag
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public short4 xywz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public short4 rgab
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public short4 xyww
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public short4 rgaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public short4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public short4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public short4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public short4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public short4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public short4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public short4 xzxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public short4 rbra
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public short4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public short4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public short4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public short4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public short4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public short4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public short4 xzyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public short4 rbga
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public short4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public short4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public short4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public short4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public short4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public short4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public short4 xzzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public short4 rbba
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public short4 xzwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public short4 rbar
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public short4 xzwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public short4 rbag
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public short4 xzwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public short4 rbab
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public short4 xzww
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public short4 rbaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public short4 xwxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public short4 rarr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public short4 xwxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public short4 rarg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public short4 xwxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public short4 rarb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public short4 xwxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public short4 rara
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public short4 xwyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public short4 ragr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public short4 xwyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public short4 ragg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public short4 xwyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public short4 ragb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public short4 xwyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public short4 raga
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public short4 xwzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public short4 rabr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public short4 xwzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public short4 rabg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public short4 xwzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public short4 rabb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public short4 xwzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public short4 raba
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public short4 xwwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public short4 raar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public short4 xwwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public short4 raag
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public short4 xwwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public short4 raab
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public short4 xwww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public short4 raaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public short4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public short4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public short4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public short4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public short4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public short4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public short4 yxxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public short4 grra
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public short4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public short4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public short4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public short4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public short4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public short4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public short4 yxyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public short4 grga
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public short4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public short4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public short4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public short4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public short4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public short4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public short4 yxzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public short4 grba
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public short4 yxwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public short4 grar
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public short4 yxwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public short4 grag
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public short4 yxwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public short4 grab
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public short4 yxww
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public short4 graa
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public short4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public short4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public short4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public short4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public short4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public short4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public short4 yyxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public short4 ggra
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public short4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public short4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public short4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public short4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public short4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public short4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public short4 yyyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public short4 ggga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public short4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public short4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public short4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public short4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public short4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public short4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public short4 yyzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public short4 ggba
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public short4 yywx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public short4 ggar
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public short4 yywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public short4 ggag
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public short4 yywz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public short4 ggab
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public short4 yyww
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public short4 ggaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public short4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public short4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public short4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public short4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public short4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public short4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public short4 yzxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public short4 gbra
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public short4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public short4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public short4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public short4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public short4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public short4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public short4 yzyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public short4 gbga
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public short4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public short4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public short4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public short4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public short4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public short4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public short4 yzzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public short4 gbba
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public short4 yzwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public short4 gbar
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public short4 yzwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public short4 gbag
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public short4 yzwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public short4 gbab
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public short4 yzww
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public short4 gbaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public short4 ywxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public short4 garr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public short4 ywxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public short4 garg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public short4 ywxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public short4 garb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public short4 ywxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public short4 gara
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public short4 ywyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public short4 gagr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public short4 ywyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public short4 gagg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public short4 ywyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public short4 gagb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public short4 ywyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public short4 gaga
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public short4 ywzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public short4 gabr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public short4 ywzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public short4 gabg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public short4 ywzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public short4 gabb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public short4 ywzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public short4 gaba
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public short4 ywwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public short4 gaar
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public short4 ywwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public short4 gaag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public short4 ywwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public short4 gaab
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public short4 ywww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public short4 gaaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public short4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public short4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public short4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public short4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public short4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public short4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public short4 zxxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public short4 brra
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public short4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public short4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public short4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public short4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public short4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public short4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public short4 zxyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public short4 brga
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public short4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public short4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public short4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public short4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public short4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public short4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public short4 zxzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public short4 brba
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public short4 zxwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public short4 brar
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public short4 zxwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public short4 brag
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public short4 zxwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public short4 brab
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public short4 zxww
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public short4 braa
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public short4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public short4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public short4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public short4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public short4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public short4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public short4 zyxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public short4 bgra
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public short4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public short4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public short4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public short4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public short4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public short4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public short4 zyyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public short4 bgga
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public short4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public short4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public short4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public short4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public short4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public short4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public short4 zyzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public short4 bgba
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public short4 zywx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public short4 bgar
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public short4 zywy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public short4 bgag
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public short4 zywz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public short4 bgab
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public short4 zyww
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public short4 bgaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public short4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public short4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public short4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public short4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public short4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public short4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public short4 zzxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public short4 bbra
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public short4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public short4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public short4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public short4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public short4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public short4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public short4 zzyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public short4 bbga
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public short4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public short4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public short4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public short4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public short4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public short4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public short4 zzzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public short4 bbba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public short4 zzwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public short4 bbar
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public short4 zzwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public short4 bbag
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public short4 zzwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public short4 bbab
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public short4 zzww
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public short4 bbaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public short4 zwxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public short4 barr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public short4 zwxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public short4 barg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public short4 zwxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public short4 barb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public short4 zwxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public short4 bara
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public short4 zwyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public short4 bagr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public short4 zwyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public short4 bagg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public short4 zwyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public short4 bagb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public short4 zwyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public short4 baga
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public short4 zwzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public short4 babr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public short4 zwzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public short4 babg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public short4 zwzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public short4 babb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public short4 zwzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public short4 baba
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public short4 zwwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public short4 baar
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public short4 zwwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public short4 baag
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public short4 zwwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public short4 baab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public short4 zwww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public short4 baaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public short4 wxxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public short4 arrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public short4 wxxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public short4 arrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public short4 wxxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public short4 arrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public short4 wxxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public short4 arra
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public short4 wxyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public short4 argr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public short4 wxyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public short4 argg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public short4 wxyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public short4 argb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public short4 wxyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public short4 arga
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public short4 wxzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public short4 arbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public short4 wxzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public short4 arbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public short4 wxzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public short4 arbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public short4 wxzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public short4 arba
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public short4 wxwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public short4 arar
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public short4 wxwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public short4 arag
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public short4 wxwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public short4 arab
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public short4 wxww
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public short4 araa
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public short4 wyxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public short4 agrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public short4 wyxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public short4 agrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public short4 wyxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public short4 agrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public short4 wyxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public short4 agra
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public short4 wyyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public short4 aggr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public short4 wyyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public short4 aggg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public short4 wyyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public short4 aggb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public short4 wyyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public short4 agga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public short4 wyzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public short4 agbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public short4 wyzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public short4 agbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public short4 wyzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public short4 agbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public short4 wyzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public short4 agba
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public short4 wywx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public short4 agar
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public short4 wywy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public short4 agag
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public short4 wywz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public short4 agab
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public short4 wyww
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public short4 agaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public short4 wzxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public short4 abrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public short4 wzxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public short4 abrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public short4 wzxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public short4 abrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public short4 wzxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public short4 abra
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public short4 wzyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public short4 abgr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public short4 wzyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public short4 abgg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public short4 wzyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public short4 abgb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public short4 wzyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public short4 abga
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public short4 wzzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public short4 abbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public short4 wzzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public short4 abbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public short4 wzzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public short4 abbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public short4 wzzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public short4 abba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public short4 wzwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public short4 abar
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public short4 wzwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public short4 abag
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public short4 wzwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public short4 abab
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public short4 wzww
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public short4 abaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public short4 wwxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public short4 aarr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public short4 wwxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public short4 aarg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public short4 wwxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public short4 aarb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public short4 wwxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public short4 aara
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public short4 wwyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public short4 aagr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public short4 wwyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public short4 aagg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public short4 wwyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public short4 aagb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public short4 wwyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public short4 aaga
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public short4 wwzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public short4 aabr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public short4 wwzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public short4 aabg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public short4 wwzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public short4 aabb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public short4 wwzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public short4 aaba
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public short4 wwwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public short4 aaar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public short4 wwwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public short4 aaag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public short4 wwwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public short4 aaab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public short4 wwww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
    public short4 aaaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
}

#endregion // short4

#region ushort4

public partial struct ushort4 
{
    public ushort4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public ushort4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public ushort4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public ushort4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public ushort4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public ushort4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public ushort4 xxxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public ushort4 rrra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public ushort4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public ushort4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public ushort4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public ushort4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public ushort4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public ushort4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public ushort4 xxyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public ushort4 rrga
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public ushort4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public ushort4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public ushort4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public ushort4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public ushort4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public ushort4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public ushort4 xxzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public ushort4 rrba
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public ushort4 xxwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public ushort4 rrar
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public ushort4 xxwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public ushort4 rrag
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public ushort4 xxwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public ushort4 rrab
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public ushort4 xxww
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public ushort4 rraa
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public ushort4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public ushort4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public ushort4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public ushort4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public ushort4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public ushort4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public ushort4 xyxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public ushort4 rgra
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public ushort4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public ushort4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public ushort4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public ushort4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public ushort4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public ushort4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public ushort4 xyyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public ushort4 rgga
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public ushort4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public ushort4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public ushort4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public ushort4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public ushort4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public ushort4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public ushort4 xyzw
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public ushort4 rgba
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public ushort4 xywx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public ushort4 rgar
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public ushort4 xywy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public ushort4 rgag
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public ushort4 xywz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public ushort4 rgab
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public ushort4 xyww
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public ushort4 rgaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public ushort4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public ushort4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public ushort4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public ushort4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public ushort4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public ushort4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public ushort4 xzxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public ushort4 rbra
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public ushort4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public ushort4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public ushort4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public ushort4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public ushort4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public ushort4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public ushort4 xzyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public ushort4 rbga
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public ushort4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public ushort4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public ushort4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public ushort4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public ushort4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public ushort4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public ushort4 xzzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public ushort4 rbba
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public ushort4 xzwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public ushort4 rbar
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public ushort4 xzwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public ushort4 rbag
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public ushort4 xzwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public ushort4 rbab
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public ushort4 xzww
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public ushort4 rbaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public ushort4 xwxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public ushort4 rarr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public ushort4 xwxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public ushort4 rarg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public ushort4 xwxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public ushort4 rarb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public ushort4 xwxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public ushort4 rara
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public ushort4 xwyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public ushort4 ragr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public ushort4 xwyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public ushort4 ragg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public ushort4 xwyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public ushort4 ragb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public ushort4 xwyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public ushort4 raga
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public ushort4 xwzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public ushort4 rabr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public ushort4 xwzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public ushort4 rabg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public ushort4 xwzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public ushort4 rabb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public ushort4 xwzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public ushort4 raba
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public ushort4 xwwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public ushort4 raar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public ushort4 xwwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public ushort4 raag
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public ushort4 xwwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public ushort4 raab
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public ushort4 xwww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public ushort4 raaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public ushort4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public ushort4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public ushort4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public ushort4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public ushort4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public ushort4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public ushort4 yxxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public ushort4 grra
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public ushort4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public ushort4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public ushort4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public ushort4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public ushort4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public ushort4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public ushort4 yxyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public ushort4 grga
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public ushort4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public ushort4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public ushort4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public ushort4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public ushort4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public ushort4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public ushort4 yxzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public ushort4 grba
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public ushort4 yxwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public ushort4 grar
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public ushort4 yxwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public ushort4 grag
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public ushort4 yxwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public ushort4 grab
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public ushort4 yxww
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public ushort4 graa
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public ushort4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public ushort4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public ushort4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public ushort4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public ushort4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public ushort4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public ushort4 yyxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public ushort4 ggra
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public ushort4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public ushort4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public ushort4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public ushort4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public ushort4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public ushort4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public ushort4 yyyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public ushort4 ggga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public ushort4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public ushort4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public ushort4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public ushort4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public ushort4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public ushort4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public ushort4 yyzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public ushort4 ggba
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public ushort4 yywx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public ushort4 ggar
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public ushort4 yywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public ushort4 ggag
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public ushort4 yywz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public ushort4 ggab
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public ushort4 yyww
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public ushort4 ggaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public ushort4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public ushort4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public ushort4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public ushort4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public ushort4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public ushort4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public ushort4 yzxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public ushort4 gbra
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public ushort4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public ushort4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public ushort4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public ushort4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public ushort4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public ushort4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public ushort4 yzyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public ushort4 gbga
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public ushort4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public ushort4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public ushort4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public ushort4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public ushort4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public ushort4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public ushort4 yzzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public ushort4 gbba
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public ushort4 yzwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public ushort4 gbar
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public ushort4 yzwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public ushort4 gbag
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public ushort4 yzwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public ushort4 gbab
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public ushort4 yzww
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public ushort4 gbaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public ushort4 ywxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public ushort4 garr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public ushort4 ywxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public ushort4 garg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public ushort4 ywxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public ushort4 garb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public ushort4 ywxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public ushort4 gara
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public ushort4 ywyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public ushort4 gagr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public ushort4 ywyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public ushort4 gagg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public ushort4 ywyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public ushort4 gagb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public ushort4 ywyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public ushort4 gaga
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public ushort4 ywzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public ushort4 gabr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public ushort4 ywzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public ushort4 gabg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public ushort4 ywzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public ushort4 gabb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public ushort4 ywzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public ushort4 gaba
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public ushort4 ywwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public ushort4 gaar
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public ushort4 ywwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public ushort4 gaag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public ushort4 ywwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public ushort4 gaab
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public ushort4 ywww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public ushort4 gaaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public ushort4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public ushort4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public ushort4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public ushort4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public ushort4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public ushort4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public ushort4 zxxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public ushort4 brra
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public ushort4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public ushort4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public ushort4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public ushort4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public ushort4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public ushort4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public ushort4 zxyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public ushort4 brga
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public ushort4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public ushort4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public ushort4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public ushort4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public ushort4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public ushort4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public ushort4 zxzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public ushort4 brba
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public ushort4 zxwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public ushort4 brar
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public ushort4 zxwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public ushort4 brag
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public ushort4 zxwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public ushort4 brab
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public ushort4 zxww
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public ushort4 braa
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public ushort4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public ushort4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public ushort4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public ushort4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public ushort4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public ushort4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public ushort4 zyxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public ushort4 bgra
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public ushort4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public ushort4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public ushort4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public ushort4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public ushort4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public ushort4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public ushort4 zyyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public ushort4 bgga
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public ushort4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public ushort4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public ushort4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public ushort4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public ushort4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public ushort4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public ushort4 zyzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public ushort4 bgba
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public ushort4 zywx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public ushort4 bgar
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public ushort4 zywy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public ushort4 bgag
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public ushort4 zywz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public ushort4 bgab
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public ushort4 zyww
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public ushort4 bgaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public ushort4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public ushort4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public ushort4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public ushort4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public ushort4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public ushort4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public ushort4 zzxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public ushort4 bbra
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public ushort4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public ushort4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public ushort4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public ushort4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public ushort4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public ushort4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public ushort4 zzyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public ushort4 bbga
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public ushort4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public ushort4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public ushort4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public ushort4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public ushort4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public ushort4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public ushort4 zzzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public ushort4 bbba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public ushort4 zzwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public ushort4 bbar
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public ushort4 zzwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public ushort4 bbag
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public ushort4 zzwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public ushort4 bbab
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public ushort4 zzww
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public ushort4 bbaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public ushort4 zwxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public ushort4 barr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public ushort4 zwxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public ushort4 barg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public ushort4 zwxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public ushort4 barb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public ushort4 zwxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public ushort4 bara
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public ushort4 zwyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public ushort4 bagr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public ushort4 zwyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public ushort4 bagg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public ushort4 zwyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public ushort4 bagb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public ushort4 zwyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public ushort4 baga
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public ushort4 zwzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public ushort4 babr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public ushort4 zwzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public ushort4 babg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public ushort4 zwzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public ushort4 babb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public ushort4 zwzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public ushort4 baba
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public ushort4 zwwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public ushort4 baar
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public ushort4 zwwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public ushort4 baag
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public ushort4 zwwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public ushort4 baab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public ushort4 zwww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public ushort4 baaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public ushort4 wxxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public ushort4 arrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public ushort4 wxxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public ushort4 arrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public ushort4 wxxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public ushort4 arrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public ushort4 wxxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public ushort4 arra
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public ushort4 wxyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public ushort4 argr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public ushort4 wxyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public ushort4 argg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public ushort4 wxyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public ushort4 argb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public ushort4 wxyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public ushort4 arga
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public ushort4 wxzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public ushort4 arbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public ushort4 wxzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public ushort4 arbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public ushort4 wxzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public ushort4 arbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public ushort4 wxzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public ushort4 arba
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public ushort4 wxwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public ushort4 arar
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public ushort4 wxwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public ushort4 arag
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public ushort4 wxwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public ushort4 arab
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public ushort4 wxww
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public ushort4 araa
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public ushort4 wyxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public ushort4 agrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public ushort4 wyxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public ushort4 agrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public ushort4 wyxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public ushort4 agrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public ushort4 wyxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public ushort4 agra
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public ushort4 wyyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public ushort4 aggr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public ushort4 wyyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public ushort4 aggg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public ushort4 wyyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public ushort4 aggb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public ushort4 wyyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public ushort4 agga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public ushort4 wyzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public ushort4 agbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public ushort4 wyzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public ushort4 agbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public ushort4 wyzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public ushort4 agbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public ushort4 wyzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public ushort4 agba
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public ushort4 wywx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public ushort4 agar
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public ushort4 wywy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public ushort4 agag
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public ushort4 wywz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public ushort4 agab
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public ushort4 wyww
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public ushort4 agaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public ushort4 wzxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public ushort4 abrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public ushort4 wzxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public ushort4 abrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public ushort4 wzxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public ushort4 abrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public ushort4 wzxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public ushort4 abra
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public ushort4 wzyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public ushort4 abgr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public ushort4 wzyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public ushort4 abgg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public ushort4 wzyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public ushort4 abgb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public ushort4 wzyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public ushort4 abga
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public ushort4 wzzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public ushort4 abbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public ushort4 wzzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public ushort4 abbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public ushort4 wzzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public ushort4 abbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public ushort4 wzzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public ushort4 abba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public ushort4 wzwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public ushort4 abar
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public ushort4 wzwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public ushort4 abag
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public ushort4 wzwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public ushort4 abab
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public ushort4 wzww
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public ushort4 abaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public ushort4 wwxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public ushort4 aarr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public ushort4 wwxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public ushort4 aarg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public ushort4 wwxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public ushort4 aarb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public ushort4 wwxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public ushort4 aara
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public ushort4 wwyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public ushort4 aagr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public ushort4 wwyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public ushort4 aagg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public ushort4 wwyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public ushort4 aagb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public ushort4 wwyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public ushort4 aaga
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public ushort4 wwzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public ushort4 aabr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public ushort4 wwzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public ushort4 aabg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public ushort4 wwzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public ushort4 aabb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public ushort4 wwzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public ushort4 aaba
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public ushort4 wwwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public ushort4 aaar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public ushort4 wwwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public ushort4 aaag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public ushort4 wwwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public ushort4 aaab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public ushort4 wwww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
    public ushort4 aaaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
}

#endregion // ushort4

#region int4

public partial struct int4 
{
    public int4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rrab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 rraa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xyzw
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public int4 rgba
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public int4 xywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public int4 rgab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public int4 xyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 rgaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public int4 rbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public int4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public int4 rbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public int4 xzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 rbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 xwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rarr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 rarg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rarb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 rara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 xwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 ragr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 ragg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public int4 ragb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public int4 xwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 raga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 xwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 rabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public int4 rabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public int4 xwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 rabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 raba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 xwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 raar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 xwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 raag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 xwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 raab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 xwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 raaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(0, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 grra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 grga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public int4 grba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public int4 yxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 grar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 grag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public int4 grab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public int4 yxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 graa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 yywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 ggaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public int4 gbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public int4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public int4 gbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public int4 yzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 yzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 gbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 ywxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 garr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 ywxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 garg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 ywxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public int4 garb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public int4 ywxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 gara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 ywyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 gagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 ywyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 gagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 ywyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 gagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 ywyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 gaga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 ywzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public int4 gabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public int4 ywzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 gabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 ywzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 gabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 ywzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 gaba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 ywwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 gaar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 ywwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 gaag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 ywwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 gaab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 ywww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 gaaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(1, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 brra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public int4 brga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public int4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 brba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 brar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public int4 brag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public int4 zxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 brab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 braa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public int4 bgra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public int4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 zywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public int4 bgar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public int4 zywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 bgaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 bbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 zwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 barr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public int4 barg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public int4 zwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 barb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 bara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 zwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public int4 bagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public int4 zwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 bagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 bagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 baga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 zwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 babr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 babg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 babb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 baba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 zwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 baar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 zwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 baag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 zwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 baab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 zwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 baaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(2, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 wxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 arrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 wxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 arrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 wxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 arrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 wxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 arra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 wxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 argr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 wxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 argg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 wxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public int4 argb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public int4 wxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 arga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 wxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 arbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 wxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public int4 arbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public int4 wxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 arbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 wxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 arba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 wxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 arar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 wxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 arag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 wxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 arab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 wxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 araa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 wyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 agrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 wyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 agrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 wyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public int4 agrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public int4 wyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 agra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 wyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 aggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 wyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 aggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 wyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 aggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 wyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 agga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 wyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public int4 agbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public int4 wyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 agbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 wyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 agbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 wyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 agba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 wywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 agar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 wywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 agag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 wywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 agab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 wyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 agaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 wzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 abrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 wzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public int4 abrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public int4 wzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 abrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 wzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 abra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 wzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public int4 abgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public int4 wzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 abgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 wzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 abgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 wzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 abga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 wzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 abbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 wzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 abbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 wzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 abbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 wzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 abba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 wzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 abar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 wzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 abag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 wzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 abab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 wzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 abaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 wwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 aarr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 wwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 aarg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 wwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 aarb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 wwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 aara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 wwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 aagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 wwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 aagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 wwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 aagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 wwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 aaga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 wwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 aabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 wwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 aabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 wwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 aabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 wwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 aaba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 wwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 aaar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public int4 wwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 aaag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public int4 wwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 aaab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public int4 wwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public int4 aaaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create(3, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // int4

#region uint4

public partial struct uint4 
{
    public uint4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rrab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rraa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xyzw
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public uint4 rgba
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public uint4 xywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public uint4 rgab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public uint4 xyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rgaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public uint4 rbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public uint4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public uint4 rbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public uint4 xzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rarr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rarg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rarb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ragr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ragg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public uint4 ragb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public uint4 xwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 raga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public uint4 rabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public uint4 xwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 rabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 raba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 raar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 raag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 raab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 xwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 raaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public uint4 grba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public uint4 yxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 grag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public uint4 grab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public uint4 yxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 graa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ggaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public uint4 gbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public uint4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public uint4 gbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public uint4 yzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 yzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ywxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 garr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ywxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 garg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ywxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public uint4 garb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public uint4 ywxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ywyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ywyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ywyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ywyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gaga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ywzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public uint4 gabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public uint4 ywzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ywzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ywzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gaba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ywwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gaar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ywwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gaag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ywwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gaab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 ywww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 gaaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public uint4 brga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public uint4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public uint4 brag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public uint4 zxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 brab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 braa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public uint4 bgra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public uint4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public uint4 bgar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public uint4 zywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bgaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 barr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public uint4 barg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public uint4 zwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 barb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public uint4 bagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public uint4 zwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 bagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 baga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 babr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 babg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 babb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 baba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 baar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 baag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 baab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 zwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 baaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 arrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 arrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 arrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 arra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 argr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 argg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public uint4 argb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public uint4 wxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 arga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 arbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public uint4 arbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public uint4 wxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 arbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 arba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 arar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 arag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 arab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 araa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 agrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 agrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public uint4 agrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public uint4 wyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 agra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 agga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public uint4 agbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public uint4 wyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 agbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 agbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 agba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 agar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 agag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 agab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 agaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 abrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public uint4 abrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public uint4 wzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 abrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 abra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public uint4 abgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public uint4 wzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 abgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 abgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 abga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 abbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 abbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 abbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 abba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 abar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 abag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 abab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 abaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aarr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aarg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aarb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aaga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aaba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aaar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aaag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aaab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public uint4 wwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public uint4 aaaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // uint4

#region long4

public partial struct long4 
{
    public long4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rrab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 rraa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xyzw
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public long4 rgba
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public long4 xywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public long4 rgab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public long4 xyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 rgaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public long4 rbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public long4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public long4 rbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public long4 xzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 rbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 xwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rarr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 rarg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rarb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 rara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 xwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 ragr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 ragg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public long4 ragb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public long4 xwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 raga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 xwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 rabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public long4 rabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public long4 xwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 rabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 raba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 xwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 raar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 xwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 raag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 xwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 raab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 xwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 raaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(0, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 grra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 grga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public long4 grba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public long4 yxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 grar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 grag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public long4 grab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public long4 yxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 graa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 yywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 ggaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public long4 gbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public long4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public long4 gbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public long4 yzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 yzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 gbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 ywxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 garr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 ywxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 garg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 ywxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public long4 garb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public long4 ywxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 gara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 ywyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 gagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 ywyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 gagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 ywyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 gagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 ywyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 gaga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 ywzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public long4 gabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public long4 ywzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 gabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 ywzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 gabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 ywzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 gaba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 ywwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 gaar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 ywwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 gaag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 ywwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 gaab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 ywww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 gaaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(1, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 brra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public long4 brga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public long4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 brba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 brar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public long4 brag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public long4 zxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 brab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 braa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public long4 bgra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public long4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 zywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public long4 bgar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public long4 zywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 bgaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 bbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 zwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 barr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public long4 barg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public long4 zwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 barb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 bara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 zwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public long4 bagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public long4 zwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 bagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 bagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 baga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 zwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 babr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 babg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 babb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 baba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 zwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 baar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 zwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 baag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 zwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 baab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 zwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 baaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(2, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 wxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 arrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 wxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 arrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 wxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 arrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 wxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 arra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 wxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 argr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 wxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 argg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 wxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public long4 argb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public long4 wxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 arga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 wxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 arbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 wxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public long4 arbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public long4 wxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 arbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 wxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 arba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 wxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 arar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 wxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 arag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 wxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 arab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 wxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 araa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 wyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 agrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 wyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 agrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 wyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public long4 agrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public long4 wyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 agra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 wyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 aggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 wyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 aggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 wyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 aggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 wyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 agga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 wyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public long4 agbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public long4 wyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 agbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 wyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 agbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 wyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 agba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 wywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 agar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 wywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 agag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 wywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 agab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 wyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 agaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 wzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 abrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 wzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public long4 abrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public long4 wzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 abrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 wzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 abra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 wzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public long4 abgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public long4 wzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 abgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 wzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 abgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 wzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 abga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 wzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 abbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 wzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 abbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 wzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 abbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 wzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 abba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 wzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 abar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 wzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 abag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 wzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 abab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 wzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 abaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 wwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 aarr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 wwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 aarg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 wwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 aarb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 wwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 aara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 wwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 aagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 wwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 aagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 wwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 aagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 wwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 aaga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 wwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 aabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 wwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 aabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 wwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 aabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 wwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 aaba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 wwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 aaar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public long4 wwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 aaag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public long4 wwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 aaab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public long4 wwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public long4 aaaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create(3, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // long4

#region ulong4

public partial struct ulong4 
{
    public ulong4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rrab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rraa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xyzw
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public ulong4 rgba
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public ulong4 xywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public ulong4 rgab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public ulong4 xyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rgaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public ulong4 rbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public ulong4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public ulong4 rbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public ulong4 xzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rarr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rarg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rarb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ragr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ragg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public ulong4 ragb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public ulong4 xwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 raga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public ulong4 rabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public ulong4 xwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 rabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 raba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 raar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 raag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 raab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 xwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 raaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public ulong4 grba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public ulong4 yxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 grag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public ulong4 grab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public ulong4 yxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 graa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ggaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public ulong4 gbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public ulong4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public ulong4 gbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public ulong4 yzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 yzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ywxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 garr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ywxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 garg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ywxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public ulong4 garb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public ulong4 ywxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ywyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ywyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ywyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ywyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gaga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ywzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public ulong4 gabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public ulong4 ywzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ywzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ywzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gaba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ywwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gaar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ywwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gaag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ywwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gaab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 ywww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 gaaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public ulong4 brga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public ulong4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public ulong4 brag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public ulong4 zxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 brab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 braa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public ulong4 bgra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public ulong4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public ulong4 bgar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public ulong4 zywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bgaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 barr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public ulong4 barg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public ulong4 zwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 barb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public ulong4 bagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public ulong4 zwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 bagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 baga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 babr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 babg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 babb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 baba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 baar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 baag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 baab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 zwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 baaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 arrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 arrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 arrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 arra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 argr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 argg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public ulong4 argb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public ulong4 wxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 arga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 arbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public ulong4 arbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public ulong4 wxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 arbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 arba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 arar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 arag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 arab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 araa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 agrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 agrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public ulong4 agrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public ulong4 wyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 agra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 agga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public ulong4 agbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public ulong4 wyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 agbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 agbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 agba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 agar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 agag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 agab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 agaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 abrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public ulong4 abrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public ulong4 wzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 abrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 abra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public ulong4 abgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public ulong4 wzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 abgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 abgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 abga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 abbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 abbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 abbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 abba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 abar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 abag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 abab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 abaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aarr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aarg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aarb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aaga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aaba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aaar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aaag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aaab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 wwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public ulong4 aaaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // ulong4

#region decimal4

public partial struct decimal4 
{
    public decimal4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public decimal4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public decimal4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public decimal4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public decimal4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public decimal4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public decimal4 xxxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public decimal4 rrra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public decimal4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public decimal4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public decimal4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public decimal4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public decimal4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public decimal4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public decimal4 xxyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public decimal4 rrga
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public decimal4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public decimal4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public decimal4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public decimal4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public decimal4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public decimal4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public decimal4 xxzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public decimal4 rrba
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public decimal4 xxwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public decimal4 rrar
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public decimal4 xxwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public decimal4 rrag
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public decimal4 xxwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public decimal4 rrab
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public decimal4 xxww
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public decimal4 rraa
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public decimal4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public decimal4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public decimal4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public decimal4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public decimal4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public decimal4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public decimal4 xyxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public decimal4 rgra
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public decimal4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public decimal4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public decimal4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public decimal4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public decimal4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public decimal4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public decimal4 xyyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public decimal4 rgga
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public decimal4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public decimal4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public decimal4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public decimal4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public decimal4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public decimal4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public decimal4 xyzw
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public decimal4 rgba
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public decimal4 xywx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public decimal4 rgar
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public decimal4 xywy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public decimal4 rgag
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public decimal4 xywz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public decimal4 rgab
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public decimal4 xyww
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public decimal4 rgaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public decimal4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public decimal4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public decimal4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public decimal4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public decimal4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public decimal4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public decimal4 xzxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public decimal4 rbra
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public decimal4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public decimal4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public decimal4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public decimal4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public decimal4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public decimal4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public decimal4 xzyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public decimal4 rbga
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public decimal4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public decimal4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public decimal4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public decimal4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public decimal4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public decimal4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public decimal4 xzzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public decimal4 rbba
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public decimal4 xzwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public decimal4 rbar
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public decimal4 xzwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public decimal4 rbag
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public decimal4 xzwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public decimal4 rbab
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public decimal4 xzww
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public decimal4 rbaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public decimal4 xwxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public decimal4 rarr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public decimal4 xwxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public decimal4 rarg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public decimal4 xwxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public decimal4 rarb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public decimal4 xwxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public decimal4 rara
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public decimal4 xwyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public decimal4 ragr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public decimal4 xwyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public decimal4 ragg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public decimal4 xwyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public decimal4 ragb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public decimal4 xwyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public decimal4 raga
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public decimal4 xwzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public decimal4 rabr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public decimal4 xwzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public decimal4 rabg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public decimal4 xwzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public decimal4 rabb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public decimal4 xwzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public decimal4 raba
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public decimal4 xwwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public decimal4 raar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public decimal4 xwwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public decimal4 raag
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public decimal4 xwwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public decimal4 raab
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public decimal4 xwww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public decimal4 raaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public decimal4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public decimal4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public decimal4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public decimal4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public decimal4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public decimal4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public decimal4 yxxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public decimal4 grra
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public decimal4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public decimal4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public decimal4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public decimal4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public decimal4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public decimal4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public decimal4 yxyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public decimal4 grga
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public decimal4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public decimal4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public decimal4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public decimal4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public decimal4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public decimal4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public decimal4 yxzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public decimal4 grba
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public decimal4 yxwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public decimal4 grar
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public decimal4 yxwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public decimal4 grag
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public decimal4 yxwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public decimal4 grab
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public decimal4 yxww
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public decimal4 graa
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public decimal4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public decimal4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public decimal4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public decimal4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public decimal4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public decimal4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public decimal4 yyxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public decimal4 ggra
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public decimal4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public decimal4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public decimal4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public decimal4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public decimal4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public decimal4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public decimal4 yyyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public decimal4 ggga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public decimal4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public decimal4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public decimal4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public decimal4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public decimal4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public decimal4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public decimal4 yyzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public decimal4 ggba
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public decimal4 yywx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public decimal4 ggar
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public decimal4 yywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public decimal4 ggag
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public decimal4 yywz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public decimal4 ggab
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public decimal4 yyww
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public decimal4 ggaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public decimal4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public decimal4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public decimal4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public decimal4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public decimal4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public decimal4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public decimal4 yzxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public decimal4 gbra
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public decimal4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public decimal4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public decimal4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public decimal4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public decimal4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public decimal4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public decimal4 yzyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public decimal4 gbga
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public decimal4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public decimal4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public decimal4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public decimal4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public decimal4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public decimal4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public decimal4 yzzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public decimal4 gbba
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public decimal4 yzwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public decimal4 gbar
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public decimal4 yzwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public decimal4 gbag
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public decimal4 yzwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public decimal4 gbab
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public decimal4 yzww
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public decimal4 gbaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public decimal4 ywxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public decimal4 garr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public decimal4 ywxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public decimal4 garg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public decimal4 ywxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public decimal4 garb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public decimal4 ywxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public decimal4 gara
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public decimal4 ywyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public decimal4 gagr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public decimal4 ywyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public decimal4 gagg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public decimal4 ywyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public decimal4 gagb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public decimal4 ywyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public decimal4 gaga
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public decimal4 ywzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public decimal4 gabr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public decimal4 ywzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public decimal4 gabg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public decimal4 ywzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public decimal4 gabb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public decimal4 ywzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public decimal4 gaba
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public decimal4 ywwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public decimal4 gaar
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public decimal4 ywwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public decimal4 gaag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public decimal4 ywwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public decimal4 gaab
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public decimal4 ywww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public decimal4 gaaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public decimal4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public decimal4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public decimal4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public decimal4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public decimal4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public decimal4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public decimal4 zxxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public decimal4 brra
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public decimal4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public decimal4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public decimal4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public decimal4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public decimal4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public decimal4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public decimal4 zxyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public decimal4 brga
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public decimal4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public decimal4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public decimal4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public decimal4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public decimal4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public decimal4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public decimal4 zxzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public decimal4 brba
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public decimal4 zxwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public decimal4 brar
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public decimal4 zxwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public decimal4 brag
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public decimal4 zxwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public decimal4 brab
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public decimal4 zxww
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public decimal4 braa
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public decimal4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public decimal4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public decimal4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public decimal4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public decimal4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public decimal4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public decimal4 zyxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public decimal4 bgra
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public decimal4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public decimal4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public decimal4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public decimal4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public decimal4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public decimal4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public decimal4 zyyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public decimal4 bgga
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public decimal4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public decimal4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public decimal4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public decimal4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public decimal4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public decimal4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public decimal4 zyzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public decimal4 bgba
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public decimal4 zywx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public decimal4 bgar
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public decimal4 zywy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public decimal4 bgag
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public decimal4 zywz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public decimal4 bgab
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public decimal4 zyww
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public decimal4 bgaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public decimal4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public decimal4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public decimal4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public decimal4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public decimal4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public decimal4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public decimal4 zzxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public decimal4 bbra
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public decimal4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public decimal4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public decimal4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public decimal4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public decimal4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public decimal4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public decimal4 zzyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public decimal4 bbga
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public decimal4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public decimal4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public decimal4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public decimal4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public decimal4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public decimal4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public decimal4 zzzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public decimal4 bbba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public decimal4 zzwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public decimal4 bbar
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public decimal4 zzwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public decimal4 bbag
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public decimal4 zzwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public decimal4 bbab
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public decimal4 zzww
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public decimal4 bbaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public decimal4 zwxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public decimal4 barr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public decimal4 zwxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public decimal4 barg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public decimal4 zwxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public decimal4 barb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public decimal4 zwxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public decimal4 bara
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public decimal4 zwyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public decimal4 bagr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public decimal4 zwyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public decimal4 bagg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public decimal4 zwyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public decimal4 bagb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public decimal4 zwyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public decimal4 baga
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public decimal4 zwzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public decimal4 babr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public decimal4 zwzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public decimal4 babg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public decimal4 zwzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public decimal4 babb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public decimal4 zwzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public decimal4 baba
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public decimal4 zwwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public decimal4 baar
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public decimal4 zwwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public decimal4 baag
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public decimal4 zwwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public decimal4 baab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public decimal4 zwww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public decimal4 baaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public decimal4 wxxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public decimal4 arrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public decimal4 wxxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public decimal4 arrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public decimal4 wxxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public decimal4 arrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public decimal4 wxxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public decimal4 arra
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public decimal4 wxyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public decimal4 argr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public decimal4 wxyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public decimal4 argg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public decimal4 wxyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public decimal4 argb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public decimal4 wxyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public decimal4 arga
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public decimal4 wxzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public decimal4 arbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public decimal4 wxzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public decimal4 arbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public decimal4 wxzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public decimal4 arbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public decimal4 wxzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public decimal4 arba
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public decimal4 wxwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public decimal4 arar
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public decimal4 wxwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public decimal4 arag
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public decimal4 wxwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public decimal4 arab
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public decimal4 wxww
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public decimal4 araa
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public decimal4 wyxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public decimal4 agrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public decimal4 wyxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public decimal4 agrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public decimal4 wyxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public decimal4 agrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public decimal4 wyxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public decimal4 agra
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public decimal4 wyyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public decimal4 aggr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public decimal4 wyyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public decimal4 aggg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public decimal4 wyyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public decimal4 aggb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public decimal4 wyyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public decimal4 agga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public decimal4 wyzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public decimal4 agbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public decimal4 wyzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public decimal4 agbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public decimal4 wyzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public decimal4 agbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public decimal4 wyzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public decimal4 agba
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public decimal4 wywx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public decimal4 agar
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public decimal4 wywy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public decimal4 agag
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public decimal4 wywz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public decimal4 agab
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public decimal4 wyww
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public decimal4 agaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public decimal4 wzxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public decimal4 abrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public decimal4 wzxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public decimal4 abrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public decimal4 wzxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public decimal4 abrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public decimal4 wzxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public decimal4 abra
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public decimal4 wzyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public decimal4 abgr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public decimal4 wzyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public decimal4 abgg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public decimal4 wzyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public decimal4 abgb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public decimal4 wzyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public decimal4 abga
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public decimal4 wzzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public decimal4 abbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public decimal4 wzzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public decimal4 abbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public decimal4 wzzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public decimal4 abbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public decimal4 wzzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public decimal4 abba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public decimal4 wzwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public decimal4 abar
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public decimal4 wzwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public decimal4 abag
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public decimal4 wzwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public decimal4 abab
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public decimal4 wzww
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public decimal4 abaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public decimal4 wwxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public decimal4 aarr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public decimal4 wwxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public decimal4 aarg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public decimal4 wwxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public decimal4 aarb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public decimal4 wwxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public decimal4 aara
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public decimal4 wwyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public decimal4 aagr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public decimal4 wwyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public decimal4 aagg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public decimal4 wwyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public decimal4 aagb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public decimal4 wwyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public decimal4 aaga
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public decimal4 wwzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public decimal4 aabr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public decimal4 wwzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public decimal4 aabg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public decimal4 wwzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public decimal4 aabb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public decimal4 wwzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public decimal4 aaba
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public decimal4 wwwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public decimal4 aaar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public decimal4 wwwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public decimal4 aaag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public decimal4 wwwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public decimal4 aaab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public decimal4 wwww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
    public decimal4 aaaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
}

#endregion // decimal4

#region half4

public partial struct half4 
{
    public half4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public half4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public half4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public half4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public half4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public half4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public half4 xxxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public half4 rrra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public half4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public half4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public half4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public half4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public half4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public half4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public half4 xxyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public half4 rrga
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public half4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public half4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public half4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public half4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public half4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public half4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public half4 xxzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public half4 rrba
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public half4 xxwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public half4 rrar
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public half4 xxwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public half4 rrag
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public half4 xxwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public half4 rrab
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public half4 xxww
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public half4 rraa
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public half4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public half4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public half4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public half4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public half4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public half4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public half4 xyxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public half4 rgra
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public half4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public half4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public half4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public half4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public half4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public half4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public half4 xyyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public half4 rgga
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public half4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public half4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public half4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public half4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public half4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public half4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public half4 xyzw
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public half4 rgba
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public half4 xywx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public half4 rgar
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public half4 xywy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public half4 rgag
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public half4 xywz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public half4 rgab
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public half4 xyww
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public half4 rgaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public half4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public half4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public half4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public half4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public half4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public half4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public half4 xzxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public half4 rbra
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public half4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public half4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public half4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public half4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public half4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public half4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public half4 xzyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public half4 rbga
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public half4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public half4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public half4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public half4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public half4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public half4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public half4 xzzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public half4 rbba
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public half4 xzwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public half4 rbar
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public half4 xzwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public half4 rbag
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public half4 xzwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public half4 rbab
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public half4 xzww
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public half4 rbaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public half4 xwxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public half4 rarr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public half4 xwxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public half4 rarg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public half4 xwxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public half4 rarb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public half4 xwxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public half4 rara
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public half4 xwyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public half4 ragr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public half4 xwyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public half4 ragg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public half4 xwyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public half4 ragb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public half4 xwyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public half4 raga
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public half4 xwzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public half4 rabr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public half4 xwzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public half4 rabg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public half4 xwzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public half4 rabb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public half4 xwzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public half4 raba
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public half4 xwwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public half4 raar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public half4 xwwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public half4 raag
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public half4 xwwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public half4 raab
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public half4 xwww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public half4 raaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public half4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public half4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public half4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public half4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public half4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public half4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public half4 yxxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public half4 grra
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public half4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public half4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public half4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public half4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public half4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public half4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public half4 yxyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public half4 grga
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public half4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public half4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public half4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public half4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public half4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public half4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public half4 yxzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public half4 grba
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public half4 yxwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public half4 grar
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public half4 yxwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public half4 grag
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public half4 yxwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public half4 grab
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public half4 yxww
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public half4 graa
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public half4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public half4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public half4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public half4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public half4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public half4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public half4 yyxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public half4 ggra
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public half4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public half4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public half4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public half4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public half4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public half4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public half4 yyyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public half4 ggga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public half4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public half4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public half4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public half4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public half4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public half4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public half4 yyzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public half4 ggba
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public half4 yywx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public half4 ggar
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public half4 yywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public half4 ggag
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public half4 yywz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public half4 ggab
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public half4 yyww
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public half4 ggaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public half4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public half4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public half4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public half4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public half4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public half4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public half4 yzxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public half4 gbra
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public half4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public half4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public half4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public half4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public half4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public half4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public half4 yzyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public half4 gbga
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public half4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public half4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public half4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public half4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public half4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public half4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public half4 yzzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public half4 gbba
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public half4 yzwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public half4 gbar
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public half4 yzwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public half4 gbag
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public half4 yzwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public half4 gbab
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public half4 yzww
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public half4 gbaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public half4 ywxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public half4 garr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public half4 ywxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public half4 garg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public half4 ywxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public half4 garb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public half4 ywxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public half4 gara
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public half4 ywyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public half4 gagr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public half4 ywyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public half4 gagg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public half4 ywyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public half4 gagb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public half4 ywyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public half4 gaga
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public half4 ywzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public half4 gabr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public half4 ywzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public half4 gabg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public half4 ywzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public half4 gabb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public half4 ywzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public half4 gaba
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public half4 ywwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public half4 gaar
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public half4 ywwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public half4 gaag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public half4 ywwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public half4 gaab
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public half4 ywww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public half4 gaaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public half4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public half4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public half4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public half4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public half4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public half4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public half4 zxxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public half4 brra
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public half4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public half4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public half4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public half4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public half4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public half4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public half4 zxyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public half4 brga
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public half4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public half4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public half4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public half4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public half4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public half4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public half4 zxzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public half4 brba
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public half4 zxwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public half4 brar
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public half4 zxwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public half4 brag
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public half4 zxwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public half4 brab
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public half4 zxww
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public half4 braa
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public half4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public half4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public half4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public half4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public half4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public half4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public half4 zyxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public half4 bgra
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public half4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public half4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public half4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public half4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public half4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public half4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public half4 zyyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public half4 bgga
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public half4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public half4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public half4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public half4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public half4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public half4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public half4 zyzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public half4 bgba
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public half4 zywx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public half4 bgar
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public half4 zywy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public half4 bgag
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public half4 zywz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public half4 bgab
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public half4 zyww
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public half4 bgaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public half4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public half4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public half4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public half4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public half4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public half4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public half4 zzxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public half4 bbra
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public half4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public half4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public half4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public half4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public half4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public half4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public half4 zzyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public half4 bbga
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public half4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public half4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public half4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public half4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public half4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public half4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public half4 zzzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public half4 bbba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public half4 zzwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public half4 bbar
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public half4 zzwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public half4 bbag
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public half4 zzwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public half4 bbab
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public half4 zzww
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public half4 bbaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public half4 zwxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public half4 barr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public half4 zwxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public half4 barg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public half4 zwxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public half4 barb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public half4 zwxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public half4 bara
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public half4 zwyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public half4 bagr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public half4 zwyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public half4 bagg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public half4 zwyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public half4 bagb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public half4 zwyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public half4 baga
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public half4 zwzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public half4 babr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public half4 zwzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public half4 babg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public half4 zwzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public half4 babb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public half4 zwzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public half4 baba
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public half4 zwwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public half4 baar
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public half4 zwwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public half4 baag
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public half4 zwwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public half4 baab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public half4 zwww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public half4 baaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public half4 wxxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public half4 arrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public half4 wxxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public half4 arrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public half4 wxxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public half4 arrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public half4 wxxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public half4 arra
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public half4 wxyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public half4 argr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public half4 wxyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public half4 argg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public half4 wxyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public half4 argb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public half4 wxyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public half4 arga
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public half4 wxzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public half4 arbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public half4 wxzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public half4 arbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public half4 wxzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public half4 arbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public half4 wxzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public half4 arba
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public half4 wxwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public half4 arar
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public half4 wxwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public half4 arag
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public half4 wxwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public half4 arab
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public half4 wxww
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public half4 araa
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public half4 wyxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public half4 agrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public half4 wyxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public half4 agrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public half4 wyxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public half4 agrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public half4 wyxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public half4 agra
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public half4 wyyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public half4 aggr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public half4 wyyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public half4 aggg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public half4 wyyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public half4 aggb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public half4 wyyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public half4 agga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public half4 wyzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public half4 agbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public half4 wyzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public half4 agbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public half4 wyzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public half4 agbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public half4 wyzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public half4 agba
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public half4 wywx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public half4 agar
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public half4 wywy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public half4 agag
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public half4 wywz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public half4 agab
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public half4 wyww
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public half4 agaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public half4 wzxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public half4 abrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public half4 wzxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public half4 abrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public half4 wzxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public half4 abrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public half4 wzxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public half4 abra
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public half4 wzyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public half4 abgr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public half4 wzyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public half4 abgg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public half4 wzyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public half4 abgb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public half4 wzyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public half4 abga
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public half4 wzzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public half4 abbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public half4 wzzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public half4 abbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public half4 wzzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public half4 abbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public half4 wzzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public half4 abba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public half4 wzwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public half4 abar
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public half4 wzwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public half4 abag
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public half4 wzwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public half4 abab
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public half4 wzww
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public half4 abaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public half4 wwxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public half4 aarr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public half4 wwxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public half4 aarg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public half4 wwxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public half4 aarb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public half4 wwxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public half4 aara
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public half4 wwyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public half4 aagr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public half4 wwyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public half4 aagg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public half4 wwyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public half4 aagb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public half4 wwyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public half4 aaga
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public half4 wwzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public half4 aabr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public half4 wwzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public half4 aabg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public half4 wwzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public half4 aabb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public half4 wwzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public half4 aaba
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public half4 wwwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public half4 aaar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public half4 wwwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public half4 aaag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public half4 wwwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public half4 aaab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public half4 wwww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
    public half4 aaaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
}

#endregion // half4

#region b16v4

public partial struct b16v4 
{
    public b16v4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public b16v4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public b16v4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public b16v4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public b16v4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public b16v4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public b16v4 xxxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public b16v4 rrra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
    }
    public b16v4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public b16v4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public b16v4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public b16v4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public b16v4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public b16v4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public b16v4 xxyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public b16v4 rrga
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
    }
    public b16v4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public b16v4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public b16v4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public b16v4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public b16v4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public b16v4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public b16v4 xxzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public b16v4 rrba
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
    }
    public b16v4 xxwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public b16v4 rrar
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
    }
    public b16v4 xxwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public b16v4 rrag
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
    }
    public b16v4 xxwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public b16v4 rrab
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
    }
    public b16v4 xxww
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public b16v4 rraa
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
    }
    public b16v4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public b16v4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public b16v4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public b16v4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public b16v4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public b16v4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public b16v4 xyxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public b16v4 rgra
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
    }
    public b16v4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public b16v4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public b16v4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public b16v4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public b16v4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public b16v4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public b16v4 xyyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public b16v4 rgga
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
    }
    public b16v4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public b16v4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public b16v4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public b16v4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public b16v4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public b16v4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public b16v4 xyzw
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public b16v4 rgba
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public b16v4 xywx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public b16v4 rgar
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
    }
    public b16v4 xywy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public b16v4 rgag
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
    }
    public b16v4 xywz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public b16v4 rgab
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public b16v4 xyww
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public b16v4 rgaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
    }
    public b16v4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public b16v4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public b16v4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public b16v4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public b16v4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public b16v4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public b16v4 xzxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public b16v4 rbra
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
    }
    public b16v4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public b16v4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public b16v4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public b16v4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public b16v4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public b16v4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public b16v4 xzyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public b16v4 rbga
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public b16v4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public b16v4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public b16v4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public b16v4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public b16v4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public b16v4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public b16v4 xzzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public b16v4 rbba
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
    }
    public b16v4 xzwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public b16v4 rbar
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
    }
    public b16v4 xzwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public b16v4 rbag
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public b16v4 xzwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public b16v4 rbab
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
    }
    public b16v4 xzww
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public b16v4 rbaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
    }
    public b16v4 xwxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public b16v4 rarr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
    }
    public b16v4 xwxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public b16v4 rarg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
    }
    public b16v4 xwxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public b16v4 rarb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
    }
    public b16v4 xwxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public b16v4 rara
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
    }
    public b16v4 xwyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public b16v4 ragr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
    }
    public b16v4 xwyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public b16v4 ragg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
    }
    public b16v4 xwyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public b16v4 ragb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public b16v4 xwyw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public b16v4 raga
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
    }
    public b16v4 xwzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public b16v4 rabr
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
    }
    public b16v4 xwzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public b16v4 rabg
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public b16v4 xwzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public b16v4 rabb
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
    }
    public b16v4 xwzw
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public b16v4 raba
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
    }
    public b16v4 xwwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public b16v4 raar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
    }
    public b16v4 xwwy
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public b16v4 raag
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
    }
    public b16v4 xwwz
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public b16v4 raab
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
    }
    public b16v4 xwww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public b16v4 raaa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
    }
    public b16v4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public b16v4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public b16v4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public b16v4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public b16v4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public b16v4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public b16v4 yxxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public b16v4 grra
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
    }
    public b16v4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public b16v4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public b16v4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public b16v4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public b16v4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public b16v4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public b16v4 yxyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public b16v4 grga
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
    }
    public b16v4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public b16v4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public b16v4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public b16v4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public b16v4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public b16v4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public b16v4 yxzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public b16v4 grba
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public b16v4 yxwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public b16v4 grar
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
    }
    public b16v4 yxwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public b16v4 grag
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
    }
    public b16v4 yxwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public b16v4 grab
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public b16v4 yxww
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public b16v4 graa
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
    }
    public b16v4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public b16v4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public b16v4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public b16v4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public b16v4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public b16v4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public b16v4 yyxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public b16v4 ggra
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
    }
    public b16v4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public b16v4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public b16v4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public b16v4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public b16v4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public b16v4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public b16v4 yyyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public b16v4 ggga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
    }
    public b16v4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public b16v4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public b16v4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public b16v4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public b16v4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public b16v4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public b16v4 yyzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public b16v4 ggba
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
    }
    public b16v4 yywx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public b16v4 ggar
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
    }
    public b16v4 yywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public b16v4 ggag
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
    }
    public b16v4 yywz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public b16v4 ggab
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
    }
    public b16v4 yyww
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public b16v4 ggaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
    }
    public b16v4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public b16v4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public b16v4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public b16v4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public b16v4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public b16v4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public b16v4 yzxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public b16v4 gbra
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public b16v4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public b16v4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public b16v4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public b16v4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public b16v4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public b16v4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public b16v4 yzyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public b16v4 gbga
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
    }
    public b16v4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public b16v4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public b16v4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public b16v4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public b16v4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public b16v4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public b16v4 yzzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public b16v4 gbba
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
    }
    public b16v4 yzwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public b16v4 gbar
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public b16v4 yzwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public b16v4 gbag
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
    }
    public b16v4 yzwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public b16v4 gbab
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
    }
    public b16v4 yzww
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public b16v4 gbaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
    }
    public b16v4 ywxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public b16v4 garr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
    }
    public b16v4 ywxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public b16v4 garg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
    }
    public b16v4 ywxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public b16v4 garb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public b16v4 ywxw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public b16v4 gara
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
    }
    public b16v4 ywyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public b16v4 gagr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
    }
    public b16v4 ywyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public b16v4 gagg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
    }
    public b16v4 ywyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public b16v4 gagb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
    }
    public b16v4 ywyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public b16v4 gaga
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
    }
    public b16v4 ywzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public b16v4 gabr
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public b16v4 ywzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public b16v4 gabg
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
    }
    public b16v4 ywzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public b16v4 gabb
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
    }
    public b16v4 ywzw
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public b16v4 gaba
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
    }
    public b16v4 ywwx
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public b16v4 gaar
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
    }
    public b16v4 ywwy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public b16v4 gaag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
    }
    public b16v4 ywwz
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public b16v4 gaab
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
    }
    public b16v4 ywww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public b16v4 gaaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
    }
    public b16v4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public b16v4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public b16v4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public b16v4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public b16v4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public b16v4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public b16v4 zxxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public b16v4 brra
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
    }
    public b16v4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public b16v4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public b16v4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public b16v4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public b16v4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public b16v4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public b16v4 zxyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public b16v4 brga
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public b16v4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public b16v4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public b16v4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public b16v4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public b16v4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public b16v4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public b16v4 zxzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public b16v4 brba
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
    }
    public b16v4 zxwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public b16v4 brar
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
    }
    public b16v4 zxwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public b16v4 brag
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public b16v4 zxwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public b16v4 brab
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
    }
    public b16v4 zxww
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public b16v4 braa
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
    }
    public b16v4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public b16v4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public b16v4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public b16v4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public b16v4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public b16v4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public b16v4 zyxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public b16v4 bgra
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public b16v4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public b16v4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public b16v4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public b16v4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public b16v4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public b16v4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public b16v4 zyyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public b16v4 bgga
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
    }
    public b16v4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public b16v4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public b16v4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public b16v4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public b16v4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public b16v4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public b16v4 zyzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public b16v4 bgba
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
    }
    public b16v4 zywx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public b16v4 bgar
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public b16v4 zywy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public b16v4 bgag
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
    }
    public b16v4 zywz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public b16v4 bgab
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
    }
    public b16v4 zyww
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public b16v4 bgaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
    }
    public b16v4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public b16v4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public b16v4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public b16v4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public b16v4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public b16v4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public b16v4 zzxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public b16v4 bbra
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
    }
    public b16v4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public b16v4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public b16v4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public b16v4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public b16v4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public b16v4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public b16v4 zzyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public b16v4 bbga
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
    }
    public b16v4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public b16v4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public b16v4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public b16v4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public b16v4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public b16v4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public b16v4 zzzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public b16v4 bbba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
    }
    public b16v4 zzwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public b16v4 bbar
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
    }
    public b16v4 zzwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public b16v4 bbag
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
    }
    public b16v4 zzwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public b16v4 bbab
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
    }
    public b16v4 zzww
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public b16v4 bbaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
    }
    public b16v4 zwxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public b16v4 barr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
    }
    public b16v4 zwxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public b16v4 barg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public b16v4 zwxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public b16v4 barb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
    }
    public b16v4 zwxw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public b16v4 bara
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
    }
    public b16v4 zwyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public b16v4 bagr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public b16v4 zwyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public b16v4 bagg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
    }
    public b16v4 zwyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public b16v4 bagb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
    }
    public b16v4 zwyw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public b16v4 baga
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
    }
    public b16v4 zwzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public b16v4 babr
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
    }
    public b16v4 zwzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public b16v4 babg
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
    }
    public b16v4 zwzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public b16v4 babb
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
    }
    public b16v4 zwzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public b16v4 baba
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
    }
    public b16v4 zwwx
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public b16v4 baar
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
    }
    public b16v4 zwwy
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public b16v4 baag
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
    }
    public b16v4 zwwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public b16v4 baab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
    }
    public b16v4 zwww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public b16v4 baaa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
    }
    public b16v4 wxxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public b16v4 arrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
    }
    public b16v4 wxxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public b16v4 arrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
    }
    public b16v4 wxxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public b16v4 arrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
    }
    public b16v4 wxxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public b16v4 arra
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
    }
    public b16v4 wxyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public b16v4 argr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
    }
    public b16v4 wxyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public b16v4 argg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
    }
    public b16v4 wxyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public b16v4 argb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public b16v4 wxyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public b16v4 arga
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
    }
    public b16v4 wxzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public b16v4 arbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
    }
    public b16v4 wxzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public b16v4 arbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public b16v4 wxzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public b16v4 arbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
    }
    public b16v4 wxzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public b16v4 arba
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
    }
    public b16v4 wxwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public b16v4 arar
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
    }
    public b16v4 wxwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public b16v4 arag
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
    }
    public b16v4 wxwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public b16v4 arab
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
    }
    public b16v4 wxww
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public b16v4 araa
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
    }
    public b16v4 wyxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public b16v4 agrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
    }
    public b16v4 wyxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public b16v4 agrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
    }
    public b16v4 wyxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public b16v4 agrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public b16v4 wyxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public b16v4 agra
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
    }
    public b16v4 wyyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public b16v4 aggr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
    }
    public b16v4 wyyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public b16v4 aggg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
    }
    public b16v4 wyyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public b16v4 aggb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
    }
    public b16v4 wyyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public b16v4 agga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
    }
    public b16v4 wyzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public b16v4 agbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public b16v4 wyzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public b16v4 agbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
    }
    public b16v4 wyzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public b16v4 agbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
    }
    public b16v4 wyzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public b16v4 agba
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
    }
    public b16v4 wywx
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public b16v4 agar
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
    }
    public b16v4 wywy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public b16v4 agag
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
    }
    public b16v4 wywz
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public b16v4 agab
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
    }
    public b16v4 wyww
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public b16v4 agaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
    }
    public b16v4 wzxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public b16v4 abrr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
    }
    public b16v4 wzxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public b16v4 abrg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public b16v4 wzxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public b16v4 abrb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
    }
    public b16v4 wzxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public b16v4 abra
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
    }
    public b16v4 wzyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public b16v4 abgr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public b16v4 wzyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public b16v4 abgg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
    }
    public b16v4 wzyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public b16v4 abgb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
    }
    public b16v4 wzyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public b16v4 abga
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
    }
    public b16v4 wzzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public b16v4 abbr
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
    }
    public b16v4 wzzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public b16v4 abbg
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
    }
    public b16v4 wzzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public b16v4 abbb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
    }
    public b16v4 wzzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public b16v4 abba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
    }
    public b16v4 wzwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public b16v4 abar
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
    }
    public b16v4 wzwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public b16v4 abag
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
    }
    public b16v4 wzwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public b16v4 abab
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
    }
    public b16v4 wzww
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public b16v4 abaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
    }
    public b16v4 wwxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public b16v4 aarr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
    }
    public b16v4 wwxy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public b16v4 aarg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
    }
    public b16v4 wwxz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public b16v4 aarb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
    }
    public b16v4 wwxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public b16v4 aara
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
    }
    public b16v4 wwyx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public b16v4 aagr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
    }
    public b16v4 wwyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public b16v4 aagg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
    }
    public b16v4 wwyz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public b16v4 aagb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
    }
    public b16v4 wwyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public b16v4 aaga
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
    }
    public b16v4 wwzx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public b16v4 aabr
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
    }
    public b16v4 wwzy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public b16v4 aabg
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
    }
    public b16v4 wwzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public b16v4 aabb
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
    }
    public b16v4 wwzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public b16v4 aaba
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
    }
    public b16v4 wwwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public b16v4 aaar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
    }
    public b16v4 wwwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public b16v4 aaag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
    }
    public b16v4 wwwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public b16v4 aaab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
    }
    public b16v4 wwww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
    public b16v4 aaaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
    }
}

#endregion // b16v4

#region b32v4

public partial struct b32v4 
{
    public b32v4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rrab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rraa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xyzw
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public b32v4 rgba
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public b32v4 xywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public b32v4 rgab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public b32v4 xyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rgaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public b32v4 rbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public b32v4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public b32v4 rbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public b32v4 xzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rarr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rarg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rarb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ragr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ragg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public b32v4 ragb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public b32v4 xwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 raga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public b32v4 rabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public b32v4 xwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 rabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 raba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 raar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 raag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 raab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 xwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 raaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)0, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public b32v4 grba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public b32v4 yxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 grag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public b32v4 grab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public b32v4 yxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 graa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ggaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public b32v4 gbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public b32v4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public b32v4 gbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public b32v4 yzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 yzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ywxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 garr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ywxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 garg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ywxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public b32v4 garb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public b32v4 ywxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ywyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ywyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ywyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ywyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gaga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ywzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public b32v4 gabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public b32v4 ywzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ywzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ywzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gaba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ywwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gaar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ywwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gaag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ywwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gaab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 ywww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 gaaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)1, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public b32v4 brga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public b32v4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public b32v4 brag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public b32v4 zxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 brab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 braa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public b32v4 bgra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public b32v4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bgga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bgba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public b32v4 bgar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public b32v4 zywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bgag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bgab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bgaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 barr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public b32v4 barg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public b32v4 zwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 barb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public b32v4 bagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public b32v4 zwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 bagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 baga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 babr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 babg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 babb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 baba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 baar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 baag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 baab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 zwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 baaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)2, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 arrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 arrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 arrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 arra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 argr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 argg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public b32v4 argb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public b32v4 wxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 arga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 arbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public b32v4 arbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public b32v4 wxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 arbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 arba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 arar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 arag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 arab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 araa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 agrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 agrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public b32v4 agrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public b32v4 wyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 agra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 agga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public b32v4 agbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public b32v4 wyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 agbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 agbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 agba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 agar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 agag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 agab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 agaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 abrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public b32v4 abrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public b32v4 wzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 abrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 abra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public b32v4 abgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public b32v4 wzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 abgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 abgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 abga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 abbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 abbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 abbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 abba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 abar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 abag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 abab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 abaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aarr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aarg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aarb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aaga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aaba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aaar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aaag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aaab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 wwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b32v4 aaaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector128.Shuffle(vector, Vector128.Create((uint)3, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // b32v4

#region b64v4

public partial struct b64v4 
{
    public b64v4 xxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rrab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rraa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xyzw
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public b64v4 rgba
    {
        [MethodImpl(256 | 512)]
        get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public b64v4 xywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public b64v4 rgab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xywz;
    }
    public b64v4 xyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rgaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public b64v4 rbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzyw;
    }
    public b64v4 xzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public b64v4 rbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwyz;
    }
    public b64v4 xzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rarr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rarg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rarb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ragr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ragg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public b64v4 ragb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xzwy;
    }
    public b64v4 xwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 raga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public b64v4 rabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.xwzy;
    }
    public b64v4 xwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 rabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 raba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 raar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 raag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 raab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 xwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 raaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)0, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(x, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public b64v4 grba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, z, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxzw;
    }
    public b64v4 yxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 grag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public b64v4 grab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yxwz;
    }
    public b64v4 yxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 graa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ggaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public b64v4 gbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxyw;
    }
    public b64v4 yzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public b64v4 gbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxyz;
    }
    public b64v4 yzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 yzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ywxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 garr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ywxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 garg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ywxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public b64v4 garb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zxwy;
    }
    public b64v4 ywxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ywyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ywyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ywyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ywyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gaga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ywzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public b64v4 gabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wxzy;
    }
    public b64v4 ywzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ywzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ywzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gaba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ywwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gaar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ywwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gaag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ywwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gaab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 ywww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 gaaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)1, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(y, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public b64v4 brga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, y, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzxw;
    }
    public b64v4 zxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public b64v4 brag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywxz;
    }
    public b64v4 zxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 brab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 braa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bgrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bgrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bgrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public b64v4 bgra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, x, w);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zyxw;
    }
    public b64v4 zyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bgga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bgbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bgbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bgbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bgba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public b64v4 bgar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyxz;
    }
    public b64v4 zywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bgag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bgab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bgaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bbaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 barr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public b64v4 barg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwxy;
    }
    public b64v4 zwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 barb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public b64v4 bagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzxy;
    }
    public b64v4 zwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 bagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 baga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 babr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 babg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 babb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 baba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 baar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 baag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 baab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 zwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 baaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)2, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(z, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wxxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 arrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wxxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 arrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wxxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 arrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wxxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 arra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wxyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 argr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wxyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 argg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wxyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public b64v4 argb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.yzwx;
    }
    public b64v4 wxyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 arga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wxzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 arbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wxzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public b64v4 arbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.ywzx;
    }
    public b64v4 wxzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 arbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wxzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 arba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wxwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 arar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wxwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 arag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wxwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 arab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wxww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 araa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 0, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, x, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wyxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 agrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wyxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 agrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wyxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public b64v4 agrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, z);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zywx;
    }
    public b64v4 wyxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 agra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wyyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aggr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wyyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aggg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wyyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aggb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wyyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 agga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wyzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public b64v4 agbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wyzx;
    }
    public b64v4 wyzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 agbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wyzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 agbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wyzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 agba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wywx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 agar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wywy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 agag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wywz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 agab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wyww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 agaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 1, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, y, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wzxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 abrr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wzxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public b64v4 abrg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, y);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.zwyx;
    }
    public b64v4 wzxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 abrb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wzxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 abra
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wzyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public b64v4 abgr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, x);
#endif // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        set => this = value.wzyx;
    }
    public b64v4 wzyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 abgg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wzyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 abgb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wzyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 abga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wzzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 abbr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wzzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 abbg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wzzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 abbb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wzzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 abba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wzwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 abar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wzwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 abag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wzwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 abab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wzww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 abaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 2, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, z, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wwxx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aarr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wwxy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aarg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wwxz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aarb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wwxw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aara
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 0, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, x, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wwyx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aagr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wwyy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aagg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wwyz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aagb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wwyw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aaga
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 1, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, y, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wwzx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aabr
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wwzy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aabg
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wwzz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aabb
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wwzw
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aaba
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 2, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, z, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wwwx
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aaar
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 0)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, x);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wwwy
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aaag
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 1)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, y);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wwwz
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aaab
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 2)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, z);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 wwww
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
#endif // NET8_0_OR_GREATER
    }
    public b64v4 aaaa
    {
#if NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(Vector256.Shuffle(vector, Vector256.Create((ulong)3, 3, 3, 3)));
#else // NET8_0_OR_GREATER
        [MethodImpl(256 | 512)]
        get => new(w, w, w, w);
#endif // NET8_0_OR_GREATER
    }
}

#endregion // b64v4
