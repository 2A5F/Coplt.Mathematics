<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually
#if NET8_0_OR_GREATER

using System.Runtime.Intrinsics.X86;
using System.Runtime.Intrinsics.Arm;

namespace Coplt.Mathematics.Simd;
<#
    int[] a0123 = [0,1,2,3];
    var car_pd_3 = (
        from a in a0123.AsParallel().AsOrdered()
        from b in a0123.AsParallel().AsOrdered()
        select (a, b)
        ).ToList();
#>

public static partial class simd_shuffle
{    
    [MethodImpl(256 | 512)]
    public static Vector128<float> Shuffle(Vector128<float> a, Vector128<float> b, Shuffle42 lh)
    {
        switch (lh)
        {
<#
    foreach (var tuple1 in car_pd_3)
    {
        foreach (var tuple2 in car_pd_3)
        {
            var (a, b) = tuple1;
            var (c,d) = tuple2;

            var xyzw = $"{Typ.xyzw[a]}{Typ.xyzw[b]}_{Typ.xyzw[c]}{Typ.xyzw[d]}";
#>
            case Shuffle42.<#= xyzw #>:
                if (Sse.IsSupported) return Sse.Shuffle(a, b, 0b<#= $"{d:B2}{c:B2}{b:B2}{a:B2}" #>);
                if (Vector256.IsHardwareAccelerated)
                    return Vector256.Shuffle(
                        a.ToVector256().WithUpper(b),
                        Vector256.Create(<#= a #>, <#= b #>, <#= c + 4 #>, <#= d + 4 #>, <#= a #>, <#= b #>, <#= c + 4 #>, <#= d + 4 #>)
                    ).GetLower();
                return Vector128.Create(
                    Vector128.Shuffle(a, Vector128.Create(<#= a #>, <#= b #>, <#= a #>, <#= b #>)).GetLower(), 
                    Vector128.Shuffle(b, Vector128.Create(<#= c #>, <#= d #>, <#= c #>, <#= d #>)).GetLower()
                );
<#
        }
    }
#>
            default:
                throw new ArgumentOutOfRangeException(nameof(lh), lh, null);
        }
    }

    [MethodImpl(256 | 512)]
    public static Vector256<double> Shuffle(Vector256<double> a, Vector256<double> b, Shuffle42 lh)
    {
        switch (lh)
        {
<#
    foreach (var tuple1 in car_pd_3)
    {
        foreach (var tuple2 in car_pd_3)
        {
            var (a, b) = tuple1;
            var (c,d) = tuple2;

            var xyzw = $"{Typ.xyzw[a]}{Typ.xyzw[b]}_{Typ.xyzw[c]}{Typ.xyzw[d]}";
#>
            case Shuffle42.<#= xyzw #>:
<#
            if (((a < 2 && b >= 2) || (b < 2 && a >= 2) || a == b) && ((c < 2 && d >= 2) || (d < 2 && c >= 2) || c == d))
            {
#>
                if (Avx.IsSupported)
                {
                    var r = Avx.Shuffle(a, b, 0b<#=
                        $"{(d < 2 ? d : d - 2):B1}{(b < 2 ? b : b - 2):B1}{(c < 2 ? c : c - 2):B1}{(a < 2 ? a : a - 2):B1}" #>);
                    return Vector256.Shuffle(r, Vector256.Create(<#= a < 2 ? 0 : 2 #>, <#= b < 2 ? 0 : 2 #>, <#= c < 2 ? 1 : 3 #>, <#= d < 2 ? 1 : 3 #>)); 
                }
<#
            }
#>
                if (Vector512.IsHardwareAccelerated)
                    return Vector512.Shuffle(
                        a.ToVector512().WithUpper(b),
                        Vector512.Create(<#= a #>, <#= b #>, <#= c + 4 #>, <#= d + 4 #>, <#= a #>, <#= b #>, <#= c + 4 #>, <#= d + 4 #>)
                    ).GetLower();
                return Vector256.Create(
                    Vector256.Shuffle(a, Vector256.Create(<#= a #>, <#= b #>, <#= a #>, <#= b #>)).GetLower(), 
                    Vector256.Shuffle(b, Vector256.Create(<#= c #>, <#= d #>, <#= c #>, <#= d #>)).GetLower()
                );
<#
        }
    }
#>
            default:
                throw new ArgumentOutOfRangeException(nameof(lh), lh, null);
        }
    }
}
<#

#>
#endif
