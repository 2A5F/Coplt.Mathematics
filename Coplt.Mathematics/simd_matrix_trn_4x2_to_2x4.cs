// generated by template, do not modify manually
#if NET8_0_OR_GREATER
using System.Runtime.Intrinsics.X86;
using System.Runtime.Intrinsics.Arm;

namespace Coplt.Mathematics;

public static partial class simd_matrix
{
    #region Vector128<float>

    [MethodImpl(256 | 512)]
    public static (Vector64<float> c0, Vector64<float> c1, Vector64<float> c2, Vector64<float> c3) Transpose4x2To2x4(
        Vector128<float> c0, Vector128<float> c1
    )
    {
        if (Sse.IsSupported)
        {
            var a = Sse.UnpackLow(c0, c1); // (c0.x, c1.x, c0.y, c1.y)
            var b = Sse.UnpackHigh(c0, c1); // (c0.z, c1.z, c0.w, c1.w)
            return (a.GetLower(), a.GetUpper(), b.GetLower(), b.GetUpper());
        }
        {
            var oc0 = Vector64.Create(c0.GetElement(0), c1.GetElement(0));
            var oc1 = Vector64.Create(c0.GetElement(1), c1.GetElement(1));
            var oc2 = Vector64.Create(c0.GetElement(2), c1.GetElement(2));
            var oc3 = Vector64.Create(c0.GetElement(3), c1.GetElement(3));
            return (oc0, oc1, oc2, oc3);
        }
    }

    #endregion
    #region Vector256<double>

    [MethodImpl(256 | 512)]
    public static (Vector128<double> c0, Vector128<double> c1, Vector128<double> c2, Vector128<double> c3) Transpose4x2To2x4(
        Vector256<double> c0, Vector256<double> c1
    )
    {
        if (Avx.IsSupported)
        {
            var a = Avx.Shuffle(c0, c1, 0x0); // a0 b0 a2 b2  => (c0.x, c1.x, c0.z, c1.z)
            var c = Avx.Shuffle(c0, c1, 0xF); // a1 b1 a3 b3  => (c0.y, c1.y, c0.w, c1.w)
            return (a.GetLower(), c.GetLower(), a.GetUpper(), c.GetUpper());
        }
        {
            var oc0 = Vector128.Create(c0.GetElement(0), c1.GetElement(0));
            var oc1 = Vector128.Create(c0.GetElement(1), c1.GetElement(1));
            var oc2 = Vector128.Create(c0.GetElement(2), c1.GetElement(2));
            var oc3 = Vector128.Create(c0.GetElement(3), c1.GetElement(3));
            return (oc0, oc1, oc2, oc3);
        }
    }

    #endregion
    #region Vector128<int>

    [MethodImpl(256 | 512)]
    public static (Vector64<int> c0, Vector64<int> c1, Vector64<int> c2, Vector64<int> c3) Transpose4x2To2x4(
        Vector128<int> c0, Vector128<int> c1
    )
    {
        if (Sse.IsSupported)
        {
            var ic0 = c0.AsSingle();
            var ic1 = c1.AsSingle();
            var a = Sse.UnpackLow(ic0, ic1).AsInt32(); // (c0.x, c1.x, c0.y, c1.y)
            var b = Sse.UnpackHigh(ic0, ic1).AsInt32(); // (c0.z, c1.z, c0.w, c1.w)
            return (a.GetLower(), a.GetUpper(), b.GetLower(), b.GetUpper());
        }
        {
            var oc0 = Vector64.Create(c0.GetElement(0), c1.GetElement(0));
            var oc1 = Vector64.Create(c0.GetElement(1), c1.GetElement(1));
            var oc2 = Vector64.Create(c0.GetElement(2), c1.GetElement(2));
            var oc3 = Vector64.Create(c0.GetElement(3), c1.GetElement(3));
            return (oc0, oc1, oc2, oc3);
        }
    }

    #endregion
    #region Vector128<uint>

    [MethodImpl(256 | 512)]
    public static (Vector64<uint> c0, Vector64<uint> c1, Vector64<uint> c2, Vector64<uint> c3) Transpose4x2To2x4(
        Vector128<uint> c0, Vector128<uint> c1
    )
    {
        if (Sse.IsSupported)
        {
            var ic0 = c0.AsSingle();
            var ic1 = c1.AsSingle();
            var a = Sse.UnpackLow(ic0, ic1).AsUInt32(); // (c0.x, c1.x, c0.y, c1.y)
            var b = Sse.UnpackHigh(ic0, ic1).AsUInt32(); // (c0.z, c1.z, c0.w, c1.w)
            return (a.GetLower(), a.GetUpper(), b.GetLower(), b.GetUpper());
        }
        {
            var oc0 = Vector64.Create(c0.GetElement(0), c1.GetElement(0));
            var oc1 = Vector64.Create(c0.GetElement(1), c1.GetElement(1));
            var oc2 = Vector64.Create(c0.GetElement(2), c1.GetElement(2));
            var oc3 = Vector64.Create(c0.GetElement(3), c1.GetElement(3));
            return (oc0, oc1, oc2, oc3);
        }
    }

    #endregion
    #region Vector256<long>

    [MethodImpl(256 | 512)]
    public static (Vector128<long> c0, Vector128<long> c1, Vector128<long> c2, Vector128<long> c3) Transpose4x2To2x4(
        Vector256<long> c0, Vector256<long> c1
    )
    {
        if (Avx.IsSupported)
        {
            var ic0 = c0.AsDouble();
            var ic1 = c1.AsDouble();
            var a = Avx.Shuffle(ic0, ic1, 0x0).AsInt64(); // a0 b0 a2 b2  => (c0.x, c1.x, c0.z, c1.z)
            var c = Avx.Shuffle(ic0, ic1, 0xF).AsInt64(); // a1 b1 a3 b3  => (c0.y, c1.y, c0.w, c1.w)
            return (a.GetLower(), c.GetLower(), a.GetUpper(), c.GetUpper());
        }
        {
            var oc0 = Vector128.Create(c0.GetElement(0), c1.GetElement(0));
            var oc1 = Vector128.Create(c0.GetElement(1), c1.GetElement(1));
            var oc2 = Vector128.Create(c0.GetElement(2), c1.GetElement(2));
            var oc3 = Vector128.Create(c0.GetElement(3), c1.GetElement(3));
            return (oc0, oc1, oc2, oc3);
        }
    }

    #endregion
    #region Vector256<ulong>

    [MethodImpl(256 | 512)]
    public static (Vector128<ulong> c0, Vector128<ulong> c1, Vector128<ulong> c2, Vector128<ulong> c3) Transpose4x2To2x4(
        Vector256<ulong> c0, Vector256<ulong> c1
    )
    {
        if (Avx.IsSupported)
        {
            var ic0 = c0.AsDouble();
            var ic1 = c1.AsDouble();
            var a = Avx.Shuffle(ic0, ic1, 0x0).AsUInt64(); // a0 b0 a2 b2  => (c0.x, c1.x, c0.z, c1.z)
            var c = Avx.Shuffle(ic0, ic1, 0xF).AsUInt64(); // a1 b1 a3 b3  => (c0.y, c1.y, c0.w, c1.w)
            return (a.GetLower(), c.GetLower(), a.GetUpper(), c.GetUpper());
        }
        {
            var oc0 = Vector128.Create(c0.GetElement(0), c1.GetElement(0));
            var oc1 = Vector128.Create(c0.GetElement(1), c1.GetElement(1));
            var oc2 = Vector128.Create(c0.GetElement(2), c1.GetElement(2));
            var oc3 = Vector128.Create(c0.GetElement(3), c1.GetElement(3));
            return (oc0, oc1, oc2, oc3);
        }
    }

    #endregion
}

#endif
