// generated by template, do not modify manually
#if NET8_0_OR_GREATER
using System.Runtime.Intrinsics.X86;
using System.Runtime.Intrinsics.Arm;

namespace Coplt.Mathematics.Simd;

public static partial class simd_matrix
{
    #region Vector128<float>

    [MethodImpl(256 | 512)]
    public static (Vector128<float> c0, Vector128<float> c1) Transpose2x4To4x2(
        Vector64<float> c0, Vector64<float> c1, Vector64<float> c2, Vector64<float> c3
    )
    {
        if (Sse.IsSupported)
        {
            var a = Vector128.Create(c0, c1);
            var b = Vector128.Create(c2, c3);
            var oc0 = Sse.Shuffle(a, b, 0x88); // a0 a2 b0 b2 => (c0.x, c1.x, c2.x, c3.x)
            var oc1 = Sse.Shuffle(a, b, 0xDD); // a1 a3 b1 b3 => (c0.y, c1.y, c2.y, c3.y)
            return (oc0, oc1);
        }
        {
            var oc0 = Vector128.Create(c0.GetElement(0), c1.GetElement(0), c2.GetElement(0), c3.GetElement(0));
            var oc1 = Vector128.Create(c0.GetElement(1), c1.GetElement(1), c2.GetElement(1), c3.GetElement(1));
            return (oc0, oc1);
        }
    }

    #endregion
    #region Vector256<double>

    [MethodImpl(256 | 512)]
    public static (Vector256<double> c0, Vector256<double> c1) Transpose2x4To4x2(
        Vector128<double> c0, Vector128<double> c1, Vector128<double> c2, Vector128<double> c3
    )
    {
        if (Avx.IsSupported)
        {
            var a = Vector256.Create(c0, c2);
            var b = Vector256.Create(c1, c3);
            var oc0 = Avx.Shuffle(a, b, 0x0); // a0 b0 a2 b2 => (c0.x, c1.x, c2.x, c3.x)
            var oc1 = Avx.Shuffle(a, b, 0xF); // a1 b1 a3 b3 => (c0.y, c1.y, c2.y, c3.y)
            return (oc0, oc1);
        }
        {
            var oc0 = Vector256.Create(c0.GetElement(0), c1.GetElement(0), c2.GetElement(0), c3.GetElement(0));
            var oc1 = Vector256.Create(c0.GetElement(1), c1.GetElement(1), c2.GetElement(1), c3.GetElement(1));
            return (oc0, oc1);
        }
    }

    #endregion
    #region Vector128<int>

    [MethodImpl(256 | 512)]
    public static (Vector128<int> c0, Vector128<int> c1) Transpose2x4To4x2(
        Vector64<int> c0, Vector64<int> c1, Vector64<int> c2, Vector64<int> c3
    )
    {
        if (Sse.IsSupported)
        {
            var ic0 = c0.AsSingle();
            var ic1 = c1.AsSingle();
            var ic2 = c2.AsSingle();
            var ic3 = c3.AsSingle();
            var a = Vector128.Create(ic0, ic1);
            var b = Vector128.Create(ic2, ic3);
            var oc0 = Sse.Shuffle(a, b, 0x88); // a0 a2 b0 b2 => (c0.x, c1.x, c2.x, c3.x)
            var oc1 = Sse.Shuffle(a, b, 0xDD); // a1 a3 b1 b3 => (c0.y, c1.y, c2.y, c3.y)
            return (oc0.AsInt32(), oc1.AsInt32());
        }
        {
            var oc0 = Vector128.Create(c0.GetElement(0), c1.GetElement(0), c2.GetElement(0), c3.GetElement(0));
            var oc1 = Vector128.Create(c0.GetElement(1), c1.GetElement(1), c2.GetElement(1), c3.GetElement(1));
            return (oc0, oc1);
        }
    }

    #endregion
    #region Vector128<uint>

    [MethodImpl(256 | 512)]
    public static (Vector128<uint> c0, Vector128<uint> c1) Transpose2x4To4x2(
        Vector64<uint> c0, Vector64<uint> c1, Vector64<uint> c2, Vector64<uint> c3
    )
    {
        if (Sse.IsSupported)
        {
            var ic0 = c0.AsSingle();
            var ic1 = c1.AsSingle();
            var ic2 = c2.AsSingle();
            var ic3 = c3.AsSingle();
            var a = Vector128.Create(ic0, ic1);
            var b = Vector128.Create(ic2, ic3);
            var oc0 = Sse.Shuffle(a, b, 0x88); // a0 a2 b0 b2 => (c0.x, c1.x, c2.x, c3.x)
            var oc1 = Sse.Shuffle(a, b, 0xDD); // a1 a3 b1 b3 => (c0.y, c1.y, c2.y, c3.y)
            return (oc0.AsUInt32(), oc1.AsUInt32());
        }
        {
            var oc0 = Vector128.Create(c0.GetElement(0), c1.GetElement(0), c2.GetElement(0), c3.GetElement(0));
            var oc1 = Vector128.Create(c0.GetElement(1), c1.GetElement(1), c2.GetElement(1), c3.GetElement(1));
            return (oc0, oc1);
        }
    }

    #endregion
    #region Vector256<long>

    [MethodImpl(256 | 512)]
    public static (Vector256<long> c0, Vector256<long> c1) Transpose2x4To4x2(
        Vector128<long> c0, Vector128<long> c1, Vector128<long> c2, Vector128<long> c3
    )
    {
        if (Avx.IsSupported)
        {
            var ic0 = c0.AsDouble();
            var ic1 = c1.AsDouble();
            var ic2 = c2.AsDouble();
            var ic3 = c3.AsDouble();
            var a = Vector256.Create(ic0, ic2);
            var b = Vector256.Create(ic1, ic3);
            var oc0 = Avx.Shuffle(a, b, 0x0); // a0 b0 a2 b2 => (c0.x, c1.x, c2.x, c3.x)
            var oc1 = Avx.Shuffle(a, b, 0xF); // a1 b1 a3 b3 => (c0.y, c1.y, c2.y, c3.y)
            return (oc0.AsInt64(), oc1.AsInt64());
        }
        {
            var oc0 = Vector256.Create(c0.GetElement(0), c1.GetElement(0), c2.GetElement(0), c3.GetElement(0));
            var oc1 = Vector256.Create(c0.GetElement(1), c1.GetElement(1), c2.GetElement(1), c3.GetElement(1));
            return (oc0, oc1);
        }
    }

    #endregion
    #region Vector256<ulong>

    [MethodImpl(256 | 512)]
    public static (Vector256<ulong> c0, Vector256<ulong> c1) Transpose2x4To4x2(
        Vector128<ulong> c0, Vector128<ulong> c1, Vector128<ulong> c2, Vector128<ulong> c3
    )
    {
        if (Avx.IsSupported)
        {
            var ic0 = c0.AsDouble();
            var ic1 = c1.AsDouble();
            var ic2 = c2.AsDouble();
            var ic3 = c3.AsDouble();
            var a = Vector256.Create(ic0, ic2);
            var b = Vector256.Create(ic1, ic3);
            var oc0 = Avx.Shuffle(a, b, 0x0); // a0 b0 a2 b2 => (c0.x, c1.x, c2.x, c3.x)
            var oc1 = Avx.Shuffle(a, b, 0xF); // a1 b1 a3 b3 => (c0.y, c1.y, c2.y, c3.y)
            return (oc0.AsUInt64(), oc1.AsUInt64());
        }
        {
            var oc0 = Vector256.Create(c0.GetElement(0), c1.GetElement(0), c2.GetElement(0), c3.GetElement(0));
            var oc1 = Vector256.Create(c0.GetElement(1), c1.GetElement(1), c2.GetElement(1), c3.GetElement(1));
            return (oc0, oc1);
        }
    }

    #endregion
}

#endif
