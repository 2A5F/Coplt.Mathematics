// generated by template, do not modify manually

namespace Coplt.Mathematics.Json;

#region float2x2

public class float2x2JsonConverter : JsonConverter<float2x2>
{
    public override float2x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetSingle();
        reader.Read();
        var m01 = reader.GetSingle();
        reader.Read();
        var m10 = reader.GetSingle();
        reader.Read();
        var m11 = reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11);
    }
    public override void Write(Utf8JsonWriter writer, float2x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteEndArray();
    }
}

#endregion // float2x2

#region float2x3

public class float2x3JsonConverter : JsonConverter<float2x3>
{
    public override float2x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetSingle();
        reader.Read();
        var m01 = reader.GetSingle();
        reader.Read();
        var m02 = reader.GetSingle();
        reader.Read();
        var m10 = reader.GetSingle();
        reader.Read();
        var m11 = reader.GetSingle();
        reader.Read();
        var m12 = reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12);
    }
    public override void Write(Utf8JsonWriter writer, float2x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteEndArray();
    }
}

#endregion // float2x3

#region float2x4

public class float2x4JsonConverter : JsonConverter<float2x4>
{
    public override float2x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetSingle();
        reader.Read();
        var m01 = reader.GetSingle();
        reader.Read();
        var m02 = reader.GetSingle();
        reader.Read();
        var m03 = reader.GetSingle();
        reader.Read();
        var m10 = reader.GetSingle();
        reader.Read();
        var m11 = reader.GetSingle();
        reader.Read();
        var m12 = reader.GetSingle();
        reader.Read();
        var m13 = reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13);
    }
    public override void Write(Utf8JsonWriter writer, float2x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteEndArray();
    }
}

#endregion // float2x4

#region float3x2

public class float3x2JsonConverter : JsonConverter<float3x2>
{
    public override float3x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetSingle();
        reader.Read();
        var m01 = reader.GetSingle();
        reader.Read();
        var m10 = reader.GetSingle();
        reader.Read();
        var m11 = reader.GetSingle();
        reader.Read();
        var m20 = reader.GetSingle();
        reader.Read();
        var m21 = reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21);
    }
    public override void Write(Utf8JsonWriter writer, float3x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteEndArray();
    }
}

#endregion // float3x2

#region float3x3

public class float3x3JsonConverter : JsonConverter<float3x3>
{
    public override float3x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetSingle();
        reader.Read();
        var m01 = reader.GetSingle();
        reader.Read();
        var m02 = reader.GetSingle();
        reader.Read();
        var m10 = reader.GetSingle();
        reader.Read();
        var m11 = reader.GetSingle();
        reader.Read();
        var m12 = reader.GetSingle();
        reader.Read();
        var m20 = reader.GetSingle();
        reader.Read();
        var m21 = reader.GetSingle();
        reader.Read();
        var m22 = reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22);
    }
    public override void Write(Utf8JsonWriter writer, float3x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteEndArray();
    }
}

#endregion // float3x3

#region float3x4

public class float3x4JsonConverter : JsonConverter<float3x4>
{
    public override float3x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetSingle();
        reader.Read();
        var m01 = reader.GetSingle();
        reader.Read();
        var m02 = reader.GetSingle();
        reader.Read();
        var m03 = reader.GetSingle();
        reader.Read();
        var m10 = reader.GetSingle();
        reader.Read();
        var m11 = reader.GetSingle();
        reader.Read();
        var m12 = reader.GetSingle();
        reader.Read();
        var m13 = reader.GetSingle();
        reader.Read();
        var m20 = reader.GetSingle();
        reader.Read();
        var m21 = reader.GetSingle();
        reader.Read();
        var m22 = reader.GetSingle();
        reader.Read();
        var m23 = reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23);
    }
    public override void Write(Utf8JsonWriter writer, float3x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m23);
        writer.WriteEndArray();
    }
}

#endregion // float3x4

#region float4x2

public class float4x2JsonConverter : JsonConverter<float4x2>
{
    public override float4x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetSingle();
        reader.Read();
        var m01 = reader.GetSingle();
        reader.Read();
        var m10 = reader.GetSingle();
        reader.Read();
        var m11 = reader.GetSingle();
        reader.Read();
        var m20 = reader.GetSingle();
        reader.Read();
        var m21 = reader.GetSingle();
        reader.Read();
        var m30 = reader.GetSingle();
        reader.Read();
        var m31 = reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21, m30, m31);
    }
    public override void Write(Utf8JsonWriter writer, float4x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteEndArray();
    }
}

#endregion // float4x2

#region float4x3

public class float4x3JsonConverter : JsonConverter<float4x3>
{
    public override float4x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetSingle();
        reader.Read();
        var m01 = reader.GetSingle();
        reader.Read();
        var m02 = reader.GetSingle();
        reader.Read();
        var m10 = reader.GetSingle();
        reader.Read();
        var m11 = reader.GetSingle();
        reader.Read();
        var m12 = reader.GetSingle();
        reader.Read();
        var m20 = reader.GetSingle();
        reader.Read();
        var m21 = reader.GetSingle();
        reader.Read();
        var m22 = reader.GetSingle();
        reader.Read();
        var m30 = reader.GetSingle();
        reader.Read();
        var m31 = reader.GetSingle();
        reader.Read();
        var m32 = reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22, m30, m31, m32);
    }
    public override void Write(Utf8JsonWriter writer, float4x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteNumberValue(value.m32);
        writer.WriteEndArray();
    }
}

#endregion // float4x3

#region float4x4

public class float4x4JsonConverter : JsonConverter<float4x4>
{
    public override float4x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetSingle();
        reader.Read();
        var m01 = reader.GetSingle();
        reader.Read();
        var m02 = reader.GetSingle();
        reader.Read();
        var m03 = reader.GetSingle();
        reader.Read();
        var m10 = reader.GetSingle();
        reader.Read();
        var m11 = reader.GetSingle();
        reader.Read();
        var m12 = reader.GetSingle();
        reader.Read();
        var m13 = reader.GetSingle();
        reader.Read();
        var m20 = reader.GetSingle();
        reader.Read();
        var m21 = reader.GetSingle();
        reader.Read();
        var m22 = reader.GetSingle();
        reader.Read();
        var m23 = reader.GetSingle();
        reader.Read();
        var m30 = reader.GetSingle();
        reader.Read();
        var m31 = reader.GetSingle();
        reader.Read();
        var m32 = reader.GetSingle();
        reader.Read();
        var m33 = reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
    }
    public override void Write(Utf8JsonWriter writer, float4x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m23);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteNumberValue(value.m32);
        writer.WriteNumberValue(value.m33);
        writer.WriteEndArray();
    }
}

#endregion // float4x4

#region double2x2

public class double2x2JsonConverter : JsonConverter<double2x2>
{
    public override double2x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetDouble();
        reader.Read();
        var m01 = reader.GetDouble();
        reader.Read();
        var m10 = reader.GetDouble();
        reader.Read();
        var m11 = reader.GetDouble();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11);
    }
    public override void Write(Utf8JsonWriter writer, double2x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteEndArray();
    }
}

#endregion // double2x2

#region double2x3

public class double2x3JsonConverter : JsonConverter<double2x3>
{
    public override double2x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetDouble();
        reader.Read();
        var m01 = reader.GetDouble();
        reader.Read();
        var m02 = reader.GetDouble();
        reader.Read();
        var m10 = reader.GetDouble();
        reader.Read();
        var m11 = reader.GetDouble();
        reader.Read();
        var m12 = reader.GetDouble();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12);
    }
    public override void Write(Utf8JsonWriter writer, double2x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteEndArray();
    }
}

#endregion // double2x3

#region double2x4

public class double2x4JsonConverter : JsonConverter<double2x4>
{
    public override double2x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetDouble();
        reader.Read();
        var m01 = reader.GetDouble();
        reader.Read();
        var m02 = reader.GetDouble();
        reader.Read();
        var m03 = reader.GetDouble();
        reader.Read();
        var m10 = reader.GetDouble();
        reader.Read();
        var m11 = reader.GetDouble();
        reader.Read();
        var m12 = reader.GetDouble();
        reader.Read();
        var m13 = reader.GetDouble();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13);
    }
    public override void Write(Utf8JsonWriter writer, double2x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteEndArray();
    }
}

#endregion // double2x4

#region double3x2

public class double3x2JsonConverter : JsonConverter<double3x2>
{
    public override double3x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetDouble();
        reader.Read();
        var m01 = reader.GetDouble();
        reader.Read();
        var m10 = reader.GetDouble();
        reader.Read();
        var m11 = reader.GetDouble();
        reader.Read();
        var m20 = reader.GetDouble();
        reader.Read();
        var m21 = reader.GetDouble();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21);
    }
    public override void Write(Utf8JsonWriter writer, double3x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteEndArray();
    }
}

#endregion // double3x2

#region double3x3

public class double3x3JsonConverter : JsonConverter<double3x3>
{
    public override double3x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetDouble();
        reader.Read();
        var m01 = reader.GetDouble();
        reader.Read();
        var m02 = reader.GetDouble();
        reader.Read();
        var m10 = reader.GetDouble();
        reader.Read();
        var m11 = reader.GetDouble();
        reader.Read();
        var m12 = reader.GetDouble();
        reader.Read();
        var m20 = reader.GetDouble();
        reader.Read();
        var m21 = reader.GetDouble();
        reader.Read();
        var m22 = reader.GetDouble();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22);
    }
    public override void Write(Utf8JsonWriter writer, double3x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteEndArray();
    }
}

#endregion // double3x3

#region double3x4

public class double3x4JsonConverter : JsonConverter<double3x4>
{
    public override double3x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetDouble();
        reader.Read();
        var m01 = reader.GetDouble();
        reader.Read();
        var m02 = reader.GetDouble();
        reader.Read();
        var m03 = reader.GetDouble();
        reader.Read();
        var m10 = reader.GetDouble();
        reader.Read();
        var m11 = reader.GetDouble();
        reader.Read();
        var m12 = reader.GetDouble();
        reader.Read();
        var m13 = reader.GetDouble();
        reader.Read();
        var m20 = reader.GetDouble();
        reader.Read();
        var m21 = reader.GetDouble();
        reader.Read();
        var m22 = reader.GetDouble();
        reader.Read();
        var m23 = reader.GetDouble();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23);
    }
    public override void Write(Utf8JsonWriter writer, double3x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m23);
        writer.WriteEndArray();
    }
}

#endregion // double3x4

#region double4x2

public class double4x2JsonConverter : JsonConverter<double4x2>
{
    public override double4x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetDouble();
        reader.Read();
        var m01 = reader.GetDouble();
        reader.Read();
        var m10 = reader.GetDouble();
        reader.Read();
        var m11 = reader.GetDouble();
        reader.Read();
        var m20 = reader.GetDouble();
        reader.Read();
        var m21 = reader.GetDouble();
        reader.Read();
        var m30 = reader.GetDouble();
        reader.Read();
        var m31 = reader.GetDouble();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21, m30, m31);
    }
    public override void Write(Utf8JsonWriter writer, double4x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteEndArray();
    }
}

#endregion // double4x2

#region double4x3

public class double4x3JsonConverter : JsonConverter<double4x3>
{
    public override double4x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetDouble();
        reader.Read();
        var m01 = reader.GetDouble();
        reader.Read();
        var m02 = reader.GetDouble();
        reader.Read();
        var m10 = reader.GetDouble();
        reader.Read();
        var m11 = reader.GetDouble();
        reader.Read();
        var m12 = reader.GetDouble();
        reader.Read();
        var m20 = reader.GetDouble();
        reader.Read();
        var m21 = reader.GetDouble();
        reader.Read();
        var m22 = reader.GetDouble();
        reader.Read();
        var m30 = reader.GetDouble();
        reader.Read();
        var m31 = reader.GetDouble();
        reader.Read();
        var m32 = reader.GetDouble();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22, m30, m31, m32);
    }
    public override void Write(Utf8JsonWriter writer, double4x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteNumberValue(value.m32);
        writer.WriteEndArray();
    }
}

#endregion // double4x3

#region double4x4

public class double4x4JsonConverter : JsonConverter<double4x4>
{
    public override double4x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetDouble();
        reader.Read();
        var m01 = reader.GetDouble();
        reader.Read();
        var m02 = reader.GetDouble();
        reader.Read();
        var m03 = reader.GetDouble();
        reader.Read();
        var m10 = reader.GetDouble();
        reader.Read();
        var m11 = reader.GetDouble();
        reader.Read();
        var m12 = reader.GetDouble();
        reader.Read();
        var m13 = reader.GetDouble();
        reader.Read();
        var m20 = reader.GetDouble();
        reader.Read();
        var m21 = reader.GetDouble();
        reader.Read();
        var m22 = reader.GetDouble();
        reader.Read();
        var m23 = reader.GetDouble();
        reader.Read();
        var m30 = reader.GetDouble();
        reader.Read();
        var m31 = reader.GetDouble();
        reader.Read();
        var m32 = reader.GetDouble();
        reader.Read();
        var m33 = reader.GetDouble();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
    }
    public override void Write(Utf8JsonWriter writer, double4x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m23);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteNumberValue(value.m32);
        writer.WriteNumberValue(value.m33);
        writer.WriteEndArray();
    }
}

#endregion // double4x4

#region short2x2

public class short2x2JsonConverter : JsonConverter<short2x2>
{
    public override short2x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt16();
        reader.Read();
        var m01 = reader.GetInt16();
        reader.Read();
        var m10 = reader.GetInt16();
        reader.Read();
        var m11 = reader.GetInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11);
    }
    public override void Write(Utf8JsonWriter writer, short2x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteEndArray();
    }
}

#endregion // short2x2

#region short2x3

public class short2x3JsonConverter : JsonConverter<short2x3>
{
    public override short2x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt16();
        reader.Read();
        var m01 = reader.GetInt16();
        reader.Read();
        var m02 = reader.GetInt16();
        reader.Read();
        var m10 = reader.GetInt16();
        reader.Read();
        var m11 = reader.GetInt16();
        reader.Read();
        var m12 = reader.GetInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12);
    }
    public override void Write(Utf8JsonWriter writer, short2x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteEndArray();
    }
}

#endregion // short2x3

#region short2x4

public class short2x4JsonConverter : JsonConverter<short2x4>
{
    public override short2x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt16();
        reader.Read();
        var m01 = reader.GetInt16();
        reader.Read();
        var m02 = reader.GetInt16();
        reader.Read();
        var m03 = reader.GetInt16();
        reader.Read();
        var m10 = reader.GetInt16();
        reader.Read();
        var m11 = reader.GetInt16();
        reader.Read();
        var m12 = reader.GetInt16();
        reader.Read();
        var m13 = reader.GetInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13);
    }
    public override void Write(Utf8JsonWriter writer, short2x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteEndArray();
    }
}

#endregion // short2x4

#region short3x2

public class short3x2JsonConverter : JsonConverter<short3x2>
{
    public override short3x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt16();
        reader.Read();
        var m01 = reader.GetInt16();
        reader.Read();
        var m10 = reader.GetInt16();
        reader.Read();
        var m11 = reader.GetInt16();
        reader.Read();
        var m20 = reader.GetInt16();
        reader.Read();
        var m21 = reader.GetInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21);
    }
    public override void Write(Utf8JsonWriter writer, short3x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteEndArray();
    }
}

#endregion // short3x2

#region short3x3

public class short3x3JsonConverter : JsonConverter<short3x3>
{
    public override short3x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt16();
        reader.Read();
        var m01 = reader.GetInt16();
        reader.Read();
        var m02 = reader.GetInt16();
        reader.Read();
        var m10 = reader.GetInt16();
        reader.Read();
        var m11 = reader.GetInt16();
        reader.Read();
        var m12 = reader.GetInt16();
        reader.Read();
        var m20 = reader.GetInt16();
        reader.Read();
        var m21 = reader.GetInt16();
        reader.Read();
        var m22 = reader.GetInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22);
    }
    public override void Write(Utf8JsonWriter writer, short3x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteEndArray();
    }
}

#endregion // short3x3

#region short3x4

public class short3x4JsonConverter : JsonConverter<short3x4>
{
    public override short3x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt16();
        reader.Read();
        var m01 = reader.GetInt16();
        reader.Read();
        var m02 = reader.GetInt16();
        reader.Read();
        var m03 = reader.GetInt16();
        reader.Read();
        var m10 = reader.GetInt16();
        reader.Read();
        var m11 = reader.GetInt16();
        reader.Read();
        var m12 = reader.GetInt16();
        reader.Read();
        var m13 = reader.GetInt16();
        reader.Read();
        var m20 = reader.GetInt16();
        reader.Read();
        var m21 = reader.GetInt16();
        reader.Read();
        var m22 = reader.GetInt16();
        reader.Read();
        var m23 = reader.GetInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23);
    }
    public override void Write(Utf8JsonWriter writer, short3x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m23);
        writer.WriteEndArray();
    }
}

#endregion // short3x4

#region short4x2

public class short4x2JsonConverter : JsonConverter<short4x2>
{
    public override short4x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt16();
        reader.Read();
        var m01 = reader.GetInt16();
        reader.Read();
        var m10 = reader.GetInt16();
        reader.Read();
        var m11 = reader.GetInt16();
        reader.Read();
        var m20 = reader.GetInt16();
        reader.Read();
        var m21 = reader.GetInt16();
        reader.Read();
        var m30 = reader.GetInt16();
        reader.Read();
        var m31 = reader.GetInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21, m30, m31);
    }
    public override void Write(Utf8JsonWriter writer, short4x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteEndArray();
    }
}

#endregion // short4x2

#region short4x3

public class short4x3JsonConverter : JsonConverter<short4x3>
{
    public override short4x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt16();
        reader.Read();
        var m01 = reader.GetInt16();
        reader.Read();
        var m02 = reader.GetInt16();
        reader.Read();
        var m10 = reader.GetInt16();
        reader.Read();
        var m11 = reader.GetInt16();
        reader.Read();
        var m12 = reader.GetInt16();
        reader.Read();
        var m20 = reader.GetInt16();
        reader.Read();
        var m21 = reader.GetInt16();
        reader.Read();
        var m22 = reader.GetInt16();
        reader.Read();
        var m30 = reader.GetInt16();
        reader.Read();
        var m31 = reader.GetInt16();
        reader.Read();
        var m32 = reader.GetInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22, m30, m31, m32);
    }
    public override void Write(Utf8JsonWriter writer, short4x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteNumberValue(value.m32);
        writer.WriteEndArray();
    }
}

#endregion // short4x3

#region short4x4

public class short4x4JsonConverter : JsonConverter<short4x4>
{
    public override short4x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt16();
        reader.Read();
        var m01 = reader.GetInt16();
        reader.Read();
        var m02 = reader.GetInt16();
        reader.Read();
        var m03 = reader.GetInt16();
        reader.Read();
        var m10 = reader.GetInt16();
        reader.Read();
        var m11 = reader.GetInt16();
        reader.Read();
        var m12 = reader.GetInt16();
        reader.Read();
        var m13 = reader.GetInt16();
        reader.Read();
        var m20 = reader.GetInt16();
        reader.Read();
        var m21 = reader.GetInt16();
        reader.Read();
        var m22 = reader.GetInt16();
        reader.Read();
        var m23 = reader.GetInt16();
        reader.Read();
        var m30 = reader.GetInt16();
        reader.Read();
        var m31 = reader.GetInt16();
        reader.Read();
        var m32 = reader.GetInt16();
        reader.Read();
        var m33 = reader.GetInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
    }
    public override void Write(Utf8JsonWriter writer, short4x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m23);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteNumberValue(value.m32);
        writer.WriteNumberValue(value.m33);
        writer.WriteEndArray();
    }
}

#endregion // short4x4

#region ushort2x2

public class ushort2x2JsonConverter : JsonConverter<ushort2x2>
{
    public override ushort2x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt16();
        reader.Read();
        var m01 = reader.GetUInt16();
        reader.Read();
        var m10 = reader.GetUInt16();
        reader.Read();
        var m11 = reader.GetUInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11);
    }
    public override void Write(Utf8JsonWriter writer, ushort2x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteEndArray();
    }
}

#endregion // ushort2x2

#region ushort2x3

public class ushort2x3JsonConverter : JsonConverter<ushort2x3>
{
    public override ushort2x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt16();
        reader.Read();
        var m01 = reader.GetUInt16();
        reader.Read();
        var m02 = reader.GetUInt16();
        reader.Read();
        var m10 = reader.GetUInt16();
        reader.Read();
        var m11 = reader.GetUInt16();
        reader.Read();
        var m12 = reader.GetUInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12);
    }
    public override void Write(Utf8JsonWriter writer, ushort2x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteEndArray();
    }
}

#endregion // ushort2x3

#region ushort2x4

public class ushort2x4JsonConverter : JsonConverter<ushort2x4>
{
    public override ushort2x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt16();
        reader.Read();
        var m01 = reader.GetUInt16();
        reader.Read();
        var m02 = reader.GetUInt16();
        reader.Read();
        var m03 = reader.GetUInt16();
        reader.Read();
        var m10 = reader.GetUInt16();
        reader.Read();
        var m11 = reader.GetUInt16();
        reader.Read();
        var m12 = reader.GetUInt16();
        reader.Read();
        var m13 = reader.GetUInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13);
    }
    public override void Write(Utf8JsonWriter writer, ushort2x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteEndArray();
    }
}

#endregion // ushort2x4

#region ushort3x2

public class ushort3x2JsonConverter : JsonConverter<ushort3x2>
{
    public override ushort3x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt16();
        reader.Read();
        var m01 = reader.GetUInt16();
        reader.Read();
        var m10 = reader.GetUInt16();
        reader.Read();
        var m11 = reader.GetUInt16();
        reader.Read();
        var m20 = reader.GetUInt16();
        reader.Read();
        var m21 = reader.GetUInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21);
    }
    public override void Write(Utf8JsonWriter writer, ushort3x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteEndArray();
    }
}

#endregion // ushort3x2

#region ushort3x3

public class ushort3x3JsonConverter : JsonConverter<ushort3x3>
{
    public override ushort3x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt16();
        reader.Read();
        var m01 = reader.GetUInt16();
        reader.Read();
        var m02 = reader.GetUInt16();
        reader.Read();
        var m10 = reader.GetUInt16();
        reader.Read();
        var m11 = reader.GetUInt16();
        reader.Read();
        var m12 = reader.GetUInt16();
        reader.Read();
        var m20 = reader.GetUInt16();
        reader.Read();
        var m21 = reader.GetUInt16();
        reader.Read();
        var m22 = reader.GetUInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22);
    }
    public override void Write(Utf8JsonWriter writer, ushort3x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteEndArray();
    }
}

#endregion // ushort3x3

#region ushort3x4

public class ushort3x4JsonConverter : JsonConverter<ushort3x4>
{
    public override ushort3x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt16();
        reader.Read();
        var m01 = reader.GetUInt16();
        reader.Read();
        var m02 = reader.GetUInt16();
        reader.Read();
        var m03 = reader.GetUInt16();
        reader.Read();
        var m10 = reader.GetUInt16();
        reader.Read();
        var m11 = reader.GetUInt16();
        reader.Read();
        var m12 = reader.GetUInt16();
        reader.Read();
        var m13 = reader.GetUInt16();
        reader.Read();
        var m20 = reader.GetUInt16();
        reader.Read();
        var m21 = reader.GetUInt16();
        reader.Read();
        var m22 = reader.GetUInt16();
        reader.Read();
        var m23 = reader.GetUInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23);
    }
    public override void Write(Utf8JsonWriter writer, ushort3x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m23);
        writer.WriteEndArray();
    }
}

#endregion // ushort3x4

#region ushort4x2

public class ushort4x2JsonConverter : JsonConverter<ushort4x2>
{
    public override ushort4x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt16();
        reader.Read();
        var m01 = reader.GetUInt16();
        reader.Read();
        var m10 = reader.GetUInt16();
        reader.Read();
        var m11 = reader.GetUInt16();
        reader.Read();
        var m20 = reader.GetUInt16();
        reader.Read();
        var m21 = reader.GetUInt16();
        reader.Read();
        var m30 = reader.GetUInt16();
        reader.Read();
        var m31 = reader.GetUInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21, m30, m31);
    }
    public override void Write(Utf8JsonWriter writer, ushort4x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteEndArray();
    }
}

#endregion // ushort4x2

#region ushort4x3

public class ushort4x3JsonConverter : JsonConverter<ushort4x3>
{
    public override ushort4x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt16();
        reader.Read();
        var m01 = reader.GetUInt16();
        reader.Read();
        var m02 = reader.GetUInt16();
        reader.Read();
        var m10 = reader.GetUInt16();
        reader.Read();
        var m11 = reader.GetUInt16();
        reader.Read();
        var m12 = reader.GetUInt16();
        reader.Read();
        var m20 = reader.GetUInt16();
        reader.Read();
        var m21 = reader.GetUInt16();
        reader.Read();
        var m22 = reader.GetUInt16();
        reader.Read();
        var m30 = reader.GetUInt16();
        reader.Read();
        var m31 = reader.GetUInt16();
        reader.Read();
        var m32 = reader.GetUInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22, m30, m31, m32);
    }
    public override void Write(Utf8JsonWriter writer, ushort4x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteNumberValue(value.m32);
        writer.WriteEndArray();
    }
}

#endregion // ushort4x3

#region ushort4x4

public class ushort4x4JsonConverter : JsonConverter<ushort4x4>
{
    public override ushort4x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt16();
        reader.Read();
        var m01 = reader.GetUInt16();
        reader.Read();
        var m02 = reader.GetUInt16();
        reader.Read();
        var m03 = reader.GetUInt16();
        reader.Read();
        var m10 = reader.GetUInt16();
        reader.Read();
        var m11 = reader.GetUInt16();
        reader.Read();
        var m12 = reader.GetUInt16();
        reader.Read();
        var m13 = reader.GetUInt16();
        reader.Read();
        var m20 = reader.GetUInt16();
        reader.Read();
        var m21 = reader.GetUInt16();
        reader.Read();
        var m22 = reader.GetUInt16();
        reader.Read();
        var m23 = reader.GetUInt16();
        reader.Read();
        var m30 = reader.GetUInt16();
        reader.Read();
        var m31 = reader.GetUInt16();
        reader.Read();
        var m32 = reader.GetUInt16();
        reader.Read();
        var m33 = reader.GetUInt16();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
    }
    public override void Write(Utf8JsonWriter writer, ushort4x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m23);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteNumberValue(value.m32);
        writer.WriteNumberValue(value.m33);
        writer.WriteEndArray();
    }
}

#endregion // ushort4x4

#region int2x2

public class int2x2JsonConverter : JsonConverter<int2x2>
{
    public override int2x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt32();
        reader.Read();
        var m01 = reader.GetInt32();
        reader.Read();
        var m10 = reader.GetInt32();
        reader.Read();
        var m11 = reader.GetInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11);
    }
    public override void Write(Utf8JsonWriter writer, int2x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteEndArray();
    }
}

#endregion // int2x2

#region int2x3

public class int2x3JsonConverter : JsonConverter<int2x3>
{
    public override int2x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt32();
        reader.Read();
        var m01 = reader.GetInt32();
        reader.Read();
        var m02 = reader.GetInt32();
        reader.Read();
        var m10 = reader.GetInt32();
        reader.Read();
        var m11 = reader.GetInt32();
        reader.Read();
        var m12 = reader.GetInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12);
    }
    public override void Write(Utf8JsonWriter writer, int2x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteEndArray();
    }
}

#endregion // int2x3

#region int2x4

public class int2x4JsonConverter : JsonConverter<int2x4>
{
    public override int2x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt32();
        reader.Read();
        var m01 = reader.GetInt32();
        reader.Read();
        var m02 = reader.GetInt32();
        reader.Read();
        var m03 = reader.GetInt32();
        reader.Read();
        var m10 = reader.GetInt32();
        reader.Read();
        var m11 = reader.GetInt32();
        reader.Read();
        var m12 = reader.GetInt32();
        reader.Read();
        var m13 = reader.GetInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13);
    }
    public override void Write(Utf8JsonWriter writer, int2x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteEndArray();
    }
}

#endregion // int2x4

#region int3x2

public class int3x2JsonConverter : JsonConverter<int3x2>
{
    public override int3x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt32();
        reader.Read();
        var m01 = reader.GetInt32();
        reader.Read();
        var m10 = reader.GetInt32();
        reader.Read();
        var m11 = reader.GetInt32();
        reader.Read();
        var m20 = reader.GetInt32();
        reader.Read();
        var m21 = reader.GetInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21);
    }
    public override void Write(Utf8JsonWriter writer, int3x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteEndArray();
    }
}

#endregion // int3x2

#region int3x3

public class int3x3JsonConverter : JsonConverter<int3x3>
{
    public override int3x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt32();
        reader.Read();
        var m01 = reader.GetInt32();
        reader.Read();
        var m02 = reader.GetInt32();
        reader.Read();
        var m10 = reader.GetInt32();
        reader.Read();
        var m11 = reader.GetInt32();
        reader.Read();
        var m12 = reader.GetInt32();
        reader.Read();
        var m20 = reader.GetInt32();
        reader.Read();
        var m21 = reader.GetInt32();
        reader.Read();
        var m22 = reader.GetInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22);
    }
    public override void Write(Utf8JsonWriter writer, int3x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteEndArray();
    }
}

#endregion // int3x3

#region int3x4

public class int3x4JsonConverter : JsonConverter<int3x4>
{
    public override int3x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt32();
        reader.Read();
        var m01 = reader.GetInt32();
        reader.Read();
        var m02 = reader.GetInt32();
        reader.Read();
        var m03 = reader.GetInt32();
        reader.Read();
        var m10 = reader.GetInt32();
        reader.Read();
        var m11 = reader.GetInt32();
        reader.Read();
        var m12 = reader.GetInt32();
        reader.Read();
        var m13 = reader.GetInt32();
        reader.Read();
        var m20 = reader.GetInt32();
        reader.Read();
        var m21 = reader.GetInt32();
        reader.Read();
        var m22 = reader.GetInt32();
        reader.Read();
        var m23 = reader.GetInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23);
    }
    public override void Write(Utf8JsonWriter writer, int3x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m23);
        writer.WriteEndArray();
    }
}

#endregion // int3x4

#region int4x2

public class int4x2JsonConverter : JsonConverter<int4x2>
{
    public override int4x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt32();
        reader.Read();
        var m01 = reader.GetInt32();
        reader.Read();
        var m10 = reader.GetInt32();
        reader.Read();
        var m11 = reader.GetInt32();
        reader.Read();
        var m20 = reader.GetInt32();
        reader.Read();
        var m21 = reader.GetInt32();
        reader.Read();
        var m30 = reader.GetInt32();
        reader.Read();
        var m31 = reader.GetInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21, m30, m31);
    }
    public override void Write(Utf8JsonWriter writer, int4x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteEndArray();
    }
}

#endregion // int4x2

#region int4x3

public class int4x3JsonConverter : JsonConverter<int4x3>
{
    public override int4x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt32();
        reader.Read();
        var m01 = reader.GetInt32();
        reader.Read();
        var m02 = reader.GetInt32();
        reader.Read();
        var m10 = reader.GetInt32();
        reader.Read();
        var m11 = reader.GetInt32();
        reader.Read();
        var m12 = reader.GetInt32();
        reader.Read();
        var m20 = reader.GetInt32();
        reader.Read();
        var m21 = reader.GetInt32();
        reader.Read();
        var m22 = reader.GetInt32();
        reader.Read();
        var m30 = reader.GetInt32();
        reader.Read();
        var m31 = reader.GetInt32();
        reader.Read();
        var m32 = reader.GetInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22, m30, m31, m32);
    }
    public override void Write(Utf8JsonWriter writer, int4x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteNumberValue(value.m32);
        writer.WriteEndArray();
    }
}

#endregion // int4x3

#region int4x4

public class int4x4JsonConverter : JsonConverter<int4x4>
{
    public override int4x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt32();
        reader.Read();
        var m01 = reader.GetInt32();
        reader.Read();
        var m02 = reader.GetInt32();
        reader.Read();
        var m03 = reader.GetInt32();
        reader.Read();
        var m10 = reader.GetInt32();
        reader.Read();
        var m11 = reader.GetInt32();
        reader.Read();
        var m12 = reader.GetInt32();
        reader.Read();
        var m13 = reader.GetInt32();
        reader.Read();
        var m20 = reader.GetInt32();
        reader.Read();
        var m21 = reader.GetInt32();
        reader.Read();
        var m22 = reader.GetInt32();
        reader.Read();
        var m23 = reader.GetInt32();
        reader.Read();
        var m30 = reader.GetInt32();
        reader.Read();
        var m31 = reader.GetInt32();
        reader.Read();
        var m32 = reader.GetInt32();
        reader.Read();
        var m33 = reader.GetInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
    }
    public override void Write(Utf8JsonWriter writer, int4x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m23);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteNumberValue(value.m32);
        writer.WriteNumberValue(value.m33);
        writer.WriteEndArray();
    }
}

#endregion // int4x4

#region uint2x2

public class uint2x2JsonConverter : JsonConverter<uint2x2>
{
    public override uint2x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt32();
        reader.Read();
        var m01 = reader.GetUInt32();
        reader.Read();
        var m10 = reader.GetUInt32();
        reader.Read();
        var m11 = reader.GetUInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11);
    }
    public override void Write(Utf8JsonWriter writer, uint2x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteEndArray();
    }
}

#endregion // uint2x2

#region uint2x3

public class uint2x3JsonConverter : JsonConverter<uint2x3>
{
    public override uint2x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt32();
        reader.Read();
        var m01 = reader.GetUInt32();
        reader.Read();
        var m02 = reader.GetUInt32();
        reader.Read();
        var m10 = reader.GetUInt32();
        reader.Read();
        var m11 = reader.GetUInt32();
        reader.Read();
        var m12 = reader.GetUInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12);
    }
    public override void Write(Utf8JsonWriter writer, uint2x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteEndArray();
    }
}

#endregion // uint2x3

#region uint2x4

public class uint2x4JsonConverter : JsonConverter<uint2x4>
{
    public override uint2x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt32();
        reader.Read();
        var m01 = reader.GetUInt32();
        reader.Read();
        var m02 = reader.GetUInt32();
        reader.Read();
        var m03 = reader.GetUInt32();
        reader.Read();
        var m10 = reader.GetUInt32();
        reader.Read();
        var m11 = reader.GetUInt32();
        reader.Read();
        var m12 = reader.GetUInt32();
        reader.Read();
        var m13 = reader.GetUInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13);
    }
    public override void Write(Utf8JsonWriter writer, uint2x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteEndArray();
    }
}

#endregion // uint2x4

#region uint3x2

public class uint3x2JsonConverter : JsonConverter<uint3x2>
{
    public override uint3x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt32();
        reader.Read();
        var m01 = reader.GetUInt32();
        reader.Read();
        var m10 = reader.GetUInt32();
        reader.Read();
        var m11 = reader.GetUInt32();
        reader.Read();
        var m20 = reader.GetUInt32();
        reader.Read();
        var m21 = reader.GetUInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21);
    }
    public override void Write(Utf8JsonWriter writer, uint3x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteEndArray();
    }
}

#endregion // uint3x2

#region uint3x3

public class uint3x3JsonConverter : JsonConverter<uint3x3>
{
    public override uint3x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt32();
        reader.Read();
        var m01 = reader.GetUInt32();
        reader.Read();
        var m02 = reader.GetUInt32();
        reader.Read();
        var m10 = reader.GetUInt32();
        reader.Read();
        var m11 = reader.GetUInt32();
        reader.Read();
        var m12 = reader.GetUInt32();
        reader.Read();
        var m20 = reader.GetUInt32();
        reader.Read();
        var m21 = reader.GetUInt32();
        reader.Read();
        var m22 = reader.GetUInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22);
    }
    public override void Write(Utf8JsonWriter writer, uint3x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteEndArray();
    }
}

#endregion // uint3x3

#region uint3x4

public class uint3x4JsonConverter : JsonConverter<uint3x4>
{
    public override uint3x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt32();
        reader.Read();
        var m01 = reader.GetUInt32();
        reader.Read();
        var m02 = reader.GetUInt32();
        reader.Read();
        var m03 = reader.GetUInt32();
        reader.Read();
        var m10 = reader.GetUInt32();
        reader.Read();
        var m11 = reader.GetUInt32();
        reader.Read();
        var m12 = reader.GetUInt32();
        reader.Read();
        var m13 = reader.GetUInt32();
        reader.Read();
        var m20 = reader.GetUInt32();
        reader.Read();
        var m21 = reader.GetUInt32();
        reader.Read();
        var m22 = reader.GetUInt32();
        reader.Read();
        var m23 = reader.GetUInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23);
    }
    public override void Write(Utf8JsonWriter writer, uint3x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m23);
        writer.WriteEndArray();
    }
}

#endregion // uint3x4

#region uint4x2

public class uint4x2JsonConverter : JsonConverter<uint4x2>
{
    public override uint4x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt32();
        reader.Read();
        var m01 = reader.GetUInt32();
        reader.Read();
        var m10 = reader.GetUInt32();
        reader.Read();
        var m11 = reader.GetUInt32();
        reader.Read();
        var m20 = reader.GetUInt32();
        reader.Read();
        var m21 = reader.GetUInt32();
        reader.Read();
        var m30 = reader.GetUInt32();
        reader.Read();
        var m31 = reader.GetUInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21, m30, m31);
    }
    public override void Write(Utf8JsonWriter writer, uint4x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteEndArray();
    }
}

#endregion // uint4x2

#region uint4x3

public class uint4x3JsonConverter : JsonConverter<uint4x3>
{
    public override uint4x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt32();
        reader.Read();
        var m01 = reader.GetUInt32();
        reader.Read();
        var m02 = reader.GetUInt32();
        reader.Read();
        var m10 = reader.GetUInt32();
        reader.Read();
        var m11 = reader.GetUInt32();
        reader.Read();
        var m12 = reader.GetUInt32();
        reader.Read();
        var m20 = reader.GetUInt32();
        reader.Read();
        var m21 = reader.GetUInt32();
        reader.Read();
        var m22 = reader.GetUInt32();
        reader.Read();
        var m30 = reader.GetUInt32();
        reader.Read();
        var m31 = reader.GetUInt32();
        reader.Read();
        var m32 = reader.GetUInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22, m30, m31, m32);
    }
    public override void Write(Utf8JsonWriter writer, uint4x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteNumberValue(value.m32);
        writer.WriteEndArray();
    }
}

#endregion // uint4x3

#region uint4x4

public class uint4x4JsonConverter : JsonConverter<uint4x4>
{
    public override uint4x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt32();
        reader.Read();
        var m01 = reader.GetUInt32();
        reader.Read();
        var m02 = reader.GetUInt32();
        reader.Read();
        var m03 = reader.GetUInt32();
        reader.Read();
        var m10 = reader.GetUInt32();
        reader.Read();
        var m11 = reader.GetUInt32();
        reader.Read();
        var m12 = reader.GetUInt32();
        reader.Read();
        var m13 = reader.GetUInt32();
        reader.Read();
        var m20 = reader.GetUInt32();
        reader.Read();
        var m21 = reader.GetUInt32();
        reader.Read();
        var m22 = reader.GetUInt32();
        reader.Read();
        var m23 = reader.GetUInt32();
        reader.Read();
        var m30 = reader.GetUInt32();
        reader.Read();
        var m31 = reader.GetUInt32();
        reader.Read();
        var m32 = reader.GetUInt32();
        reader.Read();
        var m33 = reader.GetUInt32();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
    }
    public override void Write(Utf8JsonWriter writer, uint4x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m23);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteNumberValue(value.m32);
        writer.WriteNumberValue(value.m33);
        writer.WriteEndArray();
    }
}

#endregion // uint4x4

#region long2x2

public class long2x2JsonConverter : JsonConverter<long2x2>
{
    public override long2x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt64();
        reader.Read();
        var m01 = reader.GetInt64();
        reader.Read();
        var m10 = reader.GetInt64();
        reader.Read();
        var m11 = reader.GetInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11);
    }
    public override void Write(Utf8JsonWriter writer, long2x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteEndArray();
    }
}

#endregion // long2x2

#region long2x3

public class long2x3JsonConverter : JsonConverter<long2x3>
{
    public override long2x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt64();
        reader.Read();
        var m01 = reader.GetInt64();
        reader.Read();
        var m02 = reader.GetInt64();
        reader.Read();
        var m10 = reader.GetInt64();
        reader.Read();
        var m11 = reader.GetInt64();
        reader.Read();
        var m12 = reader.GetInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12);
    }
    public override void Write(Utf8JsonWriter writer, long2x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteEndArray();
    }
}

#endregion // long2x3

#region long2x4

public class long2x4JsonConverter : JsonConverter<long2x4>
{
    public override long2x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt64();
        reader.Read();
        var m01 = reader.GetInt64();
        reader.Read();
        var m02 = reader.GetInt64();
        reader.Read();
        var m03 = reader.GetInt64();
        reader.Read();
        var m10 = reader.GetInt64();
        reader.Read();
        var m11 = reader.GetInt64();
        reader.Read();
        var m12 = reader.GetInt64();
        reader.Read();
        var m13 = reader.GetInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13);
    }
    public override void Write(Utf8JsonWriter writer, long2x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteEndArray();
    }
}

#endregion // long2x4

#region long3x2

public class long3x2JsonConverter : JsonConverter<long3x2>
{
    public override long3x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt64();
        reader.Read();
        var m01 = reader.GetInt64();
        reader.Read();
        var m10 = reader.GetInt64();
        reader.Read();
        var m11 = reader.GetInt64();
        reader.Read();
        var m20 = reader.GetInt64();
        reader.Read();
        var m21 = reader.GetInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21);
    }
    public override void Write(Utf8JsonWriter writer, long3x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteEndArray();
    }
}

#endregion // long3x2

#region long3x3

public class long3x3JsonConverter : JsonConverter<long3x3>
{
    public override long3x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt64();
        reader.Read();
        var m01 = reader.GetInt64();
        reader.Read();
        var m02 = reader.GetInt64();
        reader.Read();
        var m10 = reader.GetInt64();
        reader.Read();
        var m11 = reader.GetInt64();
        reader.Read();
        var m12 = reader.GetInt64();
        reader.Read();
        var m20 = reader.GetInt64();
        reader.Read();
        var m21 = reader.GetInt64();
        reader.Read();
        var m22 = reader.GetInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22);
    }
    public override void Write(Utf8JsonWriter writer, long3x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteEndArray();
    }
}

#endregion // long3x3

#region long3x4

public class long3x4JsonConverter : JsonConverter<long3x4>
{
    public override long3x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt64();
        reader.Read();
        var m01 = reader.GetInt64();
        reader.Read();
        var m02 = reader.GetInt64();
        reader.Read();
        var m03 = reader.GetInt64();
        reader.Read();
        var m10 = reader.GetInt64();
        reader.Read();
        var m11 = reader.GetInt64();
        reader.Read();
        var m12 = reader.GetInt64();
        reader.Read();
        var m13 = reader.GetInt64();
        reader.Read();
        var m20 = reader.GetInt64();
        reader.Read();
        var m21 = reader.GetInt64();
        reader.Read();
        var m22 = reader.GetInt64();
        reader.Read();
        var m23 = reader.GetInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23);
    }
    public override void Write(Utf8JsonWriter writer, long3x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m23);
        writer.WriteEndArray();
    }
}

#endregion // long3x4

#region long4x2

public class long4x2JsonConverter : JsonConverter<long4x2>
{
    public override long4x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt64();
        reader.Read();
        var m01 = reader.GetInt64();
        reader.Read();
        var m10 = reader.GetInt64();
        reader.Read();
        var m11 = reader.GetInt64();
        reader.Read();
        var m20 = reader.GetInt64();
        reader.Read();
        var m21 = reader.GetInt64();
        reader.Read();
        var m30 = reader.GetInt64();
        reader.Read();
        var m31 = reader.GetInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21, m30, m31);
    }
    public override void Write(Utf8JsonWriter writer, long4x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteEndArray();
    }
}

#endregion // long4x2

#region long4x3

public class long4x3JsonConverter : JsonConverter<long4x3>
{
    public override long4x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt64();
        reader.Read();
        var m01 = reader.GetInt64();
        reader.Read();
        var m02 = reader.GetInt64();
        reader.Read();
        var m10 = reader.GetInt64();
        reader.Read();
        var m11 = reader.GetInt64();
        reader.Read();
        var m12 = reader.GetInt64();
        reader.Read();
        var m20 = reader.GetInt64();
        reader.Read();
        var m21 = reader.GetInt64();
        reader.Read();
        var m22 = reader.GetInt64();
        reader.Read();
        var m30 = reader.GetInt64();
        reader.Read();
        var m31 = reader.GetInt64();
        reader.Read();
        var m32 = reader.GetInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22, m30, m31, m32);
    }
    public override void Write(Utf8JsonWriter writer, long4x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteNumberValue(value.m32);
        writer.WriteEndArray();
    }
}

#endregion // long4x3

#region long4x4

public class long4x4JsonConverter : JsonConverter<long4x4>
{
    public override long4x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetInt64();
        reader.Read();
        var m01 = reader.GetInt64();
        reader.Read();
        var m02 = reader.GetInt64();
        reader.Read();
        var m03 = reader.GetInt64();
        reader.Read();
        var m10 = reader.GetInt64();
        reader.Read();
        var m11 = reader.GetInt64();
        reader.Read();
        var m12 = reader.GetInt64();
        reader.Read();
        var m13 = reader.GetInt64();
        reader.Read();
        var m20 = reader.GetInt64();
        reader.Read();
        var m21 = reader.GetInt64();
        reader.Read();
        var m22 = reader.GetInt64();
        reader.Read();
        var m23 = reader.GetInt64();
        reader.Read();
        var m30 = reader.GetInt64();
        reader.Read();
        var m31 = reader.GetInt64();
        reader.Read();
        var m32 = reader.GetInt64();
        reader.Read();
        var m33 = reader.GetInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
    }
    public override void Write(Utf8JsonWriter writer, long4x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m23);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteNumberValue(value.m32);
        writer.WriteNumberValue(value.m33);
        writer.WriteEndArray();
    }
}

#endregion // long4x4

#region ulong2x2

public class ulong2x2JsonConverter : JsonConverter<ulong2x2>
{
    public override ulong2x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt64();
        reader.Read();
        var m01 = reader.GetUInt64();
        reader.Read();
        var m10 = reader.GetUInt64();
        reader.Read();
        var m11 = reader.GetUInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11);
    }
    public override void Write(Utf8JsonWriter writer, ulong2x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteEndArray();
    }
}

#endregion // ulong2x2

#region ulong2x3

public class ulong2x3JsonConverter : JsonConverter<ulong2x3>
{
    public override ulong2x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt64();
        reader.Read();
        var m01 = reader.GetUInt64();
        reader.Read();
        var m02 = reader.GetUInt64();
        reader.Read();
        var m10 = reader.GetUInt64();
        reader.Read();
        var m11 = reader.GetUInt64();
        reader.Read();
        var m12 = reader.GetUInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12);
    }
    public override void Write(Utf8JsonWriter writer, ulong2x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteEndArray();
    }
}

#endregion // ulong2x3

#region ulong2x4

public class ulong2x4JsonConverter : JsonConverter<ulong2x4>
{
    public override ulong2x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt64();
        reader.Read();
        var m01 = reader.GetUInt64();
        reader.Read();
        var m02 = reader.GetUInt64();
        reader.Read();
        var m03 = reader.GetUInt64();
        reader.Read();
        var m10 = reader.GetUInt64();
        reader.Read();
        var m11 = reader.GetUInt64();
        reader.Read();
        var m12 = reader.GetUInt64();
        reader.Read();
        var m13 = reader.GetUInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13);
    }
    public override void Write(Utf8JsonWriter writer, ulong2x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteEndArray();
    }
}

#endregion // ulong2x4

#region ulong3x2

public class ulong3x2JsonConverter : JsonConverter<ulong3x2>
{
    public override ulong3x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt64();
        reader.Read();
        var m01 = reader.GetUInt64();
        reader.Read();
        var m10 = reader.GetUInt64();
        reader.Read();
        var m11 = reader.GetUInt64();
        reader.Read();
        var m20 = reader.GetUInt64();
        reader.Read();
        var m21 = reader.GetUInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21);
    }
    public override void Write(Utf8JsonWriter writer, ulong3x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteEndArray();
    }
}

#endregion // ulong3x2

#region ulong3x3

public class ulong3x3JsonConverter : JsonConverter<ulong3x3>
{
    public override ulong3x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt64();
        reader.Read();
        var m01 = reader.GetUInt64();
        reader.Read();
        var m02 = reader.GetUInt64();
        reader.Read();
        var m10 = reader.GetUInt64();
        reader.Read();
        var m11 = reader.GetUInt64();
        reader.Read();
        var m12 = reader.GetUInt64();
        reader.Read();
        var m20 = reader.GetUInt64();
        reader.Read();
        var m21 = reader.GetUInt64();
        reader.Read();
        var m22 = reader.GetUInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22);
    }
    public override void Write(Utf8JsonWriter writer, ulong3x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteEndArray();
    }
}

#endregion // ulong3x3

#region ulong3x4

public class ulong3x4JsonConverter : JsonConverter<ulong3x4>
{
    public override ulong3x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt64();
        reader.Read();
        var m01 = reader.GetUInt64();
        reader.Read();
        var m02 = reader.GetUInt64();
        reader.Read();
        var m03 = reader.GetUInt64();
        reader.Read();
        var m10 = reader.GetUInt64();
        reader.Read();
        var m11 = reader.GetUInt64();
        reader.Read();
        var m12 = reader.GetUInt64();
        reader.Read();
        var m13 = reader.GetUInt64();
        reader.Read();
        var m20 = reader.GetUInt64();
        reader.Read();
        var m21 = reader.GetUInt64();
        reader.Read();
        var m22 = reader.GetUInt64();
        reader.Read();
        var m23 = reader.GetUInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23);
    }
    public override void Write(Utf8JsonWriter writer, ulong3x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m23);
        writer.WriteEndArray();
    }
}

#endregion // ulong3x4

#region ulong4x2

public class ulong4x2JsonConverter : JsonConverter<ulong4x2>
{
    public override ulong4x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt64();
        reader.Read();
        var m01 = reader.GetUInt64();
        reader.Read();
        var m10 = reader.GetUInt64();
        reader.Read();
        var m11 = reader.GetUInt64();
        reader.Read();
        var m20 = reader.GetUInt64();
        reader.Read();
        var m21 = reader.GetUInt64();
        reader.Read();
        var m30 = reader.GetUInt64();
        reader.Read();
        var m31 = reader.GetUInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21, m30, m31);
    }
    public override void Write(Utf8JsonWriter writer, ulong4x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteEndArray();
    }
}

#endregion // ulong4x2

#region ulong4x3

public class ulong4x3JsonConverter : JsonConverter<ulong4x3>
{
    public override ulong4x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt64();
        reader.Read();
        var m01 = reader.GetUInt64();
        reader.Read();
        var m02 = reader.GetUInt64();
        reader.Read();
        var m10 = reader.GetUInt64();
        reader.Read();
        var m11 = reader.GetUInt64();
        reader.Read();
        var m12 = reader.GetUInt64();
        reader.Read();
        var m20 = reader.GetUInt64();
        reader.Read();
        var m21 = reader.GetUInt64();
        reader.Read();
        var m22 = reader.GetUInt64();
        reader.Read();
        var m30 = reader.GetUInt64();
        reader.Read();
        var m31 = reader.GetUInt64();
        reader.Read();
        var m32 = reader.GetUInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22, m30, m31, m32);
    }
    public override void Write(Utf8JsonWriter writer, ulong4x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteNumberValue(value.m32);
        writer.WriteEndArray();
    }
}

#endregion // ulong4x3

#region ulong4x4

public class ulong4x4JsonConverter : JsonConverter<ulong4x4>
{
    public override ulong4x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetUInt64();
        reader.Read();
        var m01 = reader.GetUInt64();
        reader.Read();
        var m02 = reader.GetUInt64();
        reader.Read();
        var m03 = reader.GetUInt64();
        reader.Read();
        var m10 = reader.GetUInt64();
        reader.Read();
        var m11 = reader.GetUInt64();
        reader.Read();
        var m12 = reader.GetUInt64();
        reader.Read();
        var m13 = reader.GetUInt64();
        reader.Read();
        var m20 = reader.GetUInt64();
        reader.Read();
        var m21 = reader.GetUInt64();
        reader.Read();
        var m22 = reader.GetUInt64();
        reader.Read();
        var m23 = reader.GetUInt64();
        reader.Read();
        var m30 = reader.GetUInt64();
        reader.Read();
        var m31 = reader.GetUInt64();
        reader.Read();
        var m32 = reader.GetUInt64();
        reader.Read();
        var m33 = reader.GetUInt64();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
    }
    public override void Write(Utf8JsonWriter writer, ulong4x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m23);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteNumberValue(value.m32);
        writer.WriteNumberValue(value.m33);
        writer.WriteEndArray();
    }
}

#endregion // ulong4x4

#region decimal2x2

public class decimal2x2JsonConverter : JsonConverter<decimal2x2>
{
    public override decimal2x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetDecimal();
        reader.Read();
        var m01 = reader.GetDecimal();
        reader.Read();
        var m10 = reader.GetDecimal();
        reader.Read();
        var m11 = reader.GetDecimal();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11);
    }
    public override void Write(Utf8JsonWriter writer, decimal2x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteEndArray();
    }
}

#endregion // decimal2x2

#region decimal2x3

public class decimal2x3JsonConverter : JsonConverter<decimal2x3>
{
    public override decimal2x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetDecimal();
        reader.Read();
        var m01 = reader.GetDecimal();
        reader.Read();
        var m02 = reader.GetDecimal();
        reader.Read();
        var m10 = reader.GetDecimal();
        reader.Read();
        var m11 = reader.GetDecimal();
        reader.Read();
        var m12 = reader.GetDecimal();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12);
    }
    public override void Write(Utf8JsonWriter writer, decimal2x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteEndArray();
    }
}

#endregion // decimal2x3

#region decimal2x4

public class decimal2x4JsonConverter : JsonConverter<decimal2x4>
{
    public override decimal2x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetDecimal();
        reader.Read();
        var m01 = reader.GetDecimal();
        reader.Read();
        var m02 = reader.GetDecimal();
        reader.Read();
        var m03 = reader.GetDecimal();
        reader.Read();
        var m10 = reader.GetDecimal();
        reader.Read();
        var m11 = reader.GetDecimal();
        reader.Read();
        var m12 = reader.GetDecimal();
        reader.Read();
        var m13 = reader.GetDecimal();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13);
    }
    public override void Write(Utf8JsonWriter writer, decimal2x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteEndArray();
    }
}

#endregion // decimal2x4

#region decimal3x2

public class decimal3x2JsonConverter : JsonConverter<decimal3x2>
{
    public override decimal3x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetDecimal();
        reader.Read();
        var m01 = reader.GetDecimal();
        reader.Read();
        var m10 = reader.GetDecimal();
        reader.Read();
        var m11 = reader.GetDecimal();
        reader.Read();
        var m20 = reader.GetDecimal();
        reader.Read();
        var m21 = reader.GetDecimal();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21);
    }
    public override void Write(Utf8JsonWriter writer, decimal3x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteEndArray();
    }
}

#endregion // decimal3x2

#region decimal3x3

public class decimal3x3JsonConverter : JsonConverter<decimal3x3>
{
    public override decimal3x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetDecimal();
        reader.Read();
        var m01 = reader.GetDecimal();
        reader.Read();
        var m02 = reader.GetDecimal();
        reader.Read();
        var m10 = reader.GetDecimal();
        reader.Read();
        var m11 = reader.GetDecimal();
        reader.Read();
        var m12 = reader.GetDecimal();
        reader.Read();
        var m20 = reader.GetDecimal();
        reader.Read();
        var m21 = reader.GetDecimal();
        reader.Read();
        var m22 = reader.GetDecimal();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22);
    }
    public override void Write(Utf8JsonWriter writer, decimal3x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteEndArray();
    }
}

#endregion // decimal3x3

#region decimal3x4

public class decimal3x4JsonConverter : JsonConverter<decimal3x4>
{
    public override decimal3x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetDecimal();
        reader.Read();
        var m01 = reader.GetDecimal();
        reader.Read();
        var m02 = reader.GetDecimal();
        reader.Read();
        var m03 = reader.GetDecimal();
        reader.Read();
        var m10 = reader.GetDecimal();
        reader.Read();
        var m11 = reader.GetDecimal();
        reader.Read();
        var m12 = reader.GetDecimal();
        reader.Read();
        var m13 = reader.GetDecimal();
        reader.Read();
        var m20 = reader.GetDecimal();
        reader.Read();
        var m21 = reader.GetDecimal();
        reader.Read();
        var m22 = reader.GetDecimal();
        reader.Read();
        var m23 = reader.GetDecimal();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23);
    }
    public override void Write(Utf8JsonWriter writer, decimal3x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m23);
        writer.WriteEndArray();
    }
}

#endregion // decimal3x4

#region decimal4x2

public class decimal4x2JsonConverter : JsonConverter<decimal4x2>
{
    public override decimal4x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetDecimal();
        reader.Read();
        var m01 = reader.GetDecimal();
        reader.Read();
        var m10 = reader.GetDecimal();
        reader.Read();
        var m11 = reader.GetDecimal();
        reader.Read();
        var m20 = reader.GetDecimal();
        reader.Read();
        var m21 = reader.GetDecimal();
        reader.Read();
        var m30 = reader.GetDecimal();
        reader.Read();
        var m31 = reader.GetDecimal();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21, m30, m31);
    }
    public override void Write(Utf8JsonWriter writer, decimal4x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteEndArray();
    }
}

#endregion // decimal4x2

#region decimal4x3

public class decimal4x3JsonConverter : JsonConverter<decimal4x3>
{
    public override decimal4x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetDecimal();
        reader.Read();
        var m01 = reader.GetDecimal();
        reader.Read();
        var m02 = reader.GetDecimal();
        reader.Read();
        var m10 = reader.GetDecimal();
        reader.Read();
        var m11 = reader.GetDecimal();
        reader.Read();
        var m12 = reader.GetDecimal();
        reader.Read();
        var m20 = reader.GetDecimal();
        reader.Read();
        var m21 = reader.GetDecimal();
        reader.Read();
        var m22 = reader.GetDecimal();
        reader.Read();
        var m30 = reader.GetDecimal();
        reader.Read();
        var m31 = reader.GetDecimal();
        reader.Read();
        var m32 = reader.GetDecimal();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22, m30, m31, m32);
    }
    public override void Write(Utf8JsonWriter writer, decimal4x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteNumberValue(value.m32);
        writer.WriteEndArray();
    }
}

#endregion // decimal4x3

#region decimal4x4

public class decimal4x4JsonConverter : JsonConverter<decimal4x4>
{
    public override decimal4x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetDecimal();
        reader.Read();
        var m01 = reader.GetDecimal();
        reader.Read();
        var m02 = reader.GetDecimal();
        reader.Read();
        var m03 = reader.GetDecimal();
        reader.Read();
        var m10 = reader.GetDecimal();
        reader.Read();
        var m11 = reader.GetDecimal();
        reader.Read();
        var m12 = reader.GetDecimal();
        reader.Read();
        var m13 = reader.GetDecimal();
        reader.Read();
        var m20 = reader.GetDecimal();
        reader.Read();
        var m21 = reader.GetDecimal();
        reader.Read();
        var m22 = reader.GetDecimal();
        reader.Read();
        var m23 = reader.GetDecimal();
        reader.Read();
        var m30 = reader.GetDecimal();
        reader.Read();
        var m31 = reader.GetDecimal();
        reader.Read();
        var m32 = reader.GetDecimal();
        reader.Read();
        var m33 = reader.GetDecimal();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
    }
    public override void Write(Utf8JsonWriter writer, decimal4x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue(value.m00);
        writer.WriteNumberValue(value.m01);
        writer.WriteNumberValue(value.m02);
        writer.WriteNumberValue(value.m03);
        writer.WriteNumberValue(value.m10);
        writer.WriteNumberValue(value.m11);
        writer.WriteNumberValue(value.m12);
        writer.WriteNumberValue(value.m13);
        writer.WriteNumberValue(value.m20);
        writer.WriteNumberValue(value.m21);
        writer.WriteNumberValue(value.m22);
        writer.WriteNumberValue(value.m23);
        writer.WriteNumberValue(value.m30);
        writer.WriteNumberValue(value.m31);
        writer.WriteNumberValue(value.m32);
        writer.WriteNumberValue(value.m33);
        writer.WriteEndArray();
    }
}

#endregion // decimal4x4

#region half2x2

public class half2x2JsonConverter : JsonConverter<half2x2>
{
    public override half2x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = (half)reader.GetSingle();
        reader.Read();
        var m01 = (half)reader.GetSingle();
        reader.Read();
        var m10 = (half)reader.GetSingle();
        reader.Read();
        var m11 = (half)reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11);
    }
    public override void Write(Utf8JsonWriter writer, half2x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue((float)value.m00);
        writer.WriteNumberValue((float)value.m01);
        writer.WriteNumberValue((float)value.m10);
        writer.WriteNumberValue((float)value.m11);
        writer.WriteEndArray();
    }
}

#endregion // half2x2

#region half2x3

public class half2x3JsonConverter : JsonConverter<half2x3>
{
    public override half2x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = (half)reader.GetSingle();
        reader.Read();
        var m01 = (half)reader.GetSingle();
        reader.Read();
        var m02 = (half)reader.GetSingle();
        reader.Read();
        var m10 = (half)reader.GetSingle();
        reader.Read();
        var m11 = (half)reader.GetSingle();
        reader.Read();
        var m12 = (half)reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12);
    }
    public override void Write(Utf8JsonWriter writer, half2x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue((float)value.m00);
        writer.WriteNumberValue((float)value.m01);
        writer.WriteNumberValue((float)value.m02);
        writer.WriteNumberValue((float)value.m10);
        writer.WriteNumberValue((float)value.m11);
        writer.WriteNumberValue((float)value.m12);
        writer.WriteEndArray();
    }
}

#endregion // half2x3

#region half2x4

public class half2x4JsonConverter : JsonConverter<half2x4>
{
    public override half2x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = (half)reader.GetSingle();
        reader.Read();
        var m01 = (half)reader.GetSingle();
        reader.Read();
        var m02 = (half)reader.GetSingle();
        reader.Read();
        var m03 = (half)reader.GetSingle();
        reader.Read();
        var m10 = (half)reader.GetSingle();
        reader.Read();
        var m11 = (half)reader.GetSingle();
        reader.Read();
        var m12 = (half)reader.GetSingle();
        reader.Read();
        var m13 = (half)reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13);
    }
    public override void Write(Utf8JsonWriter writer, half2x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue((float)value.m00);
        writer.WriteNumberValue((float)value.m01);
        writer.WriteNumberValue((float)value.m02);
        writer.WriteNumberValue((float)value.m03);
        writer.WriteNumberValue((float)value.m10);
        writer.WriteNumberValue((float)value.m11);
        writer.WriteNumberValue((float)value.m12);
        writer.WriteNumberValue((float)value.m13);
        writer.WriteEndArray();
    }
}

#endregion // half2x4

#region half3x2

public class half3x2JsonConverter : JsonConverter<half3x2>
{
    public override half3x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = (half)reader.GetSingle();
        reader.Read();
        var m01 = (half)reader.GetSingle();
        reader.Read();
        var m10 = (half)reader.GetSingle();
        reader.Read();
        var m11 = (half)reader.GetSingle();
        reader.Read();
        var m20 = (half)reader.GetSingle();
        reader.Read();
        var m21 = (half)reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21);
    }
    public override void Write(Utf8JsonWriter writer, half3x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue((float)value.m00);
        writer.WriteNumberValue((float)value.m01);
        writer.WriteNumberValue((float)value.m10);
        writer.WriteNumberValue((float)value.m11);
        writer.WriteNumberValue((float)value.m20);
        writer.WriteNumberValue((float)value.m21);
        writer.WriteEndArray();
    }
}

#endregion // half3x2

#region half3x3

public class half3x3JsonConverter : JsonConverter<half3x3>
{
    public override half3x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = (half)reader.GetSingle();
        reader.Read();
        var m01 = (half)reader.GetSingle();
        reader.Read();
        var m02 = (half)reader.GetSingle();
        reader.Read();
        var m10 = (half)reader.GetSingle();
        reader.Read();
        var m11 = (half)reader.GetSingle();
        reader.Read();
        var m12 = (half)reader.GetSingle();
        reader.Read();
        var m20 = (half)reader.GetSingle();
        reader.Read();
        var m21 = (half)reader.GetSingle();
        reader.Read();
        var m22 = (half)reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22);
    }
    public override void Write(Utf8JsonWriter writer, half3x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue((float)value.m00);
        writer.WriteNumberValue((float)value.m01);
        writer.WriteNumberValue((float)value.m02);
        writer.WriteNumberValue((float)value.m10);
        writer.WriteNumberValue((float)value.m11);
        writer.WriteNumberValue((float)value.m12);
        writer.WriteNumberValue((float)value.m20);
        writer.WriteNumberValue((float)value.m21);
        writer.WriteNumberValue((float)value.m22);
        writer.WriteEndArray();
    }
}

#endregion // half3x3

#region half3x4

public class half3x4JsonConverter : JsonConverter<half3x4>
{
    public override half3x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = (half)reader.GetSingle();
        reader.Read();
        var m01 = (half)reader.GetSingle();
        reader.Read();
        var m02 = (half)reader.GetSingle();
        reader.Read();
        var m03 = (half)reader.GetSingle();
        reader.Read();
        var m10 = (half)reader.GetSingle();
        reader.Read();
        var m11 = (half)reader.GetSingle();
        reader.Read();
        var m12 = (half)reader.GetSingle();
        reader.Read();
        var m13 = (half)reader.GetSingle();
        reader.Read();
        var m20 = (half)reader.GetSingle();
        reader.Read();
        var m21 = (half)reader.GetSingle();
        reader.Read();
        var m22 = (half)reader.GetSingle();
        reader.Read();
        var m23 = (half)reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23);
    }
    public override void Write(Utf8JsonWriter writer, half3x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue((float)value.m00);
        writer.WriteNumberValue((float)value.m01);
        writer.WriteNumberValue((float)value.m02);
        writer.WriteNumberValue((float)value.m03);
        writer.WriteNumberValue((float)value.m10);
        writer.WriteNumberValue((float)value.m11);
        writer.WriteNumberValue((float)value.m12);
        writer.WriteNumberValue((float)value.m13);
        writer.WriteNumberValue((float)value.m20);
        writer.WriteNumberValue((float)value.m21);
        writer.WriteNumberValue((float)value.m22);
        writer.WriteNumberValue((float)value.m23);
        writer.WriteEndArray();
    }
}

#endregion // half3x4

#region half4x2

public class half4x2JsonConverter : JsonConverter<half4x2>
{
    public override half4x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = (half)reader.GetSingle();
        reader.Read();
        var m01 = (half)reader.GetSingle();
        reader.Read();
        var m10 = (half)reader.GetSingle();
        reader.Read();
        var m11 = (half)reader.GetSingle();
        reader.Read();
        var m20 = (half)reader.GetSingle();
        reader.Read();
        var m21 = (half)reader.GetSingle();
        reader.Read();
        var m30 = (half)reader.GetSingle();
        reader.Read();
        var m31 = (half)reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21, m30, m31);
    }
    public override void Write(Utf8JsonWriter writer, half4x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue((float)value.m00);
        writer.WriteNumberValue((float)value.m01);
        writer.WriteNumberValue((float)value.m10);
        writer.WriteNumberValue((float)value.m11);
        writer.WriteNumberValue((float)value.m20);
        writer.WriteNumberValue((float)value.m21);
        writer.WriteNumberValue((float)value.m30);
        writer.WriteNumberValue((float)value.m31);
        writer.WriteEndArray();
    }
}

#endregion // half4x2

#region half4x3

public class half4x3JsonConverter : JsonConverter<half4x3>
{
    public override half4x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = (half)reader.GetSingle();
        reader.Read();
        var m01 = (half)reader.GetSingle();
        reader.Read();
        var m02 = (half)reader.GetSingle();
        reader.Read();
        var m10 = (half)reader.GetSingle();
        reader.Read();
        var m11 = (half)reader.GetSingle();
        reader.Read();
        var m12 = (half)reader.GetSingle();
        reader.Read();
        var m20 = (half)reader.GetSingle();
        reader.Read();
        var m21 = (half)reader.GetSingle();
        reader.Read();
        var m22 = (half)reader.GetSingle();
        reader.Read();
        var m30 = (half)reader.GetSingle();
        reader.Read();
        var m31 = (half)reader.GetSingle();
        reader.Read();
        var m32 = (half)reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22, m30, m31, m32);
    }
    public override void Write(Utf8JsonWriter writer, half4x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue((float)value.m00);
        writer.WriteNumberValue((float)value.m01);
        writer.WriteNumberValue((float)value.m02);
        writer.WriteNumberValue((float)value.m10);
        writer.WriteNumberValue((float)value.m11);
        writer.WriteNumberValue((float)value.m12);
        writer.WriteNumberValue((float)value.m20);
        writer.WriteNumberValue((float)value.m21);
        writer.WriteNumberValue((float)value.m22);
        writer.WriteNumberValue((float)value.m30);
        writer.WriteNumberValue((float)value.m31);
        writer.WriteNumberValue((float)value.m32);
        writer.WriteEndArray();
    }
}

#endregion // half4x3

#region half4x4

public class half4x4JsonConverter : JsonConverter<half4x4>
{
    public override half4x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = (half)reader.GetSingle();
        reader.Read();
        var m01 = (half)reader.GetSingle();
        reader.Read();
        var m02 = (half)reader.GetSingle();
        reader.Read();
        var m03 = (half)reader.GetSingle();
        reader.Read();
        var m10 = (half)reader.GetSingle();
        reader.Read();
        var m11 = (half)reader.GetSingle();
        reader.Read();
        var m12 = (half)reader.GetSingle();
        reader.Read();
        var m13 = (half)reader.GetSingle();
        reader.Read();
        var m20 = (half)reader.GetSingle();
        reader.Read();
        var m21 = (half)reader.GetSingle();
        reader.Read();
        var m22 = (half)reader.GetSingle();
        reader.Read();
        var m23 = (half)reader.GetSingle();
        reader.Read();
        var m30 = (half)reader.GetSingle();
        reader.Read();
        var m31 = (half)reader.GetSingle();
        reader.Read();
        var m32 = (half)reader.GetSingle();
        reader.Read();
        var m33 = (half)reader.GetSingle();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
    }
    public override void Write(Utf8JsonWriter writer, half4x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteNumberValue((float)value.m00);
        writer.WriteNumberValue((float)value.m01);
        writer.WriteNumberValue((float)value.m02);
        writer.WriteNumberValue((float)value.m03);
        writer.WriteNumberValue((float)value.m10);
        writer.WriteNumberValue((float)value.m11);
        writer.WriteNumberValue((float)value.m12);
        writer.WriteNumberValue((float)value.m13);
        writer.WriteNumberValue((float)value.m20);
        writer.WriteNumberValue((float)value.m21);
        writer.WriteNumberValue((float)value.m22);
        writer.WriteNumberValue((float)value.m23);
        writer.WriteNumberValue((float)value.m30);
        writer.WriteNumberValue((float)value.m31);
        writer.WriteNumberValue((float)value.m32);
        writer.WriteNumberValue((float)value.m33);
        writer.WriteEndArray();
    }
}

#endregion // half4x4

#region b16m2x2

public class b16m2x2JsonConverter : JsonConverter<b16m2x2>
{
    public override b16m2x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11);
    }
    public override void Write(Utf8JsonWriter writer, b16m2x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteEndArray();
    }
}

#endregion // b16m2x2

#region b16m2x3

public class b16m2x3JsonConverter : JsonConverter<b16m2x3>
{
    public override b16m2x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m02 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m12 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12);
    }
    public override void Write(Utf8JsonWriter writer, b16m2x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m02);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m12);
        writer.WriteEndArray();
    }
}

#endregion // b16m2x3

#region b16m2x4

public class b16m2x4JsonConverter : JsonConverter<b16m2x4>
{
    public override b16m2x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m02 = reader.GetBoolean();
        reader.Read();
        var m03 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m12 = reader.GetBoolean();
        reader.Read();
        var m13 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13);
    }
    public override void Write(Utf8JsonWriter writer, b16m2x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m02);
        writer.WriteBooleanValue(value.m03);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m12);
        writer.WriteBooleanValue(value.m13);
        writer.WriteEndArray();
    }
}

#endregion // b16m2x4

#region b16m3x2

public class b16m3x2JsonConverter : JsonConverter<b16m3x2>
{
    public override b16m3x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m20 = reader.GetBoolean();
        reader.Read();
        var m21 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21);
    }
    public override void Write(Utf8JsonWriter writer, b16m3x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m20);
        writer.WriteBooleanValue(value.m21);
        writer.WriteEndArray();
    }
}

#endregion // b16m3x2

#region b16m3x3

public class b16m3x3JsonConverter : JsonConverter<b16m3x3>
{
    public override b16m3x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m02 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m12 = reader.GetBoolean();
        reader.Read();
        var m20 = reader.GetBoolean();
        reader.Read();
        var m21 = reader.GetBoolean();
        reader.Read();
        var m22 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22);
    }
    public override void Write(Utf8JsonWriter writer, b16m3x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m02);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m12);
        writer.WriteBooleanValue(value.m20);
        writer.WriteBooleanValue(value.m21);
        writer.WriteBooleanValue(value.m22);
        writer.WriteEndArray();
    }
}

#endregion // b16m3x3

#region b16m3x4

public class b16m3x4JsonConverter : JsonConverter<b16m3x4>
{
    public override b16m3x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m02 = reader.GetBoolean();
        reader.Read();
        var m03 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m12 = reader.GetBoolean();
        reader.Read();
        var m13 = reader.GetBoolean();
        reader.Read();
        var m20 = reader.GetBoolean();
        reader.Read();
        var m21 = reader.GetBoolean();
        reader.Read();
        var m22 = reader.GetBoolean();
        reader.Read();
        var m23 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23);
    }
    public override void Write(Utf8JsonWriter writer, b16m3x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m02);
        writer.WriteBooleanValue(value.m03);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m12);
        writer.WriteBooleanValue(value.m13);
        writer.WriteBooleanValue(value.m20);
        writer.WriteBooleanValue(value.m21);
        writer.WriteBooleanValue(value.m22);
        writer.WriteBooleanValue(value.m23);
        writer.WriteEndArray();
    }
}

#endregion // b16m3x4

#region b16m4x2

public class b16m4x2JsonConverter : JsonConverter<b16m4x2>
{
    public override b16m4x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m20 = reader.GetBoolean();
        reader.Read();
        var m21 = reader.GetBoolean();
        reader.Read();
        var m30 = reader.GetBoolean();
        reader.Read();
        var m31 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21, m30, m31);
    }
    public override void Write(Utf8JsonWriter writer, b16m4x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m20);
        writer.WriteBooleanValue(value.m21);
        writer.WriteBooleanValue(value.m30);
        writer.WriteBooleanValue(value.m31);
        writer.WriteEndArray();
    }
}

#endregion // b16m4x2

#region b16m4x3

public class b16m4x3JsonConverter : JsonConverter<b16m4x3>
{
    public override b16m4x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m02 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m12 = reader.GetBoolean();
        reader.Read();
        var m20 = reader.GetBoolean();
        reader.Read();
        var m21 = reader.GetBoolean();
        reader.Read();
        var m22 = reader.GetBoolean();
        reader.Read();
        var m30 = reader.GetBoolean();
        reader.Read();
        var m31 = reader.GetBoolean();
        reader.Read();
        var m32 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22, m30, m31, m32);
    }
    public override void Write(Utf8JsonWriter writer, b16m4x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m02);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m12);
        writer.WriteBooleanValue(value.m20);
        writer.WriteBooleanValue(value.m21);
        writer.WriteBooleanValue(value.m22);
        writer.WriteBooleanValue(value.m30);
        writer.WriteBooleanValue(value.m31);
        writer.WriteBooleanValue(value.m32);
        writer.WriteEndArray();
    }
}

#endregion // b16m4x3

#region b16m4x4

public class b16m4x4JsonConverter : JsonConverter<b16m4x4>
{
    public override b16m4x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m02 = reader.GetBoolean();
        reader.Read();
        var m03 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m12 = reader.GetBoolean();
        reader.Read();
        var m13 = reader.GetBoolean();
        reader.Read();
        var m20 = reader.GetBoolean();
        reader.Read();
        var m21 = reader.GetBoolean();
        reader.Read();
        var m22 = reader.GetBoolean();
        reader.Read();
        var m23 = reader.GetBoolean();
        reader.Read();
        var m30 = reader.GetBoolean();
        reader.Read();
        var m31 = reader.GetBoolean();
        reader.Read();
        var m32 = reader.GetBoolean();
        reader.Read();
        var m33 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
    }
    public override void Write(Utf8JsonWriter writer, b16m4x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m02);
        writer.WriteBooleanValue(value.m03);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m12);
        writer.WriteBooleanValue(value.m13);
        writer.WriteBooleanValue(value.m20);
        writer.WriteBooleanValue(value.m21);
        writer.WriteBooleanValue(value.m22);
        writer.WriteBooleanValue(value.m23);
        writer.WriteBooleanValue(value.m30);
        writer.WriteBooleanValue(value.m31);
        writer.WriteBooleanValue(value.m32);
        writer.WriteBooleanValue(value.m33);
        writer.WriteEndArray();
    }
}

#endregion // b16m4x4

#region b32m2x2

public class b32m2x2JsonConverter : JsonConverter<b32m2x2>
{
    public override b32m2x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11);
    }
    public override void Write(Utf8JsonWriter writer, b32m2x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteEndArray();
    }
}

#endregion // b32m2x2

#region b32m2x3

public class b32m2x3JsonConverter : JsonConverter<b32m2x3>
{
    public override b32m2x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m02 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m12 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12);
    }
    public override void Write(Utf8JsonWriter writer, b32m2x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m02);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m12);
        writer.WriteEndArray();
    }
}

#endregion // b32m2x3

#region b32m2x4

public class b32m2x4JsonConverter : JsonConverter<b32m2x4>
{
    public override b32m2x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m02 = reader.GetBoolean();
        reader.Read();
        var m03 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m12 = reader.GetBoolean();
        reader.Read();
        var m13 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13);
    }
    public override void Write(Utf8JsonWriter writer, b32m2x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m02);
        writer.WriteBooleanValue(value.m03);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m12);
        writer.WriteBooleanValue(value.m13);
        writer.WriteEndArray();
    }
}

#endregion // b32m2x4

#region b32m3x2

public class b32m3x2JsonConverter : JsonConverter<b32m3x2>
{
    public override b32m3x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m20 = reader.GetBoolean();
        reader.Read();
        var m21 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21);
    }
    public override void Write(Utf8JsonWriter writer, b32m3x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m20);
        writer.WriteBooleanValue(value.m21);
        writer.WriteEndArray();
    }
}

#endregion // b32m3x2

#region b32m3x3

public class b32m3x3JsonConverter : JsonConverter<b32m3x3>
{
    public override b32m3x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m02 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m12 = reader.GetBoolean();
        reader.Read();
        var m20 = reader.GetBoolean();
        reader.Read();
        var m21 = reader.GetBoolean();
        reader.Read();
        var m22 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22);
    }
    public override void Write(Utf8JsonWriter writer, b32m3x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m02);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m12);
        writer.WriteBooleanValue(value.m20);
        writer.WriteBooleanValue(value.m21);
        writer.WriteBooleanValue(value.m22);
        writer.WriteEndArray();
    }
}

#endregion // b32m3x3

#region b32m3x4

public class b32m3x4JsonConverter : JsonConverter<b32m3x4>
{
    public override b32m3x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m02 = reader.GetBoolean();
        reader.Read();
        var m03 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m12 = reader.GetBoolean();
        reader.Read();
        var m13 = reader.GetBoolean();
        reader.Read();
        var m20 = reader.GetBoolean();
        reader.Read();
        var m21 = reader.GetBoolean();
        reader.Read();
        var m22 = reader.GetBoolean();
        reader.Read();
        var m23 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23);
    }
    public override void Write(Utf8JsonWriter writer, b32m3x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m02);
        writer.WriteBooleanValue(value.m03);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m12);
        writer.WriteBooleanValue(value.m13);
        writer.WriteBooleanValue(value.m20);
        writer.WriteBooleanValue(value.m21);
        writer.WriteBooleanValue(value.m22);
        writer.WriteBooleanValue(value.m23);
        writer.WriteEndArray();
    }
}

#endregion // b32m3x4

#region b32m4x2

public class b32m4x2JsonConverter : JsonConverter<b32m4x2>
{
    public override b32m4x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m20 = reader.GetBoolean();
        reader.Read();
        var m21 = reader.GetBoolean();
        reader.Read();
        var m30 = reader.GetBoolean();
        reader.Read();
        var m31 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21, m30, m31);
    }
    public override void Write(Utf8JsonWriter writer, b32m4x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m20);
        writer.WriteBooleanValue(value.m21);
        writer.WriteBooleanValue(value.m30);
        writer.WriteBooleanValue(value.m31);
        writer.WriteEndArray();
    }
}

#endregion // b32m4x2

#region b32m4x3

public class b32m4x3JsonConverter : JsonConverter<b32m4x3>
{
    public override b32m4x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m02 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m12 = reader.GetBoolean();
        reader.Read();
        var m20 = reader.GetBoolean();
        reader.Read();
        var m21 = reader.GetBoolean();
        reader.Read();
        var m22 = reader.GetBoolean();
        reader.Read();
        var m30 = reader.GetBoolean();
        reader.Read();
        var m31 = reader.GetBoolean();
        reader.Read();
        var m32 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22, m30, m31, m32);
    }
    public override void Write(Utf8JsonWriter writer, b32m4x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m02);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m12);
        writer.WriteBooleanValue(value.m20);
        writer.WriteBooleanValue(value.m21);
        writer.WriteBooleanValue(value.m22);
        writer.WriteBooleanValue(value.m30);
        writer.WriteBooleanValue(value.m31);
        writer.WriteBooleanValue(value.m32);
        writer.WriteEndArray();
    }
}

#endregion // b32m4x3

#region b32m4x4

public class b32m4x4JsonConverter : JsonConverter<b32m4x4>
{
    public override b32m4x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m02 = reader.GetBoolean();
        reader.Read();
        var m03 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m12 = reader.GetBoolean();
        reader.Read();
        var m13 = reader.GetBoolean();
        reader.Read();
        var m20 = reader.GetBoolean();
        reader.Read();
        var m21 = reader.GetBoolean();
        reader.Read();
        var m22 = reader.GetBoolean();
        reader.Read();
        var m23 = reader.GetBoolean();
        reader.Read();
        var m30 = reader.GetBoolean();
        reader.Read();
        var m31 = reader.GetBoolean();
        reader.Read();
        var m32 = reader.GetBoolean();
        reader.Read();
        var m33 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
    }
    public override void Write(Utf8JsonWriter writer, b32m4x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m02);
        writer.WriteBooleanValue(value.m03);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m12);
        writer.WriteBooleanValue(value.m13);
        writer.WriteBooleanValue(value.m20);
        writer.WriteBooleanValue(value.m21);
        writer.WriteBooleanValue(value.m22);
        writer.WriteBooleanValue(value.m23);
        writer.WriteBooleanValue(value.m30);
        writer.WriteBooleanValue(value.m31);
        writer.WriteBooleanValue(value.m32);
        writer.WriteBooleanValue(value.m33);
        writer.WriteEndArray();
    }
}

#endregion // b32m4x4

#region b64m2x2

public class b64m2x2JsonConverter : JsonConverter<b64m2x2>
{
    public override b64m2x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11);
    }
    public override void Write(Utf8JsonWriter writer, b64m2x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteEndArray();
    }
}

#endregion // b64m2x2

#region b64m2x3

public class b64m2x3JsonConverter : JsonConverter<b64m2x3>
{
    public override b64m2x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m02 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m12 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12);
    }
    public override void Write(Utf8JsonWriter writer, b64m2x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m02);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m12);
        writer.WriteEndArray();
    }
}

#endregion // b64m2x3

#region b64m2x4

public class b64m2x4JsonConverter : JsonConverter<b64m2x4>
{
    public override b64m2x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m02 = reader.GetBoolean();
        reader.Read();
        var m03 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m12 = reader.GetBoolean();
        reader.Read();
        var m13 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13);
    }
    public override void Write(Utf8JsonWriter writer, b64m2x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m02);
        writer.WriteBooleanValue(value.m03);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m12);
        writer.WriteBooleanValue(value.m13);
        writer.WriteEndArray();
    }
}

#endregion // b64m2x4

#region b64m3x2

public class b64m3x2JsonConverter : JsonConverter<b64m3x2>
{
    public override b64m3x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m20 = reader.GetBoolean();
        reader.Read();
        var m21 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21);
    }
    public override void Write(Utf8JsonWriter writer, b64m3x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m20);
        writer.WriteBooleanValue(value.m21);
        writer.WriteEndArray();
    }
}

#endregion // b64m3x2

#region b64m3x3

public class b64m3x3JsonConverter : JsonConverter<b64m3x3>
{
    public override b64m3x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m02 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m12 = reader.GetBoolean();
        reader.Read();
        var m20 = reader.GetBoolean();
        reader.Read();
        var m21 = reader.GetBoolean();
        reader.Read();
        var m22 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22);
    }
    public override void Write(Utf8JsonWriter writer, b64m3x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m02);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m12);
        writer.WriteBooleanValue(value.m20);
        writer.WriteBooleanValue(value.m21);
        writer.WriteBooleanValue(value.m22);
        writer.WriteEndArray();
    }
}

#endregion // b64m3x3

#region b64m3x4

public class b64m3x4JsonConverter : JsonConverter<b64m3x4>
{
    public override b64m3x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m02 = reader.GetBoolean();
        reader.Read();
        var m03 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m12 = reader.GetBoolean();
        reader.Read();
        var m13 = reader.GetBoolean();
        reader.Read();
        var m20 = reader.GetBoolean();
        reader.Read();
        var m21 = reader.GetBoolean();
        reader.Read();
        var m22 = reader.GetBoolean();
        reader.Read();
        var m23 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23);
    }
    public override void Write(Utf8JsonWriter writer, b64m3x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m02);
        writer.WriteBooleanValue(value.m03);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m12);
        writer.WriteBooleanValue(value.m13);
        writer.WriteBooleanValue(value.m20);
        writer.WriteBooleanValue(value.m21);
        writer.WriteBooleanValue(value.m22);
        writer.WriteBooleanValue(value.m23);
        writer.WriteEndArray();
    }
}

#endregion // b64m3x4

#region b64m4x2

public class b64m4x2JsonConverter : JsonConverter<b64m4x2>
{
    public override b64m4x2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m20 = reader.GetBoolean();
        reader.Read();
        var m21 = reader.GetBoolean();
        reader.Read();
        var m30 = reader.GetBoolean();
        reader.Read();
        var m31 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m10, m11, m20, m21, m30, m31);
    }
    public override void Write(Utf8JsonWriter writer, b64m4x2 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m20);
        writer.WriteBooleanValue(value.m21);
        writer.WriteBooleanValue(value.m30);
        writer.WriteBooleanValue(value.m31);
        writer.WriteEndArray();
    }
}

#endregion // b64m4x2

#region b64m4x3

public class b64m4x3JsonConverter : JsonConverter<b64m4x3>
{
    public override b64m4x3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m02 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m12 = reader.GetBoolean();
        reader.Read();
        var m20 = reader.GetBoolean();
        reader.Read();
        var m21 = reader.GetBoolean();
        reader.Read();
        var m22 = reader.GetBoolean();
        reader.Read();
        var m30 = reader.GetBoolean();
        reader.Read();
        var m31 = reader.GetBoolean();
        reader.Read();
        var m32 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m10, m11, m12, m20, m21, m22, m30, m31, m32);
    }
    public override void Write(Utf8JsonWriter writer, b64m4x3 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m02);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m12);
        writer.WriteBooleanValue(value.m20);
        writer.WriteBooleanValue(value.m21);
        writer.WriteBooleanValue(value.m22);
        writer.WriteBooleanValue(value.m30);
        writer.WriteBooleanValue(value.m31);
        writer.WriteBooleanValue(value.m32);
        writer.WriteEndArray();
    }
}

#endregion // b64m4x3

#region b64m4x4

public class b64m4x4JsonConverter : JsonConverter<b64m4x4>
{
    public override b64m4x4 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.StartArray) 
            throw new JsonException($"Expected {JsonTokenType.StartArray} but found {reader.TokenType}");
        reader.Read();
        var m00 = reader.GetBoolean();
        reader.Read();
        var m01 = reader.GetBoolean();
        reader.Read();
        var m02 = reader.GetBoolean();
        reader.Read();
        var m03 = reader.GetBoolean();
        reader.Read();
        var m10 = reader.GetBoolean();
        reader.Read();
        var m11 = reader.GetBoolean();
        reader.Read();
        var m12 = reader.GetBoolean();
        reader.Read();
        var m13 = reader.GetBoolean();
        reader.Read();
        var m20 = reader.GetBoolean();
        reader.Read();
        var m21 = reader.GetBoolean();
        reader.Read();
        var m22 = reader.GetBoolean();
        reader.Read();
        var m23 = reader.GetBoolean();
        reader.Read();
        var m30 = reader.GetBoolean();
        reader.Read();
        var m31 = reader.GetBoolean();
        reader.Read();
        var m32 = reader.GetBoolean();
        reader.Read();
        var m33 = reader.GetBoolean();
        if (reader.TokenType is not JsonTokenType.EndArray) 
            throw new JsonException($"Expected {JsonTokenType.EndArray} but found {reader.TokenType}");
        return new(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
    }
    public override void Write(Utf8JsonWriter writer, b64m4x4 value, JsonSerializerOptions options)
    {
        writer.WriteStartArray();
        writer.WriteBooleanValue(value.m00);
        writer.WriteBooleanValue(value.m01);
        writer.WriteBooleanValue(value.m02);
        writer.WriteBooleanValue(value.m03);
        writer.WriteBooleanValue(value.m10);
        writer.WriteBooleanValue(value.m11);
        writer.WriteBooleanValue(value.m12);
        writer.WriteBooleanValue(value.m13);
        writer.WriteBooleanValue(value.m20);
        writer.WriteBooleanValue(value.m21);
        writer.WriteBooleanValue(value.m22);
        writer.WriteBooleanValue(value.m23);
        writer.WriteBooleanValue(value.m30);
        writer.WriteBooleanValue(value.m31);
        writer.WriteBooleanValue(value.m32);
        writer.WriteBooleanValue(value.m33);
        writer.WriteEndArray();
    }
}

#endregion // b64m4x4
