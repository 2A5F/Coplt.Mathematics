<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually
#if NET8_0_OR_GREATER
using System.Runtime.Intrinsics.X86;
using System.Runtime.Intrinsics.Arm;

namespace Coplt.Mathematics;

public static partial class simd_matrix
{
<#
    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd || !(typ.f || typ.i)) continue;
        {
            var byteSize = typ.size * 4;
            var bitSize = 8 * byteSize;
            
            var t_byteSize = typ.size * 2;
            var t_bitSize = 8 * t_byteSize;

            var typeName = $"Vector{bitSize}<{typ.simdComp}>";
            var vecName = $"Vector{bitSize}";
            
            var t_typeName = $"Vector{t_bitSize}<{typ.simdComp}>";
            var t_vecName = $"Vector{t_bitSize}";
#>
    #region <#= typeName #>

    [MethodImpl(256 | 512)]
    public static (<#= typeName #> c0, <#= typeName #> c1) Transpose2x4To4x2(
        <#= t_typeName #> c0, <#= t_typeName #> c1, <#= t_typeName #> c2, <#= t_typeName #> c3
    )
    {
<#
            if (typ.name is "float")
            {
#>
        if (Sse.IsSupported)
        {
            var a = Vector128.Create(c0, c1);
            var b = Vector128.Create(c2, c3);
            var oc0 = Sse.Shuffle(a, b, 0x88); // a0 a2 b0 b2 => (c0.x, c1.x, c2.x, c3.x)
            var oc1 = Sse.Shuffle(a, b, 0xDD); // a1 a3 b1 b3 => (c0.y, c1.y, c2.y, c3.y)
            return (oc0, oc1);
        }
<#
            }
            else if (typ.name is "double")
            {
#>
        if (Avx.IsSupported)
        {
            var a = Vector256.Create(c0, c2);
            var b = Vector256.Create(c1, c3);
            var oc0 = Avx.Shuffle(a, b, 0x0); // a0 b0 a2 b2 => (c0.x, c1.x, c2.x, c3.x)
            var oc1 = Avx.Shuffle(a, b, 0xF); // a1 b1 a3 b3 => (c0.y, c1.y, c2.y, c3.y)
            return (oc0, oc1);
        }
<#
            }
            else if (typ.name is "int" or "uint")
            {
#>
        if (Sse.IsSupported)
        {
            var ic0 = c0.AsSingle();
            var ic1 = c1.AsSingle();
            var ic2 = c2.AsSingle();
            var ic3 = c3.AsSingle();
            var a = Vector128.Create(ic0, ic1);
            var b = Vector128.Create(ic2, ic3);
            var oc0 = Sse.Shuffle(a, b, 0x88); // a0 a2 b0 b2 => (c0.x, c1.x, c2.x, c3.x)
            var oc1 = Sse.Shuffle(a, b, 0xDD); // a1 a3 b1 b3 => (c0.y, c1.y, c2.y, c3.y)
            return (oc0.As<#= typ.Type #>(), oc1.As<#= typ.Type #>());
        }
<#
            }
            else if (typ.name is "long" or "ulong")
            {
#>
        if (Avx.IsSupported)
        {
            var ic0 = c0.AsDouble();
            var ic1 = c1.AsDouble();
            var ic2 = c2.AsDouble();
            var ic3 = c3.AsDouble();
            var a = Vector256.Create(ic0, ic2);
            var b = Vector256.Create(ic1, ic3);
            var oc0 = Avx.Shuffle(a, b, 0x0); // a0 b0 a2 b2 => (c0.x, c1.x, c2.x, c3.x)
            var oc1 = Avx.Shuffle(a, b, 0xF); // a1 b1 a3 b3 => (c0.y, c1.y, c2.y, c3.y)
            return (oc0.As<#= typ.Type #>(), oc1.As<#= typ.Type #>());
        }
<#
            }
#>
        {
            var oc0 = <#= vecName #>.Create(c0.GetElement(0), c1.GetElement(0), c2.GetElement(0), c3.GetElement(0));
            var oc1 = <#= vecName #>.Create(c0.GetElement(1), c1.GetElement(1), c2.GetElement(1), c3.GetElement(1));
            return (oc0, oc1);
        }
    }

    #endregion
<#
        }
    }
#>
}

#endif
