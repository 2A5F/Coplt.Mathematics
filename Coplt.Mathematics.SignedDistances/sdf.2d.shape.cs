// generated by template, do not modify manually

namespace Coplt.Mathematics.SignedDistances;

#region float

[method: MethodImpl(256 | 512)]
public readonly partial record struct round2d<S>(S shape, float radius) : ISdfShape2d<float, float2> 
    where S : ISdfShape2d<float, float2>
{
    public readonly S shape = shape;
    public readonly float radius = radius;

    [MethodImpl(256 | 512)]
    public float calc(float2 target) => shape.calc(target) - radius;
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct onion2d<S>(S shape, float radius) : ISdfShape2d<float, float2> 
    where S : ISdfShape2d<float, float2>
{
    public readonly S shape = shape;
    public readonly float radius = radius;

    [MethodImpl(256 | 512)]
    public float calc(float2 target) => shape.calc(target).abs() - radius;
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct point2d(float2 center) : ISdfShape2d<float, float2>
{
    public readonly float2 center = center;

    [MethodImpl(256 | 512)]
    public float calc(float2 target) => sdf.circle(target, center, 0);
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct circle(float2 center, float radius) : ISdfShape2d<float, float2>
{
    public readonly float2 center = center;
    public readonly float radius = radius;

    [MethodImpl(256 | 512)]
    public float calc(float2 target) => sdf.circle(target, center, radius);
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct segment(float2 a, float2 b, float radius = default) : ISdfShape2d<float, float2>
{
    public readonly float2 a = a;
    public readonly float2 b = b;
    public readonly float radius = radius;

    [MethodImpl(256 | 512)]
    public float calc(float2 target) => sdf.segment(target, a, b, radius);
}

#endregion // float

#region double

[method: MethodImpl(256 | 512)]
public readonly partial record struct round2d_d<S>(S shape, double radius) : ISdfShape2d<double, double2> 
    where S : ISdfShape2d<double, double2>
{
    public readonly S shape = shape;
    public readonly double radius = radius;

    [MethodImpl(256 | 512)]
    public double calc(double2 target) => shape.calc(target) - radius;
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct onion2d_d<S>(S shape, double radius) : ISdfShape2d<double, double2> 
    where S : ISdfShape2d<double, double2>
{
    public readonly S shape = shape;
    public readonly double radius = radius;

    [MethodImpl(256 | 512)]
    public double calc(double2 target) => shape.calc(target).abs() - radius;
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct point2d_d(double2 center) : ISdfShape2d<double, double2>
{
    public readonly double2 center = center;

    [MethodImpl(256 | 512)]
    public double calc(double2 target) => sdf.circle(target, center, 0);
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct circle_d(double2 center, double radius) : ISdfShape2d<double, double2>
{
    public readonly double2 center = center;
    public readonly double radius = radius;

    [MethodImpl(256 | 512)]
    public double calc(double2 target) => sdf.circle(target, center, radius);
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct segment_d(double2 a, double2 b, double radius = default) : ISdfShape2d<double, double2>
{
    public readonly double2 a = a;
    public readonly double2 b = b;
    public readonly double radius = radius;

    [MethodImpl(256 | 512)]
    public double calc(double2 target) => sdf.segment(target, a, b, radius);
}

#endregion // double

