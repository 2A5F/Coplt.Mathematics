<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\Coplt.Mathematics\types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.SignedDistances;

public static partial class sdf
{

<#
    foreach (var typ in Typ.Typs)
    {
        if (!typ.f || !typ.bin) continue;
        if (typ.name == "half") continue;

        var typeBitSize = typ.size * 8;

        var byteSize = typ.size * 4;
        var bitSize = 8 * byteSize;

        var suffix = typ.suffix;

        var scalar = typ.compType;
        var vec4 = $"{typ.name}{4}";
        var vec3 = $"{typ.name}{3}";
        var vec2 = $"{typ.name}{2}";
        var vec = vec2;
#>
    #region <#= typ.name #>

    /// <summary>
    /// Calculate the distance to the circle
    /// </summary>
    /// <param name="p">Origin</param>
    /// <param name="c">Center of the circle</param>
    /// <param name="r">Radius of the circle</param>
    /// <returns>The distance from the origin to the circle</returns>
    [MethodImpl(256 | 512)]
    public static <#= scalar #> circle(<#= vec #> p, <#= vec #> c, <#= scalar #> r) => (p - c).length() - r;

    /// <summary>
    /// Calculate the distance to the segment
    /// </summary>
    /// <param name="p">Origin</param>
    /// <param name="a">Point A of the segment</param>
    /// <param name="b">Point B of the segment</param>
    /// <param name="r">Radius of the segment</param>
    /// <returns>The distance from the origin to the segment</returns>
    public static <#= scalar #> segment(<#= vec #> p, <#= vec #> a, <#= vec #> b, <#= scalar #> r = default)
    {
        var pa = p - a;
        var ba = b - a;
        var h = (pa.dot(ba) / ba.dot(ba)).clamp(0.0<#= suffix #>, 1.0<#= suffix #>);
        return (pa - ba * h).length() - r;
    }

    #endregion // <#= typ.name #>

<#
    }
#>
}
