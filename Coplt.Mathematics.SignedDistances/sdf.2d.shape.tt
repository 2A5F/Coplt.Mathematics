<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\Coplt.Mathematics\types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.SignedDistances;

<#
    foreach (var typ in Typ.Typs)
    {
        if (!typ.f || !typ.bin) continue;
        if (typ.name == "half") continue;

        var typeBitSize = typ.size * 8;

        var byteSize = typ.size * 4;
        var bitSize = 8 * byteSize;

        var suffix = typ.suffix;

        var scalar = typ.compType;
        var vec4 = $"{typ.name}{4}";
        var vec3 = $"{typ.name}{3}";
        var vec2 = $"{typ.name}{2}";
        var vec = vec2;
#>
#region <#= typ.name #>

[method: MethodImpl(256 | 512)]
public readonly partial record struct round2d<#= typ.structSuffix #><S>(S shape, <#= scalar #> radius) : ISdfShape2d<<#= scalar #>, <#= vec #>> 
    where S : ISdfShape2d<<#= scalar #>, <#= vec #>>
{
    public readonly S shape = shape;
    public readonly <#= scalar #> radius = radius;

    [MethodImpl(256 | 512)]
    public <#= scalar #> calc(<#= vec #> target) => shape.calc(target) - radius;
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct onion2d<#= typ.structSuffix #><S>(S shape, <#= scalar #> radius) : ISdfShape2d<<#= scalar #>, <#= vec #>> 
    where S : ISdfShape2d<<#= scalar #>, <#= vec #>>
{
    public readonly S shape = shape;
    public readonly <#= scalar #> radius = radius;

    [MethodImpl(256 | 512)]
    public <#= scalar #> calc(<#= vec #> target) => shape.calc(target).abs() - radius;
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct point2d<#= typ.structSuffix #>(<#= vec #> center) : ISdfShape2d<<#= scalar #>, <#= vec #>>
{
    public readonly <#= vec #> center = center;

    [MethodImpl(256 | 512)]
    public <#= scalar #> calc(<#= vec #> target) => sdf.circle(target, center, 0);
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct circle<#= typ.structSuffix #>(<#= vec #> center, <#= scalar #> radius) : ISdfShape2d<<#= scalar #>, <#= vec #>>
{
    public readonly <#= vec #> center = center;
    public readonly <#= scalar #> radius = radius;

    [MethodImpl(256 | 512)]
    public <#= scalar #> calc(<#= vec #> target) => sdf.circle(target, center, radius);
}

[method: MethodImpl(256 | 512)]
public readonly partial record struct segment<#= typ.structSuffix #>(<#= vec #> a, <#= vec #> b, <#= scalar #> radius = default) : ISdfShape2d<<#= scalar #>, <#= vec #>>
{
    public readonly <#= vec #> a = a;
    public readonly <#= vec #> b = b;
    public readonly <#= scalar #> radius = radius;

    [MethodImpl(256 | 512)]
    public <#= scalar #> calc(<#= vec #> target) => sdf.segment(target, a, b, radius);
}

#endregion // <#= typ.name #>

<#
    }
#>
